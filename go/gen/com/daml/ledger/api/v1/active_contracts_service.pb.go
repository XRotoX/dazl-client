// Copyright (c) 2020 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
// SPDX-License-Identifier: Apache-2.0

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.21.0
// 	protoc        v3.11.4
// source: com/daml/ledger/api/v1/active_contracts_service.proto

package v1

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type GetActiveContractsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Must correspond to the ledger ID reported by the Ledger Identification Service.
	// Must be a valid LedgerString (as described in ``value.proto``).
	// Required
	LedgerId string `protobuf:"bytes,1,opt,name=ledger_id,json=ledgerId,proto3" json:"ledger_id,omitempty"`
	// Templates to include in the served snapshot, per party.
	// Required
	Filter *TransactionFilter `protobuf:"bytes,2,opt,name=filter,proto3" json:"filter,omitempty"`
	// If enabled, values served over the API will contain more information than strictly necessary to interpret the data.
	// In particular, setting the verbose flag to true triggers the ledger to include labels for record fields.
	// Optional
	Verbose bool `protobuf:"varint,3,opt,name=verbose,proto3" json:"verbose,omitempty"`
	// Server side tracing will be registered as a child of the submitted context.
	// This field is a future extension point and is currently not supported.
	// Optional
	TraceContext *TraceContext `protobuf:"bytes,1000,opt,name=trace_context,json=traceContext,proto3" json:"trace_context,omitempty"`
}

func (x *GetActiveContractsRequest) Reset() {
	*x = GetActiveContractsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_daml_ledger_api_v1_active_contracts_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetActiveContractsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetActiveContractsRequest) ProtoMessage() {}

func (x *GetActiveContractsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_com_daml_ledger_api_v1_active_contracts_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetActiveContractsRequest.ProtoReflect.Descriptor instead.
func (*GetActiveContractsRequest) Descriptor() ([]byte, []int) {
	return file_com_daml_ledger_api_v1_active_contracts_service_proto_rawDescGZIP(), []int{0}
}

func (x *GetActiveContractsRequest) GetLedgerId() string {
	if x != nil {
		return x.LedgerId
	}
	return ""
}

func (x *GetActiveContractsRequest) GetFilter() *TransactionFilter {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *GetActiveContractsRequest) GetVerbose() bool {
	if x != nil {
		return x.Verbose
	}
	return false
}

func (x *GetActiveContractsRequest) GetTraceContext() *TraceContext {
	if x != nil {
		return x.TraceContext
	}
	return nil
}

type GetActiveContractsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Included in the last message.
	// The client should start consuming the transactions endpoint with this offset.
	// The format of this field is described in ``ledger_offset.proto``.
	// Required
	Offset string `protobuf:"bytes,1,opt,name=offset,proto3" json:"offset,omitempty"`
	// The workflow that created the contracts.
	// Must be a valid LedgerString (as described in ``value.proto``).
	// Optional
	WorkflowId string `protobuf:"bytes,2,opt,name=workflow_id,json=workflowId,proto3" json:"workflow_id,omitempty"`
	// The list of contracts that were introduced by the workflow with ``workflow_id`` at the offset.
	// Must be a valid LedgerString (as described in ``value.proto``).
	// Optional
	ActiveContracts []*CreatedEvent `protobuf:"bytes,3,rep,name=active_contracts,json=activeContracts,proto3" json:"active_contracts,omitempty"`
	// Zipkin trace context.
	// This field is a future extension point and is currently not supported.
	// Optional
	TraceContext *TraceContext `protobuf:"bytes,1000,opt,name=trace_context,json=traceContext,proto3" json:"trace_context,omitempty"`
}

func (x *GetActiveContractsResponse) Reset() {
	*x = GetActiveContractsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_daml_ledger_api_v1_active_contracts_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetActiveContractsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetActiveContractsResponse) ProtoMessage() {}

func (x *GetActiveContractsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_com_daml_ledger_api_v1_active_contracts_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetActiveContractsResponse.ProtoReflect.Descriptor instead.
func (*GetActiveContractsResponse) Descriptor() ([]byte, []int) {
	return file_com_daml_ledger_api_v1_active_contracts_service_proto_rawDescGZIP(), []int{1}
}

func (x *GetActiveContractsResponse) GetOffset() string {
	if x != nil {
		return x.Offset
	}
	return ""
}

func (x *GetActiveContractsResponse) GetWorkflowId() string {
	if x != nil {
		return x.WorkflowId
	}
	return ""
}

func (x *GetActiveContractsResponse) GetActiveContracts() []*CreatedEvent {
	if x != nil {
		return x.ActiveContracts
	}
	return nil
}

func (x *GetActiveContractsResponse) GetTraceContext() *TraceContext {
	if x != nil {
		return x.TraceContext
	}
	return nil
}

var File_com_daml_ledger_api_v1_active_contracts_service_proto protoreflect.FileDescriptor

var file_com_daml_ledger_api_v1_active_contracts_service_proto_rawDesc = []byte{
	0x0a, 0x35, 0x63, 0x6f, 0x6d, 0x2f, 0x64, 0x61, 0x6d, 0x6c, 0x2f, 0x6c, 0x65, 0x64, 0x67, 0x65,
	0x72, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x16, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x61, 0x6d,
	0x6c, 0x2e, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x1a,
	0x22, 0x63, 0x6f, 0x6d, 0x2f, 0x64, 0x61, 0x6d, 0x6c, 0x2f, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x2f, 0x63, 0x6f, 0x6d, 0x2f, 0x64, 0x61, 0x6d, 0x6c, 0x2f, 0x6c, 0x65,
	0x64, 0x67, 0x65, 0x72, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2a, 0x63, 0x6f, 0x6d, 0x2f, 0x64, 0x61, 0x6d, 0x6c, 0x2f, 0x6c,
	0x65, 0x64, 0x67, 0x65, 0x72, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x72, 0x61,
	0x63, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0xe1, 0x01, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x43, 0x6f,
	0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b,
	0x0a, 0x09, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x49, 0x64, 0x12, 0x41, 0x0a, 0x06, 0x66,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x2e, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x18,
	0x0a, 0x07, 0x76, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x07, 0x76, 0x65, 0x72, 0x62, 0x6f, 0x73, 0x65, 0x12, 0x4a, 0x0a, 0x0d, 0x74, 0x72, 0x61, 0x63,
	0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0xe8, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x24, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x2e, 0x6c, 0x65, 0x64, 0x67,
	0x65, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x65, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x0c, 0x74, 0x72, 0x61, 0x63, 0x65, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x78, 0x74, 0x22, 0xf2, 0x01, 0x0a, 0x1a, 0x47, 0x65, 0x74, 0x41, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x77,
	0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x77, 0x6f, 0x72, 0x6b, 0x66, 0x6c, 0x6f, 0x77, 0x49, 0x64, 0x12, 0x4f, 0x0a, 0x10,
	0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x61, 0x6d,
	0x6c, 0x2e, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x0f, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x12, 0x4a, 0x0a,
	0x0d, 0x74, 0x72, 0x61, 0x63, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0xe8,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x61, 0x6d, 0x6c,
	0x2e, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x54,
	0x72, 0x61, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x52, 0x0c, 0x74, 0x72, 0x61,
	0x63, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x32, 0x97, 0x01, 0x0a, 0x16, 0x41, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x12, 0x7d, 0x0a, 0x12, 0x47, 0x65, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x12, 0x31, 0x2e, 0x63, 0x6f, 0x6d,
	0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x2e, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x2e, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x30, 0x01, 0x42, 0x6b, 0x0a, 0x16, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x2e,
	0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x42, 0x20, 0x41,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x73, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x4f, 0x75, 0x74, 0x65, 0x72, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5a,
	0x16, 0x63, 0x6f, 0x6d, 0x2f, 0x64, 0x61, 0x6d, 0x6c, 0x2f, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0xaa, 0x02, 0x16, 0x43, 0x6f, 0x6d, 0x2e, 0x44, 0x61,
	0x6d, 0x6c, 0x2e, 0x4c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x2e, 0x41, 0x70, 0x69, 0x2e, 0x56, 0x31,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_com_daml_ledger_api_v1_active_contracts_service_proto_rawDescOnce sync.Once
	file_com_daml_ledger_api_v1_active_contracts_service_proto_rawDescData = file_com_daml_ledger_api_v1_active_contracts_service_proto_rawDesc
)

func file_com_daml_ledger_api_v1_active_contracts_service_proto_rawDescGZIP() []byte {
	file_com_daml_ledger_api_v1_active_contracts_service_proto_rawDescOnce.Do(func() {
		file_com_daml_ledger_api_v1_active_contracts_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_com_daml_ledger_api_v1_active_contracts_service_proto_rawDescData)
	})
	return file_com_daml_ledger_api_v1_active_contracts_service_proto_rawDescData
}

var file_com_daml_ledger_api_v1_active_contracts_service_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_com_daml_ledger_api_v1_active_contracts_service_proto_goTypes = []interface{}{
	(*GetActiveContractsRequest)(nil),  // 0: com.daml.ledger.api.v1.GetActiveContractsRequest
	(*GetActiveContractsResponse)(nil), // 1: com.daml.ledger.api.v1.GetActiveContractsResponse
	(*TransactionFilter)(nil),          // 2: com.daml.ledger.api.v1.TransactionFilter
	(*TraceContext)(nil),               // 3: com.daml.ledger.api.v1.TraceContext
	(*CreatedEvent)(nil),               // 4: com.daml.ledger.api.v1.CreatedEvent
}
var file_com_daml_ledger_api_v1_active_contracts_service_proto_depIdxs = []int32{
	2, // 0: com.daml.ledger.api.v1.GetActiveContractsRequest.filter:type_name -> com.daml.ledger.api.v1.TransactionFilter
	3, // 1: com.daml.ledger.api.v1.GetActiveContractsRequest.trace_context:type_name -> com.daml.ledger.api.v1.TraceContext
	4, // 2: com.daml.ledger.api.v1.GetActiveContractsResponse.active_contracts:type_name -> com.daml.ledger.api.v1.CreatedEvent
	3, // 3: com.daml.ledger.api.v1.GetActiveContractsResponse.trace_context:type_name -> com.daml.ledger.api.v1.TraceContext
	0, // 4: com.daml.ledger.api.v1.ActiveContractsService.GetActiveContracts:input_type -> com.daml.ledger.api.v1.GetActiveContractsRequest
	1, // 5: com.daml.ledger.api.v1.ActiveContractsService.GetActiveContracts:output_type -> com.daml.ledger.api.v1.GetActiveContractsResponse
	5, // [5:6] is the sub-list for method output_type
	4, // [4:5] is the sub-list for method input_type
	4, // [4:4] is the sub-list for extension type_name
	4, // [4:4] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() { file_com_daml_ledger_api_v1_active_contracts_service_proto_init() }
func file_com_daml_ledger_api_v1_active_contracts_service_proto_init() {
	if File_com_daml_ledger_api_v1_active_contracts_service_proto != nil {
		return
	}
	file_com_daml_ledger_api_v1_event_proto_init()
	file_com_daml_ledger_api_v1_transaction_filter_proto_init()
	file_com_daml_ledger_api_v1_trace_context_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_com_daml_ledger_api_v1_active_contracts_service_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetActiveContractsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_daml_ledger_api_v1_active_contracts_service_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetActiveContractsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_com_daml_ledger_api_v1_active_contracts_service_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_com_daml_ledger_api_v1_active_contracts_service_proto_goTypes,
		DependencyIndexes: file_com_daml_ledger_api_v1_active_contracts_service_proto_depIdxs,
		MessageInfos:      file_com_daml_ledger_api_v1_active_contracts_service_proto_msgTypes,
	}.Build()
	File_com_daml_ledger_api_v1_active_contracts_service_proto = out.File
	file_com_daml_ledger_api_v1_active_contracts_service_proto_rawDesc = nil
	file_com_daml_ledger_api_v1_active_contracts_service_proto_goTypes = nil
	file_com_daml_ledger_api_v1_active_contracts_service_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// ActiveContractsServiceClient is the client API for ActiveContractsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ActiveContractsServiceClient interface {
	// Returns a stream of the latest snapshot of active contracts.
	// If there are no active contracts, the stream returns a single GetActiveContractsResponse message with the offset at which the snapshot has been taken.
	// Clients SHOULD use the offset in the last GetActiveContractsResponse message to continue streaming transactions with the transaction service.
	// Clients SHOULD NOT assume that the set of active contracts they receive reflects the state at the ledger end.
	GetActiveContracts(ctx context.Context, in *GetActiveContractsRequest, opts ...grpc.CallOption) (ActiveContractsService_GetActiveContractsClient, error)
}

type activeContractsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewActiveContractsServiceClient(cc grpc.ClientConnInterface) ActiveContractsServiceClient {
	return &activeContractsServiceClient{cc}
}

func (c *activeContractsServiceClient) GetActiveContracts(ctx context.Context, in *GetActiveContractsRequest, opts ...grpc.CallOption) (ActiveContractsService_GetActiveContractsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_ActiveContractsService_serviceDesc.Streams[0], "/com.daml.ledger.api.v1.ActiveContractsService/GetActiveContracts", opts...)
	if err != nil {
		return nil, err
	}
	x := &activeContractsServiceGetActiveContractsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ActiveContractsService_GetActiveContractsClient interface {
	Recv() (*GetActiveContractsResponse, error)
	grpc.ClientStream
}

type activeContractsServiceGetActiveContractsClient struct {
	grpc.ClientStream
}

func (x *activeContractsServiceGetActiveContractsClient) Recv() (*GetActiveContractsResponse, error) {
	m := new(GetActiveContractsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ActiveContractsServiceServer is the server API for ActiveContractsService service.
type ActiveContractsServiceServer interface {
	// Returns a stream of the latest snapshot of active contracts.
	// If there are no active contracts, the stream returns a single GetActiveContractsResponse message with the offset at which the snapshot has been taken.
	// Clients SHOULD use the offset in the last GetActiveContractsResponse message to continue streaming transactions with the transaction service.
	// Clients SHOULD NOT assume that the set of active contracts they receive reflects the state at the ledger end.
	GetActiveContracts(*GetActiveContractsRequest, ActiveContractsService_GetActiveContractsServer) error
}

// UnimplementedActiveContractsServiceServer can be embedded to have forward compatible implementations.
type UnimplementedActiveContractsServiceServer struct {
}

func (*UnimplementedActiveContractsServiceServer) GetActiveContracts(*GetActiveContractsRequest, ActiveContractsService_GetActiveContractsServer) error {
	return status.Errorf(codes.Unimplemented, "method GetActiveContracts not implemented")
}

func RegisterActiveContractsServiceServer(s *grpc.Server, srv ActiveContractsServiceServer) {
	s.RegisterService(&_ActiveContractsService_serviceDesc, srv)
}

func _ActiveContractsService_GetActiveContracts_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetActiveContractsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ActiveContractsServiceServer).GetActiveContracts(m, &activeContractsServiceGetActiveContractsServer{stream})
}

type ActiveContractsService_GetActiveContractsServer interface {
	Send(*GetActiveContractsResponse) error
	grpc.ServerStream
}

type activeContractsServiceGetActiveContractsServer struct {
	grpc.ServerStream
}

func (x *activeContractsServiceGetActiveContractsServer) Send(m *GetActiveContractsResponse) error {
	return x.ServerStream.SendMsg(m)
}

var _ActiveContractsService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "com.daml.ledger.api.v1.ActiveContractsService",
	HandlerType: (*ActiveContractsServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetActiveContracts",
			Handler:       _ActiveContractsService_GetActiveContracts_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "com/daml/ledger/api/v1/active_contracts_service.proto",
}
