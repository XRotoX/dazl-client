// Copyright (c) 2020 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
// SPDX-License-Identifier: Apache-2.0

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.21.0
// 	protoc        v3.11.4
// source: com/daml/ledger/api/v1/ledger_identity_service.proto

package v1

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type GetLedgerIdentityRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Server side tracing will be registered as a child of the submitted context.
	// This field is a future extension point and is currently not supported.
	// Optional
	TraceContext *TraceContext `protobuf:"bytes,1000,opt,name=trace_context,json=traceContext,proto3" json:"trace_context,omitempty"`
}

func (x *GetLedgerIdentityRequest) Reset() {
	*x = GetLedgerIdentityRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_daml_ledger_api_v1_ledger_identity_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetLedgerIdentityRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLedgerIdentityRequest) ProtoMessage() {}

func (x *GetLedgerIdentityRequest) ProtoReflect() protoreflect.Message {
	mi := &file_com_daml_ledger_api_v1_ledger_identity_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLedgerIdentityRequest.ProtoReflect.Descriptor instead.
func (*GetLedgerIdentityRequest) Descriptor() ([]byte, []int) {
	return file_com_daml_ledger_api_v1_ledger_identity_service_proto_rawDescGZIP(), []int{0}
}

func (x *GetLedgerIdentityRequest) GetTraceContext() *TraceContext {
	if x != nil {
		return x.TraceContext
	}
	return nil
}

type GetLedgerIdentityResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The ID of the ledger exposed by the server.
	// Requests submitted with the wrong ledger ID will result in ``NOT_FOUND`` gRPC errors.
	// Must be a valid LedgerString (as described in ``value.proto``).
	// Required
	LedgerId string `protobuf:"bytes,1,opt,name=ledger_id,json=ledgerId,proto3" json:"ledger_id,omitempty"`
}

func (x *GetLedgerIdentityResponse) Reset() {
	*x = GetLedgerIdentityResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_daml_ledger_api_v1_ledger_identity_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetLedgerIdentityResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLedgerIdentityResponse) ProtoMessage() {}

func (x *GetLedgerIdentityResponse) ProtoReflect() protoreflect.Message {
	mi := &file_com_daml_ledger_api_v1_ledger_identity_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLedgerIdentityResponse.ProtoReflect.Descriptor instead.
func (*GetLedgerIdentityResponse) Descriptor() ([]byte, []int) {
	return file_com_daml_ledger_api_v1_ledger_identity_service_proto_rawDescGZIP(), []int{1}
}

func (x *GetLedgerIdentityResponse) GetLedgerId() string {
	if x != nil {
		return x.LedgerId
	}
	return ""
}

var File_com_daml_ledger_api_v1_ledger_identity_service_proto protoreflect.FileDescriptor

var file_com_daml_ledger_api_v1_ledger_identity_service_proto_rawDesc = []byte{
	0x0a, 0x34, 0x63, 0x6f, 0x6d, 0x2f, 0x64, 0x61, 0x6d, 0x6c, 0x2f, 0x6c, 0x65, 0x64, 0x67, 0x65,
	0x72, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x5f,
	0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x16, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x61, 0x6d, 0x6c,
	0x2e, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x1a, 0x2a,
	0x63, 0x6f, 0x6d, 0x2f, 0x64, 0x61, 0x6d, 0x6c, 0x2f, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x72, 0x61, 0x63, 0x65, 0x5f, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x78, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x66, 0x0a, 0x18, 0x47, 0x65,
	0x74, 0x4c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4a, 0x0a, 0x0d, 0x74, 0x72, 0x61, 0x63, 0x65, 0x5f,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x18, 0xe8, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24,
	0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x2e, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x61, 0x63, 0x65, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x78, 0x74, 0x52, 0x0c, 0x74, 0x72, 0x61, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x78, 0x74, 0x22, 0x38, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x4c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x1b, 0x0a, 0x09, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x49, 0x64, 0x32, 0x91, 0x01, 0x0a,
	0x15, 0x4c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x78, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x4c, 0x65, 0x64,
	0x67, 0x65, 0x72, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x30, 0x2e, 0x63, 0x6f,
	0x6d, 0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x2e, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e,
	0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x2e, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x65, 0x64, 0x67, 0x65, 0x72,
	0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x42, 0x6a, 0x0a, 0x16, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x2e, 0x6c, 0x65, 0x64,
	0x67, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x42, 0x1f, 0x4c, 0x65, 0x64, 0x67,
	0x65, 0x72, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x4f, 0x75, 0x74, 0x65, 0x72, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x5a, 0x16, 0x63, 0x6f, 0x6d,
	0x2f, 0x64, 0x61, 0x6d, 0x6c, 0x2f, 0x6c, 0x65, 0x64, 0x67, 0x65, 0x72, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x76, 0x31, 0xaa, 0x02, 0x16, 0x43, 0x6f, 0x6d, 0x2e, 0x44, 0x61, 0x6d, 0x6c, 0x2e, 0x4c,
	0x65, 0x64, 0x67, 0x65, 0x72, 0x2e, 0x41, 0x70, 0x69, 0x2e, 0x56, 0x31, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_com_daml_ledger_api_v1_ledger_identity_service_proto_rawDescOnce sync.Once
	file_com_daml_ledger_api_v1_ledger_identity_service_proto_rawDescData = file_com_daml_ledger_api_v1_ledger_identity_service_proto_rawDesc
)

func file_com_daml_ledger_api_v1_ledger_identity_service_proto_rawDescGZIP() []byte {
	file_com_daml_ledger_api_v1_ledger_identity_service_proto_rawDescOnce.Do(func() {
		file_com_daml_ledger_api_v1_ledger_identity_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_com_daml_ledger_api_v1_ledger_identity_service_proto_rawDescData)
	})
	return file_com_daml_ledger_api_v1_ledger_identity_service_proto_rawDescData
}

var file_com_daml_ledger_api_v1_ledger_identity_service_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_com_daml_ledger_api_v1_ledger_identity_service_proto_goTypes = []interface{}{
	(*GetLedgerIdentityRequest)(nil),  // 0: com.daml.ledger.api.v1.GetLedgerIdentityRequest
	(*GetLedgerIdentityResponse)(nil), // 1: com.daml.ledger.api.v1.GetLedgerIdentityResponse
	(*TraceContext)(nil),              // 2: com.daml.ledger.api.v1.TraceContext
}
var file_com_daml_ledger_api_v1_ledger_identity_service_proto_depIdxs = []int32{
	2, // 0: com.daml.ledger.api.v1.GetLedgerIdentityRequest.trace_context:type_name -> com.daml.ledger.api.v1.TraceContext
	0, // 1: com.daml.ledger.api.v1.LedgerIdentityService.GetLedgerIdentity:input_type -> com.daml.ledger.api.v1.GetLedgerIdentityRequest
	1, // 2: com.daml.ledger.api.v1.LedgerIdentityService.GetLedgerIdentity:output_type -> com.daml.ledger.api.v1.GetLedgerIdentityResponse
	2, // [2:3] is the sub-list for method output_type
	1, // [1:2] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_com_daml_ledger_api_v1_ledger_identity_service_proto_init() }
func file_com_daml_ledger_api_v1_ledger_identity_service_proto_init() {
	if File_com_daml_ledger_api_v1_ledger_identity_service_proto != nil {
		return
	}
	file_com_daml_ledger_api_v1_trace_context_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_com_daml_ledger_api_v1_ledger_identity_service_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetLedgerIdentityRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_daml_ledger_api_v1_ledger_identity_service_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetLedgerIdentityResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_com_daml_ledger_api_v1_ledger_identity_service_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_com_daml_ledger_api_v1_ledger_identity_service_proto_goTypes,
		DependencyIndexes: file_com_daml_ledger_api_v1_ledger_identity_service_proto_depIdxs,
		MessageInfos:      file_com_daml_ledger_api_v1_ledger_identity_service_proto_msgTypes,
	}.Build()
	File_com_daml_ledger_api_v1_ledger_identity_service_proto = out.File
	file_com_daml_ledger_api_v1_ledger_identity_service_proto_rawDesc = nil
	file_com_daml_ledger_api_v1_ledger_identity_service_proto_goTypes = nil
	file_com_daml_ledger_api_v1_ledger_identity_service_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// LedgerIdentityServiceClient is the client API for LedgerIdentityService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type LedgerIdentityServiceClient interface {
	// Clients may call this RPC to return the identifier of the ledger they are connected to.
	GetLedgerIdentity(ctx context.Context, in *GetLedgerIdentityRequest, opts ...grpc.CallOption) (*GetLedgerIdentityResponse, error)
}

type ledgerIdentityServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewLedgerIdentityServiceClient(cc grpc.ClientConnInterface) LedgerIdentityServiceClient {
	return &ledgerIdentityServiceClient{cc}
}

func (c *ledgerIdentityServiceClient) GetLedgerIdentity(ctx context.Context, in *GetLedgerIdentityRequest, opts ...grpc.CallOption) (*GetLedgerIdentityResponse, error) {
	out := new(GetLedgerIdentityResponse)
	err := c.cc.Invoke(ctx, "/com.daml.ledger.api.v1.LedgerIdentityService/GetLedgerIdentity", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LedgerIdentityServiceServer is the server API for LedgerIdentityService service.
type LedgerIdentityServiceServer interface {
	// Clients may call this RPC to return the identifier of the ledger they are connected to.
	GetLedgerIdentity(context.Context, *GetLedgerIdentityRequest) (*GetLedgerIdentityResponse, error)
}

// UnimplementedLedgerIdentityServiceServer can be embedded to have forward compatible implementations.
type UnimplementedLedgerIdentityServiceServer struct {
}

func (*UnimplementedLedgerIdentityServiceServer) GetLedgerIdentity(context.Context, *GetLedgerIdentityRequest) (*GetLedgerIdentityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLedgerIdentity not implemented")
}

func RegisterLedgerIdentityServiceServer(s *grpc.Server, srv LedgerIdentityServiceServer) {
	s.RegisterService(&_LedgerIdentityService_serviceDesc, srv)
}

func _LedgerIdentityService_GetLedgerIdentity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLedgerIdentityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LedgerIdentityServiceServer).GetLedgerIdentity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/com.daml.ledger.api.v1.LedgerIdentityService/GetLedgerIdentity",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LedgerIdentityServiceServer).GetLedgerIdentity(ctx, req.(*GetLedgerIdentityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _LedgerIdentityService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "com.daml.ledger.api.v1.LedgerIdentityService",
	HandlerType: (*LedgerIdentityServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetLedgerIdentity",
			Handler:    _LedgerIdentityService_GetLedgerIdentity_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "com/daml/ledger/api/v1/ledger_identity_service.proto",
}
