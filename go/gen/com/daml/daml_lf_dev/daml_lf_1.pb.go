// Copyright (c) 2020 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
// SPDX-License-Identifier: Apache-2.0

// .proto representation of the first version of the DAML-LF language,
// as specified by
// <https://github.com/digital-asset/daml/blob/master/daml-lf/spec/daml-lf-1.rst>.
//
// A few notes:
//
// * We generally "compress" structures that are often repeated, such as
//   application, let bindings, abstractions, etc.. In the Haskell / Scala
//   AST we probably will use the normal binary forms.
// * We generally never "newtype" strings, even if it might be good in
//   the actual AST. This is to keep the message structure relatively flat
//   and light.

// Minor version history:
// * 0 (somewhen in December 2018): initial version
// * 1 -- 2019-01-10: Add Optional type
//     -- 2019-01-27: Add <, <=, =>, > for Party
//     -- 2019-01-29: Add PrimType.ARROW
// * 2 -- 2019-03-18: Add BuiltinFunction.{SHA256_TEXT, TO_TEXT_PARTY, FROM_TEXT_PARTY}
//     -- 2019-03-18: Add flexible controllers (change scoping of controller expressions)
// * 3 -- 2019-03-25: Add contract keys
//     -- 2019-03-27: Add Map type
// * 4 -- 2019-05-15: Add complex contract keys
// * 5 -- 2019-05-22: Relax serializability constraints for contract ids
//        2019-05-23: Add BuiltinFunction.COERCE_CONTRACT_ID
//        2019-05-24: Make actors in exercise optional
// * 6 -- 2019-05-27: Add enum type.
//        2019-06-04: Add BuiltinFunction.{TEXT_FROM_CODE_POINTS, TEXT_TO_CODE_POINTS}
//        2019-06-12: Add Package.interned_package_ids and PackageRef.interned_id
//        2019-07-04: Transaction submitters must be in contract key maintainers when looking up. See #1866.
// * 7 -- 2019-07-29: Add nat kind and Nat types, Numeric types and Numeric builtins
//        2019-09-17: Add Any type and, `to_any` and `from_any` builtins
//        2019-09-17: Drop support for Decimal
//        2019-09-30: Add interning of strings and dotted names
//        2019-11-04: Add Type representation values
// * 8 -- 2019-11-22: Rename Map to TextMap
//        2019-11-28: Rename Tuple to Struct
//        2019-12-03: Add type synonyms
//        2020-02-20: Add PackageMetadata.
// * dev (special staging area for the next version to be released)
//        2019-11-12: Add Generic Map (GenMap)
//        2019-12-03: Add (experimental) text primitives.
//        2019-12-05: Add Generic Equality builtin

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.21.0
// 	protoc        v3.11.4
// source: com/daml/daml_lf_dev/daml_lf_1.proto

package daml_lf_dev

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

// Builtin primitive types
type PrimType int32

const (
	// Builtin type 'Unit'
	PrimType_UNIT PrimType = 0
	// Builtin type 'Bool'
	PrimType_BOOL PrimType = 1
	// Builtin type 'Int64'
	PrimType_INT64 PrimType = 2
	// Builtin type for legacy 'Decimal'
	// Alias for (Numeric 10)
	// *available in version < 1.7*
	PrimType_DECIMAL PrimType = 3
	// Builtin type 'Text'
	PrimType_TEXT PrimType = 5
	// Builtin type 'Timestamp'
	PrimType_TIMESTAMP PrimType = 6
	// Builtin tpe 'Party'
	PrimType_PARTY PrimType = 8
	// Builtin type 'List'
	PrimType_LIST PrimType = 9
	// Builtin type 'Update'
	PrimType_UPDATE PrimType = 10
	// Builtin type 'Scenario'
	PrimType_SCENARIO PrimType = 11
	// Builtin type 'Date'
	PrimType_DATE PrimType = 12
	// Builtin type 'ContractId'
	PrimType_CONTRACT_ID PrimType = 13
	// Builtin type 'Optional'
	// *Available in versions >= 1.1*
	PrimType_OPTIONAL PrimType = 14
	// Builtin type `TArrow`
	// *Available in versions >= 1.1*
	PrimType_ARROW PrimType = 15
	// Builtin type 'TTextMap`
	// *Available in versions >= 1.3*
	PrimType_TEXTMAP PrimType = 16
	// Builtin type 'Numeric'
	// *Available in versions >= 1.7*
	PrimType_NUMERIC PrimType = 17
	// Builtin type 'Any'
	// *Available in versions >= 1.7*
	PrimType_ANY PrimType = 18
	// Builtin type 'TypeRep'
	// *Available in versions >= 1.7*
	PrimType_TYPE_REP PrimType = 19
	// Builtin type 'TGenMap`
	// *Available in versions >= 1.dev*
	PrimType_GENMAP PrimType = 20
)

// Enum value maps for PrimType.
var (
	PrimType_name = map[int32]string{
		0:  "UNIT",
		1:  "BOOL",
		2:  "INT64",
		3:  "DECIMAL",
		5:  "TEXT",
		6:  "TIMESTAMP",
		8:  "PARTY",
		9:  "LIST",
		10: "UPDATE",
		11: "SCENARIO",
		12: "DATE",
		13: "CONTRACT_ID",
		14: "OPTIONAL",
		15: "ARROW",
		16: "TEXTMAP",
		17: "NUMERIC",
		18: "ANY",
		19: "TYPE_REP",
		20: "GENMAP",
	}
	PrimType_value = map[string]int32{
		"UNIT":        0,
		"BOOL":        1,
		"INT64":       2,
		"DECIMAL":     3,
		"TEXT":        5,
		"TIMESTAMP":   6,
		"PARTY":       8,
		"LIST":        9,
		"UPDATE":      10,
		"SCENARIO":    11,
		"DATE":        12,
		"CONTRACT_ID": 13,
		"OPTIONAL":    14,
		"ARROW":       15,
		"TEXTMAP":     16,
		"NUMERIC":     17,
		"ANY":         18,
		"TYPE_REP":    19,
		"GENMAP":      20,
	}
)

func (x PrimType) Enum() *PrimType {
	p := new(PrimType)
	*p = x
	return p
}

func (x PrimType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PrimType) Descriptor() protoreflect.EnumDescriptor {
	return file_com_daml_daml_lf_dev_daml_lf_1_proto_enumTypes[0].Descriptor()
}

func (PrimType) Type() protoreflect.EnumType {
	return &file_com_daml_daml_lf_dev_daml_lf_1_proto_enumTypes[0]
}

func (x PrimType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PrimType.Descriptor instead.
func (PrimType) EnumDescriptor() ([]byte, []int) {
	return file_com_daml_daml_lf_dev_daml_lf_1_proto_rawDescGZIP(), []int{0}
}

// Primitive constructors
type PrimCon int32

const (
	// Unit value '()'
	PrimCon_CON_UNIT PrimCon = 0
	// 'False' boolean value
	PrimCon_CON_FALSE PrimCon = 1
	// 'True' boolean value
	PrimCon_CON_TRUE PrimCon = 2
)

// Enum value maps for PrimCon.
var (
	PrimCon_name = map[int32]string{
		0: "CON_UNIT",
		1: "CON_FALSE",
		2: "CON_TRUE",
	}
	PrimCon_value = map[string]int32{
		"CON_UNIT":  0,
		"CON_FALSE": 1,
		"CON_TRUE":  2,
	}
)

func (x PrimCon) Enum() *PrimCon {
	p := new(PrimCon)
	*p = x
	return p
}

func (x PrimCon) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PrimCon) Descriptor() protoreflect.EnumDescriptor {
	return file_com_daml_daml_lf_dev_daml_lf_1_proto_enumTypes[1].Descriptor()
}

func (PrimCon) Type() protoreflect.EnumType {
	return &file_com_daml_daml_lf_dev_daml_lf_1_proto_enumTypes[1]
}

func (x PrimCon) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PrimCon.Descriptor instead.
func (PrimCon) EnumDescriptor() ([]byte, []int) {
	return file_com_daml_daml_lf_dev_daml_lf_1_proto_rawDescGZIP(), []int{1}
}

// Builtin functions
// Refer to DAML-LF major version 1 specification for types and behavior of those.
type BuiltinFunction int32

const (
	BuiltinFunction_ADD_DECIMAL                    BuiltinFunction = 0   // *Available in versions < 1.7*
	BuiltinFunction_SUB_DECIMAL                    BuiltinFunction = 1   // *Available in versions < 1.7*
	BuiltinFunction_MUL_DECIMAL                    BuiltinFunction = 2   // *Available in versions < 1.7*
	BuiltinFunction_DIV_DECIMAL                    BuiltinFunction = 3   // *Available in versions < 1.7*
	BuiltinFunction_ROUND_DECIMAL                  BuiltinFunction = 6   // *Available in versions < 1.7*
	BuiltinFunction_ADD_NUMERIC                    BuiltinFunction = 107 // *Available in versions >= 1.7*
	BuiltinFunction_SUB_NUMERIC                    BuiltinFunction = 108 // *Available in versions >= 1.7*
	BuiltinFunction_MUL_NUMERIC                    BuiltinFunction = 109 // *Available in versions >= 1.7*
	BuiltinFunction_DIV_NUMERIC                    BuiltinFunction = 110 // *Available in versions >= 1.7*
	BuiltinFunction_ROUND_NUMERIC                  BuiltinFunction = 111 // *Available in versions >= 1.7*
	BuiltinFunction_CAST_NUMERIC                   BuiltinFunction = 121 // *Available in versions >= 1.7*
	BuiltinFunction_SHIFT_NUMERIC                  BuiltinFunction = 122 // *Available in versions >= 1.7*
	BuiltinFunction_ADD_INT64                      BuiltinFunction = 7
	BuiltinFunction_SUB_INT64                      BuiltinFunction = 8
	BuiltinFunction_MUL_INT64                      BuiltinFunction = 9
	BuiltinFunction_DIV_INT64                      BuiltinFunction = 10
	BuiltinFunction_MOD_INT64                      BuiltinFunction = 11
	BuiltinFunction_EXP_INT64                      BuiltinFunction = 12
	BuiltinFunction_FOLDL                          BuiltinFunction = 20
	BuiltinFunction_FOLDR                          BuiltinFunction = 21
	BuiltinFunction_TEXTMAP_EMPTY                  BuiltinFunction = 96
	BuiltinFunction_TEXTMAP_INSERT                 BuiltinFunction = 97
	BuiltinFunction_TEXTMAP_LOOKUP                 BuiltinFunction = 98
	BuiltinFunction_TEXTMAP_DELETE                 BuiltinFunction = 99
	BuiltinFunction_TEXTMAP_TO_LIST                BuiltinFunction = 100
	BuiltinFunction_TEXTMAP_SIZE                   BuiltinFunction = 101
	BuiltinFunction_GENMAP_EMPTY                   BuiltinFunction = 124 // *Available in versions >= 1.dev*
	BuiltinFunction_GENMAP_INSERT                  BuiltinFunction = 125 // *Available in versions >= 1.dev*
	BuiltinFunction_GENMAP_LOOKUP                  BuiltinFunction = 126 // *Available in versions >= 1.dev*
	BuiltinFunction_GENMAP_DELETE                  BuiltinFunction = 127 // *Available in versions >= 1.dev*
	BuiltinFunction_GENMAP_KEYS                    BuiltinFunction = 128 // *Available in versions >= 1.dev*
	BuiltinFunction_GENMAP_VALUES                  BuiltinFunction = 129 // *Available in versions >= 1.dev*
	BuiltinFunction_GENMAP_SIZE                    BuiltinFunction = 130 // *Available in versions >= 1.dev*
	BuiltinFunction_EXPLODE_TEXT                   BuiltinFunction = 23
	BuiltinFunction_APPEND_TEXT                    BuiltinFunction = 24
	BuiltinFunction_ERROR                          BuiltinFunction = 25
	BuiltinFunction_LEQ_INT64                      BuiltinFunction = 33  // *Available in versions < 1.dev*
	BuiltinFunction_LEQ_DECIMAL                    BuiltinFunction = 34  // *Available in versions < 1.7*
	BuiltinFunction_LEQ_NUMERIC                    BuiltinFunction = 112 // *Available in versions >= 1.7 and < 1.dev*
	BuiltinFunction_LEQ_TEXT                       BuiltinFunction = 36  // *Available in versions < 1.dev*
	BuiltinFunction_LEQ_TIMESTAMP                  BuiltinFunction = 37  // *Available in versions < 1.dev*
	BuiltinFunction_LEQ_DATE                       BuiltinFunction = 67  // *Available in versions < 1.dev*
	BuiltinFunction_LEQ_PARTY                      BuiltinFunction = 89  // *Available in versions >= 1.1 and < 1.dev*
	BuiltinFunction_LESS_INT64                     BuiltinFunction = 39  // *Available in versions < 1.dev*
	BuiltinFunction_LESS_DECIMAL                   BuiltinFunction = 40  // *Available in versions < 1.7*
	BuiltinFunction_LESS_NUMERIC                   BuiltinFunction = 113 // *Available in versions >= 1.7 and < 1.dev*
	BuiltinFunction_LESS_TEXT                      BuiltinFunction = 42  // *Available in versions < 1.dev*
	BuiltinFunction_LESS_TIMESTAMP                 BuiltinFunction = 43  // *Available in versions < 1.dev*
	BuiltinFunction_LESS_DATE                      BuiltinFunction = 68  // *Available in versions < 1.dev*
	BuiltinFunction_LESS_PARTY                     BuiltinFunction = 90  // *Available in versions >= 1.1 and < 1.dev*
	BuiltinFunction_GEQ_INT64                      BuiltinFunction = 45  // *Available in versions < 1.dev*
	BuiltinFunction_GEQ_DECIMAL                    BuiltinFunction = 46  // *Available in versions < 1.7*
	BuiltinFunction_GEQ_NUMERIC                    BuiltinFunction = 114 // *Available in versions >= 1.7 and < 1.dev*
	BuiltinFunction_GEQ_TEXT                       BuiltinFunction = 48  // *Available in versions < 1.dev*
	BuiltinFunction_GEQ_TIMESTAMP                  BuiltinFunction = 49  // *Available in versions < 1.dev*
	BuiltinFunction_GEQ_DATE                       BuiltinFunction = 69  // *Available in versions < 1.dev*
	BuiltinFunction_GEQ_PARTY                      BuiltinFunction = 91  // *Available in versions >= 1.1 and < 1.dev*
	BuiltinFunction_GREATER_INT64                  BuiltinFunction = 51  // *Available in versions < 1.dev*
	BuiltinFunction_GREATER_DECIMAL                BuiltinFunction = 52  // *Available in versions < 1.7*
	BuiltinFunction_GREATER_NUMERIC                BuiltinFunction = 115 // *Available in versions >= 1.7 and < 1.dev*
	BuiltinFunction_GREATER_TEXT                   BuiltinFunction = 54  // *Available in versions < 1.dev*
	BuiltinFunction_GREATER_TIMESTAMP              BuiltinFunction = 55  // *Available in versions < 1.dev*
	BuiltinFunction_GREATER_DATE                   BuiltinFunction = 70  // *Available in versions < 1.dev*
	BuiltinFunction_GREATER_PARTY                  BuiltinFunction = 92  // *Available in versions >= 1.1 and < 1.dev*
	BuiltinFunction_TO_TEXT_INT64                  BuiltinFunction = 57
	BuiltinFunction_TO_TEXT_DECIMAL                BuiltinFunction = 58  // *Available in versions < 1.7*
	BuiltinFunction_TO_TEXT_NUMERIC                BuiltinFunction = 116 // *Available in versions >= 1.7*
	BuiltinFunction_TO_TEXT_TEXT                   BuiltinFunction = 60
	BuiltinFunction_TO_TEXT_TIMESTAMP              BuiltinFunction = 61
	BuiltinFunction_TO_TEXT_DATE                   BuiltinFunction = 71
	BuiltinFunction_TO_QUOTED_TEXT_PARTY           BuiltinFunction = 63  // legacy, remove in next major version
	BuiltinFunction_TO_TEXT_PARTY                  BuiltinFunction = 94  // *Available in versions >= 1.2*
	BuiltinFunction_FROM_TEXT_PARTY                BuiltinFunction = 95  // *Available in versions >= 1.2*, was named FROM_TEXT_PARTY in 1.2, 1.3 and 1.4
	BuiltinFunction_FROM_TEXT_INT64                BuiltinFunction = 103 // *Available in versions >= 1.5*
	BuiltinFunction_FROM_TEXT_DECIMAL              BuiltinFunction = 104 // *Available in versions 1.5 and 1.6
	BuiltinFunction_FROM_TEXT_NUMERIC              BuiltinFunction = 117 // *Available in versions >= 1.7*
	BuiltinFunction_SHA256_TEXT                    BuiltinFunction = 93  // *Available in versions >= 1.2*
	BuiltinFunction_DATE_TO_UNIX_DAYS              BuiltinFunction = 72  // Date -> Int64
	BuiltinFunction_UNIX_DAYS_TO_DATE              BuiltinFunction = 73  // Int64 -> Date
	BuiltinFunction_TIMESTAMP_TO_UNIX_MICROSECONDS BuiltinFunction = 74  // Timestamp -> Int64
	BuiltinFunction_UNIX_MICROSECONDS_TO_TIMESTAMP BuiltinFunction = 75  // Int64 -> Timestamp
	BuiltinFunction_INT64_TO_DECIMAL               BuiltinFunction = 76  // *Available in versions < 1.7*
	BuiltinFunction_DECIMAL_TO_INT64               BuiltinFunction = 77  // *Available in versions < 1.7*
	BuiltinFunction_INT64_TO_NUMERIC               BuiltinFunction = 118 // *Available in versions >= 1.7*
	BuiltinFunction_NUMERIC_TO_INT64               BuiltinFunction = 119 // *Available in versions >= 1.7*
	BuiltinFunction_IMPLODE_TEXT                   BuiltinFunction = 78
	BuiltinFunction_EQUAL_INT64                    BuiltinFunction = 79  // *Available in versions < 1.dev*
	BuiltinFunction_EQUAL_DECIMAL                  BuiltinFunction = 80  // *Available in versions < 1.7*
	BuiltinFunction_EQUAL_NUMERIC                  BuiltinFunction = 120 // *Available in versions >= 1.7 and < 1.dev*
	BuiltinFunction_EQUAL_TEXT                     BuiltinFunction = 81  // *Available in versions < 1.dev*
	BuiltinFunction_EQUAL_TIMESTAMP                BuiltinFunction = 82  // *Available in versions < 1.dev*
	BuiltinFunction_EQUAL_DATE                     BuiltinFunction = 83  // *Available in versions < 1.dev*
	BuiltinFunction_EQUAL_PARTY                    BuiltinFunction = 84  // *Available in versions < 1.dev*
	BuiltinFunction_EQUAL_BOOL                     BuiltinFunction = 85  // *Available in versions < 1.dev*
	BuiltinFunction_EQUAL_CONTRACT_ID              BuiltinFunction = 86  // *Available in versions < 1.dev*
	BuiltinFunction_EQUAL_LIST                     BuiltinFunction = 87
	BuiltinFunction_EQUAL_TYPE_REP                 BuiltinFunction = 123 // *Available in versions = 1.8*
	BuiltinFunction_EQUAL                          BuiltinFunction = 131 // *Available in versions >= 1.dev*
	BuiltinFunction_LESS_EQ                        BuiltinFunction = 132 // *Available in versions >= 1.dev*
	BuiltinFunction_LESS                           BuiltinFunction = 133 // *Available in versions >= 1.dev*
	BuiltinFunction_GREATER_EQ                     BuiltinFunction = 134 // *Available in versions >= 1.dev*
	BuiltinFunction_GREATER                        BuiltinFunction = 135 // *Available in versions >= 1.dev*
	BuiltinFunction_TRACE                          BuiltinFunction = 88
	BuiltinFunction_COERCE_CONTRACT_ID             BuiltinFunction = 102
	BuiltinFunction_TEXT_FROM_CODE_POINTS          BuiltinFunction = 105 // *Available in versions >= 1.6*
	BuiltinFunction_TEXT_TO_CODE_POINTS            BuiltinFunction = 106 // *Available in versions >= 1.6*
	// EXPERIMENTAL TEXT PRIMITIVES -- these do not yet have stable numbers.
	BuiltinFunction_TEXT_TO_UPPER      BuiltinFunction = 9901 // *Available in versions >= 1.dev*
	BuiltinFunction_TEXT_TO_LOWER      BuiltinFunction = 9902 // *Available in versions >= 1.dev*
	BuiltinFunction_TEXT_SLICE         BuiltinFunction = 9903 // *Available in versions >= 1.dev*
	BuiltinFunction_TEXT_SLICE_INDEX   BuiltinFunction = 9904 // *Available in versions >= 1.dev*
	BuiltinFunction_TEXT_CONTAINS_ONLY BuiltinFunction = 9905 // *Available in versions >= 1.dev*
	BuiltinFunction_TEXT_REPLICATE     BuiltinFunction = 9906 // *Available in versions >= 1.dev*
	BuiltinFunction_TEXT_SPLIT_ON      BuiltinFunction = 9907 // *Available in versions >= 1.dev*
	BuiltinFunction_TEXT_INTERCALATE   BuiltinFunction = 9908 // *Available in versions >= 1.dev*
)

// Enum value maps for BuiltinFunction.
var (
	BuiltinFunction_name = map[int32]string{
		0:    "ADD_DECIMAL",
		1:    "SUB_DECIMAL",
		2:    "MUL_DECIMAL",
		3:    "DIV_DECIMAL",
		6:    "ROUND_DECIMAL",
		107:  "ADD_NUMERIC",
		108:  "SUB_NUMERIC",
		109:  "MUL_NUMERIC",
		110:  "DIV_NUMERIC",
		111:  "ROUND_NUMERIC",
		121:  "CAST_NUMERIC",
		122:  "SHIFT_NUMERIC",
		7:    "ADD_INT64",
		8:    "SUB_INT64",
		9:    "MUL_INT64",
		10:   "DIV_INT64",
		11:   "MOD_INT64",
		12:   "EXP_INT64",
		20:   "FOLDL",
		21:   "FOLDR",
		96:   "TEXTMAP_EMPTY",
		97:   "TEXTMAP_INSERT",
		98:   "TEXTMAP_LOOKUP",
		99:   "TEXTMAP_DELETE",
		100:  "TEXTMAP_TO_LIST",
		101:  "TEXTMAP_SIZE",
		124:  "GENMAP_EMPTY",
		125:  "GENMAP_INSERT",
		126:  "GENMAP_LOOKUP",
		127:  "GENMAP_DELETE",
		128:  "GENMAP_KEYS",
		129:  "GENMAP_VALUES",
		130:  "GENMAP_SIZE",
		23:   "EXPLODE_TEXT",
		24:   "APPEND_TEXT",
		25:   "ERROR",
		33:   "LEQ_INT64",
		34:   "LEQ_DECIMAL",
		112:  "LEQ_NUMERIC",
		36:   "LEQ_TEXT",
		37:   "LEQ_TIMESTAMP",
		67:   "LEQ_DATE",
		89:   "LEQ_PARTY",
		39:   "LESS_INT64",
		40:   "LESS_DECIMAL",
		113:  "LESS_NUMERIC",
		42:   "LESS_TEXT",
		43:   "LESS_TIMESTAMP",
		68:   "LESS_DATE",
		90:   "LESS_PARTY",
		45:   "GEQ_INT64",
		46:   "GEQ_DECIMAL",
		114:  "GEQ_NUMERIC",
		48:   "GEQ_TEXT",
		49:   "GEQ_TIMESTAMP",
		69:   "GEQ_DATE",
		91:   "GEQ_PARTY",
		51:   "GREATER_INT64",
		52:   "GREATER_DECIMAL",
		115:  "GREATER_NUMERIC",
		54:   "GREATER_TEXT",
		55:   "GREATER_TIMESTAMP",
		70:   "GREATER_DATE",
		92:   "GREATER_PARTY",
		57:   "TO_TEXT_INT64",
		58:   "TO_TEXT_DECIMAL",
		116:  "TO_TEXT_NUMERIC",
		60:   "TO_TEXT_TEXT",
		61:   "TO_TEXT_TIMESTAMP",
		71:   "TO_TEXT_DATE",
		63:   "TO_QUOTED_TEXT_PARTY",
		94:   "TO_TEXT_PARTY",
		95:   "FROM_TEXT_PARTY",
		103:  "FROM_TEXT_INT64",
		104:  "FROM_TEXT_DECIMAL",
		117:  "FROM_TEXT_NUMERIC",
		93:   "SHA256_TEXT",
		72:   "DATE_TO_UNIX_DAYS",
		73:   "UNIX_DAYS_TO_DATE",
		74:   "TIMESTAMP_TO_UNIX_MICROSECONDS",
		75:   "UNIX_MICROSECONDS_TO_TIMESTAMP",
		76:   "INT64_TO_DECIMAL",
		77:   "DECIMAL_TO_INT64",
		118:  "INT64_TO_NUMERIC",
		119:  "NUMERIC_TO_INT64",
		78:   "IMPLODE_TEXT",
		79:   "EQUAL_INT64",
		80:   "EQUAL_DECIMAL",
		120:  "EQUAL_NUMERIC",
		81:   "EQUAL_TEXT",
		82:   "EQUAL_TIMESTAMP",
		83:   "EQUAL_DATE",
		84:   "EQUAL_PARTY",
		85:   "EQUAL_BOOL",
		86:   "EQUAL_CONTRACT_ID",
		87:   "EQUAL_LIST",
		123:  "EQUAL_TYPE_REP",
		131:  "EQUAL",
		132:  "LESS_EQ",
		133:  "LESS",
		134:  "GREATER_EQ",
		135:  "GREATER",
		88:   "TRACE",
		102:  "COERCE_CONTRACT_ID",
		105:  "TEXT_FROM_CODE_POINTS",
		106:  "TEXT_TO_CODE_POINTS",
		9901: "TEXT_TO_UPPER",
		9902: "TEXT_TO_LOWER",
		9903: "TEXT_SLICE",
		9904: "TEXT_SLICE_INDEX",
		9905: "TEXT_CONTAINS_ONLY",
		9906: "TEXT_REPLICATE",
		9907: "TEXT_SPLIT_ON",
		9908: "TEXT_INTERCALATE",
	}
	BuiltinFunction_value = map[string]int32{
		"ADD_DECIMAL":                    0,
		"SUB_DECIMAL":                    1,
		"MUL_DECIMAL":                    2,
		"DIV_DECIMAL":                    3,
		"ROUND_DECIMAL":                  6,
		"ADD_NUMERIC":                    107,
		"SUB_NUMERIC":                    108,
		"MUL_NUMERIC":                    109,
		"DIV_NUMERIC":                    110,
		"ROUND_NUMERIC":                  111,
		"CAST_NUMERIC":                   121,
		"SHIFT_NUMERIC":                  122,
		"ADD_INT64":                      7,
		"SUB_INT64":                      8,
		"MUL_INT64":                      9,
		"DIV_INT64":                      10,
		"MOD_INT64":                      11,
		"EXP_INT64":                      12,
		"FOLDL":                          20,
		"FOLDR":                          21,
		"TEXTMAP_EMPTY":                  96,
		"TEXTMAP_INSERT":                 97,
		"TEXTMAP_LOOKUP":                 98,
		"TEXTMAP_DELETE":                 99,
		"TEXTMAP_TO_LIST":                100,
		"TEXTMAP_SIZE":                   101,
		"GENMAP_EMPTY":                   124,
		"GENMAP_INSERT":                  125,
		"GENMAP_LOOKUP":                  126,
		"GENMAP_DELETE":                  127,
		"GENMAP_KEYS":                    128,
		"GENMAP_VALUES":                  129,
		"GENMAP_SIZE":                    130,
		"EXPLODE_TEXT":                   23,
		"APPEND_TEXT":                    24,
		"ERROR":                          25,
		"LEQ_INT64":                      33,
		"LEQ_DECIMAL":                    34,
		"LEQ_NUMERIC":                    112,
		"LEQ_TEXT":                       36,
		"LEQ_TIMESTAMP":                  37,
		"LEQ_DATE":                       67,
		"LEQ_PARTY":                      89,
		"LESS_INT64":                     39,
		"LESS_DECIMAL":                   40,
		"LESS_NUMERIC":                   113,
		"LESS_TEXT":                      42,
		"LESS_TIMESTAMP":                 43,
		"LESS_DATE":                      68,
		"LESS_PARTY":                     90,
		"GEQ_INT64":                      45,
		"GEQ_DECIMAL":                    46,
		"GEQ_NUMERIC":                    114,
		"GEQ_TEXT":                       48,
		"GEQ_TIMESTAMP":                  49,
		"GEQ_DATE":                       69,
		"GEQ_PARTY":                      91,
		"GREATER_INT64":                  51,
		"GREATER_DECIMAL":                52,
		"GREATER_NUMERIC":                115,
		"GREATER_TEXT":                   54,
		"GREATER_TIMESTAMP":              55,
		"GREATER_DATE":                   70,
		"GREATER_PARTY":                  92,
		"TO_TEXT_INT64":                  57,
		"TO_TEXT_DECIMAL":                58,
		"TO_TEXT_NUMERIC":                116,
		"TO_TEXT_TEXT":                   60,
		"TO_TEXT_TIMESTAMP":              61,
		"TO_TEXT_DATE":                   71,
		"TO_QUOTED_TEXT_PARTY":           63,
		"TO_TEXT_PARTY":                  94,
		"FROM_TEXT_PARTY":                95,
		"FROM_TEXT_INT64":                103,
		"FROM_TEXT_DECIMAL":              104,
		"FROM_TEXT_NUMERIC":              117,
		"SHA256_TEXT":                    93,
		"DATE_TO_UNIX_DAYS":              72,
		"UNIX_DAYS_TO_DATE":              73,
		"TIMESTAMP_TO_UNIX_MICROSECONDS": 74,
		"UNIX_MICROSECONDS_TO_TIMESTAMP": 75,
		"INT64_TO_DECIMAL":               76,
		"DECIMAL_TO_INT64":               77,
		"INT64_TO_NUMERIC":               118,
		"NUMERIC_TO_INT64":               119,
		"IMPLODE_TEXT":                   78,
		"EQUAL_INT64":                    79,
		"EQUAL_DECIMAL":                  80,
		"EQUAL_NUMERIC":                  120,
		"EQUAL_TEXT":                     81,
		"EQUAL_TIMESTAMP":                82,
		"EQUAL_DATE":                     83,
		"EQUAL_PARTY":                    84,
		"EQUAL_BOOL":                     85,
		"EQUAL_CONTRACT_ID":              86,
		"EQUAL_LIST":                     87,
		"EQUAL_TYPE_REP":                 123,
		"EQUAL":                          131,
		"LESS_EQ":                        132,
		"LESS":                           133,
		"GREATER_EQ":                     134,
		"GREATER":                        135,
		"TRACE":                          88,
		"COERCE_CONTRACT_ID":             102,
		"TEXT_FROM_CODE_POINTS":          105,
		"TEXT_TO_CODE_POINTS":            106,
		"TEXT_TO_UPPER":                  9901,
		"TEXT_TO_LOWER":                  9902,
		"TEXT_SLICE":                     9903,
		"TEXT_SLICE_INDEX":               9904,
		"TEXT_CONTAINS_ONLY":             9905,
		"TEXT_REPLICATE":                 9906,
		"TEXT_SPLIT_ON":                  9907,
		"TEXT_INTERCALATE":               9908,
	}
)

func (x BuiltinFunction) Enum() *BuiltinFunction {
	p := new(BuiltinFunction)
	*p = x
	return p
}

func (x BuiltinFunction) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BuiltinFunction) Descriptor() protoreflect.EnumDescriptor {
	return file_com_daml_daml_lf_dev_daml_lf_1_proto_enumTypes[2].Descriptor()
}

func (BuiltinFunction) Type() protoreflect.EnumType {
	return &file_com_daml_daml_lf_dev_daml_lf_1_proto_enumTypes[2]
}

func (x BuiltinFunction) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BuiltinFunction.Descriptor instead.
func (BuiltinFunction) EnumDescriptor() ([]byte, []int) {
	return file_com_daml_daml_lf_dev_daml_lf_1_proto_rawDescGZIP(), []int{2}
}

// Canonical encoding in one-ofs for cases that carry no meaningful
// values.
type Unit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Unit) Reset() {
	*x = Unit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_daml_daml_lf_dev_daml_lf_1_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Unit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Unit) ProtoMessage() {}

func (x *Unit) ProtoReflect() protoreflect.Message {
	mi := &file_com_daml_daml_lf_dev_daml_lf_1_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Unit.ProtoReflect.Descriptor instead.
func (*Unit) Descriptor() ([]byte, []int) {
	return file_com_daml_daml_lf_dev_daml_lf_1_proto_rawDescGZIP(), []int{0}
}

// Package reference
type PackageRef struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Sum:
	//	*PackageRef_Self
	//	*PackageRef_PackageIdStr
	//	*PackageRef_PackageIdInternedStr
	Sum isPackageRef_Sum `protobuf_oneof:"Sum"`
}

func (x *PackageRef) Reset() {
	*x = PackageRef{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_daml_daml_lf_dev_daml_lf_1_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PackageRef) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PackageRef) ProtoMessage() {}

func (x *PackageRef) ProtoReflect() protoreflect.Message {
	mi := &file_com_daml_daml_lf_dev_daml_lf_1_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PackageRef.ProtoReflect.Descriptor instead.
func (*PackageRef) Descriptor() ([]byte, []int) {
	return file_com_daml_daml_lf_dev_daml_lf_1_proto_rawDescGZIP(), []int{1}
}

func (m *PackageRef) GetSum() isPackageRef_Sum {
	if m != nil {
		return m.Sum
	}
	return nil
}

func (x *PackageRef) GetSelf() *Unit {
	if x, ok := x.GetSum().(*PackageRef_Self); ok {
		return x.Self
	}
	return nil
}

func (x *PackageRef) GetPackageIdStr() string {
	if x, ok := x.GetSum().(*PackageRef_PackageIdStr); ok {
		return x.PackageIdStr
	}
	return ""
}

func (x *PackageRef) GetPackageIdInternedStr() int32 {
	if x, ok := x.GetSum().(*PackageRef_PackageIdInternedStr); ok {
		return x.PackageIdInternedStr
	}
	return 0
}

type isPackageRef_Sum interface {
	isPackageRef_Sum()
}

type PackageRef_Self struct {
	// Reference to the package of which the package this reference
	// belongs.
	Self *Unit `protobuf:"bytes,1,opt,name=self,proto3,oneof"`
}

type PackageRef_PackageIdStr struct {
	// A `Package identifier` for an imported Package.
	// *Must be a list of valid packageId string*
	PackageIdStr string `protobuf:"bytes,2,opt,name=package_id_str,json=packageIdStr,proto3,oneof"` // *Available in versions < 1.7*
}

type PackageRef_PackageIdInternedStr struct {
	// An index into `interned_package_ids` of the Package containing
	// this reference.
	// *Must be a valid interned package Id string*
	PackageIdInternedStr int32 `protobuf:"varint,3,opt,name=package_id_interned_str,json=packageIdInternedStr,proto3,oneof"` // *Available in versions >= 1.6*
}

func (*PackageRef_Self) isPackageRef_Sum() {}

func (*PackageRef_PackageIdStr) isPackageRef_Sum() {}

func (*PackageRef_PackageIdInternedStr) isPackageRef_Sum() {}

// A `name`, e.g. Util.Either.isLeft
// *Available in version < 1.7*
type DottedName struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// *Must be a non-empty list of a valid identifiers*
	Segments []string `protobuf:"bytes,1,rep,name=segments,proto3" json:"segments,omitempty"`
}

func (x *DottedName) Reset() {
	*x = DottedName{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_daml_daml_lf_dev_daml_lf_1_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DottedName) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DottedName) ProtoMessage() {}

func (x *DottedName) ProtoReflect() protoreflect.Message {
	mi := &file_com_daml_daml_lf_dev_daml_lf_1_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DottedName.ProtoReflect.Descriptor instead.
func (*DottedName) Descriptor() ([]byte, []int) {
	return file_com_daml_daml_lf_dev_daml_lf_1_proto_rawDescGZIP(), []int{2}
}

func (x *DottedName) GetSegments() []string {
	if x != nil {
		return x.Segments
	}
	return nil
}

// A fully qualified module reference
type ModuleRef struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// package where the module is defined.
	PackageRef *PackageRef `protobuf:"bytes,1,opt,name=package_ref,json=packageRef,proto3" json:"package_ref,omitempty"`
	// Types that are assignable to ModuleName:
	//	*ModuleRef_ModuleNameDname
	//	*ModuleRef_ModuleNameInternedDname
	ModuleName isModuleRef_ModuleName `protobuf_oneof:"module_name"`
}

func (x *ModuleRef) Reset() {
	*x = ModuleRef{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_daml_daml_lf_dev_daml_lf_1_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ModuleRef) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ModuleRef) ProtoMessage() {}

func (x *ModuleRef) ProtoReflect() protoreflect.Message {
	mi := &file_com_daml_daml_lf_dev_daml_lf_1_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ModuleRef.ProtoReflect.Descriptor instead.
func (*ModuleRef) Descriptor() ([]byte, []int) {
	return file_com_daml_daml_lf_dev_daml_lf_1_proto_rawDescGZIP(), []int{3}
}

func (x *ModuleRef) GetPackageRef() *PackageRef {
	if x != nil {
		return x.PackageRef
	}
	return nil
}

func (m *ModuleRef) GetModuleName() isModuleRef_ModuleName {
	if m != nil {
		return m.ModuleName
	}
	return nil
}

func (x *ModuleRef) GetModuleNameDname() *DottedName {
	if x, ok := x.GetModuleName().(*ModuleRef_ModuleNameDname); ok {
		return x.ModuleNameDname
	}
	return nil
}

func (x *ModuleRef) GetModuleNameInternedDname() int32 {
	if x, ok := x.GetModuleName().(*ModuleRef_ModuleNameInternedDname); ok {
		return x.ModuleNameInternedDname
	}
	return 0
}

type isModuleRef_ModuleName interface {
	isModuleRef_ModuleName()
}

type ModuleRef_ModuleNameDname struct {
	// module name
	ModuleNameDname *DottedName `protobuf:"bytes,2,opt,name=module_name_dname,json=moduleNameDname,proto3,oneof"` // *Available in version < 1.7*
}

type ModuleRef_ModuleNameInternedDname struct {
	ModuleNameInternedDname int32 `protobuf:"varint,3,opt,name=module_name_interned_dname,json=moduleNameInternedDname,proto3,oneof"` // *Available in version >= 1.7*
}

func (*ModuleRef_ModuleNameDname) isModuleRef_ModuleName() {}

func (*ModuleRef_ModuleNameInternedDname) isModuleRef_ModuleName() {}

// A fully qualified reference to a type constructor name.
type TypeConName struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Module where the type is defined.
	Module *ModuleRef `protobuf:"bytes,1,opt,name=module,proto3" json:"module,omitempty"`
	// Types that are assignable to Name:
	//	*TypeConName_NameDname
	//	*TypeConName_NameInternedDname
	Name isTypeConName_Name `protobuf_oneof:"name"`
}

func (x *TypeConName) Reset() {
	*x = TypeConName{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_daml_daml_lf_dev_daml_lf_1_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TypeConName) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TypeConName) ProtoMessage() {}

func (x *TypeConName) ProtoReflect() protoreflect.Message {
	mi := &file_com_daml_daml_lf_dev_daml_lf_1_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TypeConName.ProtoReflect.Descriptor instead.
func (*TypeConName) Descriptor() ([]byte, []int) {
	return file_com_daml_daml_lf_dev_daml_lf_1_proto_rawDescGZIP(), []int{4}
}

func (x *TypeConName) GetModule() *ModuleRef {
	if x != nil {
		return x.Module
	}
	return nil
}

func (m *TypeConName) GetName() isTypeConName_Name {
	if m != nil {
		return m.Name
	}
	return nil
}

func (x *TypeConName) GetNameDname() *DottedName {
	if x, ok := x.GetName().(*TypeConName_NameDname); ok {
		return x.NameDname
	}
	return nil
}

func (x *TypeConName) GetNameInternedDname() int32 {
	if x, ok := x.GetName().(*TypeConName_NameInternedDname); ok {
		return x.NameInternedDname
	}
	return 0
}

type isTypeConName_Name interface {
	isTypeConName_Name()
}

type TypeConName_NameDname struct {
	// type constructor name.
	NameDname *DottedName `protobuf:"bytes,2,opt,name=name_dname,json=nameDname,proto3,oneof"`
}

type TypeConName_NameInternedDname struct {
	// *Must be a valid interned name*
	NameInternedDname int32 `protobuf:"varint,3,opt,name=name_interned_dname,json=nameInternedDname,proto3,oneof"` // *Available in versions >= 1.7*
}

func (*TypeConName_NameDname) isTypeConName_Name() {}

func (*TypeConName_NameInternedDname) isTypeConName_Name() {}

// A fully qualified reference to a type synonym name.
// *Available in versions >= 1.8*
type TypeSynName struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Module where the type is defined.
	Module *ModuleRef `protobuf:"bytes,1,opt,name=module,proto3" json:"module,omitempty"`
	// Types that are assignable to Name:
	//	*TypeSynName_NameDname
	//	*TypeSynName_NameInternedDname
	Name isTypeSynName_Name `protobuf_oneof:"name"`
}

func (x *TypeSynName) Reset() {
	*x = TypeSynName{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_daml_daml_lf_dev_daml_lf_1_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TypeSynName) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TypeSynName) ProtoMessage() {}

func (x *TypeSynName) ProtoReflect() protoreflect.Message {
	mi := &file_com_daml_daml_lf_dev_daml_lf_1_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TypeSynName.ProtoReflect.Descriptor instead.
func (*TypeSynName) Descriptor() ([]byte, []int) {
	return file_com_daml_daml_lf_dev_daml_lf_1_proto_rawDescGZIP(), []int{5}
}

func (x *TypeSynName) GetModule() *ModuleRef {
	if x != nil {
		return x.Module
	}
	return nil
}

func (m *TypeSynName) GetName() isTypeSynName_Name {
	if m != nil {
		return m.Name
	}
	return nil
}

func (x *TypeSynName) GetNameDname() *DottedName {
	if x, ok := x.GetName().(*TypeSynName_NameDname); ok {
		return x.NameDname
	}
	return nil
}

func (x *TypeSynName) GetNameInternedDname() int32 {
	if x, ok := x.GetName().(*TypeSynName_NameInternedDname); ok {
		return x.NameInternedDname
	}
	return 0
}

type isTypeSynName_Name interface {
	isTypeSynName_Name()
}

type TypeSynName_NameDname struct {
	// type synonym name.
	NameDname *DottedName `protobuf:"bytes,2,opt,name=name_dname,json=nameDname,proto3,oneof"`
}

type TypeSynName_NameInternedDname struct {
	// *Must be a valid interned name*
	NameInternedDname int32 `protobuf:"varint,3,opt,name=name_interned_dname,json=nameInternedDname,proto3,oneof"`
}

func (*TypeSynName_NameDname) isTypeSynName_Name() {}

func (*TypeSynName_NameInternedDname) isTypeSynName_Name() {}

// A fully qualified reference to a value definition.
type ValName struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Module where the value is defined
	Module *ModuleRef `protobuf:"bytes,1,opt,name=module,proto3" json:"module,omitempty"`
	// *Must be a non-empty list of valid identifier*
	NameDname []string `protobuf:"bytes,2,rep,name=name_dname,json=nameDname,proto3" json:"name_dname,omitempty"` // *Available in version < 1.7*
	// *Must be a valid interned name*
	NameInternedDname int32 `protobuf:"varint,3,opt,name=name_interned_dname,json=nameInternedDname,proto3" json:"name_interned_dname,omitempty"` // *Available in versions >= 1.7*
}

func (x *ValName) Reset() {
	*x = ValName{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_daml_daml_lf_dev_daml_lf_1_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ValName) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ValName) ProtoMessage() {}

func (x *ValName) ProtoReflect() protoreflect.Message {
	mi := &file_com_daml_daml_lf_dev_daml_lf_1_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ValName.ProtoReflect.Descriptor instead.
func (*ValName) Descriptor() ([]byte, []int) {
	return file_com_daml_daml_lf_dev_daml_lf_1_proto_rawDescGZIP(), []int{6}
}

func (x *ValName) GetModule() *ModuleRef {
	if x != nil {
		return x.Module
	}
	return nil
}

func (x *ValName) GetNameDname() []string {
	if x != nil {
		return x.NameDname
	}
	return nil
}

func (x *ValName) GetNameInternedDname() int32 {
	if x != nil {
		return x.NameInternedDname
	}
	return 0
}

// A field name definition in a record or a variant associated with a type.
type FieldWithType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Field:
	//	*FieldWithType_FieldStr
	//	*FieldWithType_FieldInternedStr
	Field isFieldWithType_Field `protobuf_oneof:"field"`
	// Type associated
	Type *Type `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
}

func (x *FieldWithType) Reset() {
	*x = FieldWithType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_daml_daml_lf_dev_daml_lf_1_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FieldWithType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FieldWithType) ProtoMessage() {}

func (x *FieldWithType) ProtoReflect() protoreflect.Message {
	mi := &file_com_daml_daml_lf_dev_daml_lf_1_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FieldWithType.ProtoReflect.Descriptor instead.
func (*FieldWithType) Descriptor() ([]byte, []int) {
	return file_com_daml_daml_lf_dev_daml_lf_1_proto_rawDescGZIP(), []int{7}
}

func (m *FieldWithType) GetField() isFieldWithType_Field {
	if m != nil {
		return m.Field
	}
	return nil
}

func (x *FieldWithType) GetFieldStr() string {
	if x, ok := x.GetField().(*FieldWithType_FieldStr); ok {
		return x.FieldStr
	}
	return ""
}

func (x *FieldWithType) GetFieldInternedStr() int32 {
	if x, ok := x.GetField().(*FieldWithType_FieldInternedStr); ok {
		return x.FieldInternedStr
	}
	return 0
}

func (x *FieldWithType) GetType() *Type {
	if x != nil {
		return x.Type
	}
	return nil
}

type isFieldWithType_Field interface {
	isFieldWithType_Field()
}

type FieldWithType_FieldStr struct {
	// *Must be a valid identifier*
	FieldStr string `protobuf:"bytes,1,opt,name=field_str,json=fieldStr,proto3,oneof"` // *Available in version < 1.7*
}

type FieldWithType_FieldInternedStr struct {
	// *Must a valid interned identifier*
	FieldInternedStr int32 `protobuf:"varint,3,opt,name=field_interned_str,json=fieldInternedStr,proto3,oneof"` // *Available in versions >= 1.7*
}

func (*FieldWithType_FieldStr) isFieldWithType_Field() {}

func (*FieldWithType_FieldInternedStr) isFieldWithType_Field() {}

// Binder associated with a type.
type VarWithType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of the bound expression variable.
	//
	// Types that are assignable to Var:
	//	*VarWithType_VarStr
	//	*VarWithType_VarInternedStr
	Var isVarWithType_Var `protobuf_oneof:"var"`
	// Type of the bound variable
	Type *Type `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
}

func (x *VarWithType) Reset() {
	*x = VarWithType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_daml_daml_lf_dev_daml_lf_1_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VarWithType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VarWithType) ProtoMessage() {}

func (x *VarWithType) ProtoReflect() protoreflect.Message {
	mi := &file_com_daml_daml_lf_dev_daml_lf_1_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VarWithType.ProtoReflect.Descriptor instead.
func (*VarWithType) Descriptor() ([]byte, []int) {
	return file_com_daml_daml_lf_dev_daml_lf_1_proto_rawDescGZIP(), []int{8}
}

func (m *VarWithType) GetVar() isVarWithType_Var {
	if m != nil {
		return m.Var
	}
	return nil
}

func (x *VarWithType) GetVarStr() string {
	if x, ok := x.GetVar().(*VarWithType_VarStr); ok {
		return x.VarStr
	}
	return ""
}

func (x *VarWithType) GetVarInternedStr() int32 {
	if x, ok := x.GetVar().(*VarWithType_VarInternedStr); ok {
		return x.VarInternedStr
	}
	return 0
}

func (x *VarWithType) GetType() *Type {
	if x != nil {
		return x.Type
	}
	return nil
}

type isVarWithType_Var interface {
	isVarWithType_Var()
}

type VarWithType_VarStr struct {
	// *Must be a valid identifier*
	VarStr string `protobuf:"bytes,1,opt,name=var_str,json=varStr,proto3,oneof"` // *Available in version < 1.7*
}

type VarWithType_VarInternedStr struct {
	// *Must be a valid interned identifier*
	VarInternedStr int32 `protobuf:"varint,3,opt,name=var_interned_str,json=varInternedStr,proto3,oneof"` // *Available in versions >= 1.7*
}

func (*VarWithType_VarStr) isVarWithType_Var() {}

func (*VarWithType_VarInternedStr) isVarWithType_Var() {}

// Type binder associated with a kind.
type TypeVarWithKind struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of the bound expression variable
	//
	// Types that are assignable to Var:
	//	*TypeVarWithKind_VarStr
	//	*TypeVarWithKind_VarInternedStr
	Var isTypeVarWithKind_Var `protobuf_oneof:"var"`
	// Kind of the bound variable
	Kind *Kind `protobuf:"bytes,2,opt,name=kind,proto3" json:"kind,omitempty"`
}

func (x *TypeVarWithKind) Reset() {
	*x = TypeVarWithKind{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_daml_daml_lf_dev_daml_lf_1_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TypeVarWithKind) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TypeVarWithKind) ProtoMessage() {}

func (x *TypeVarWithKind) ProtoReflect() protoreflect.Message {
	mi := &file_com_daml_daml_lf_dev_daml_lf_1_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TypeVarWithKind.ProtoReflect.Descriptor instead.
func (*TypeVarWithKind) Descriptor() ([]byte, []int) {
	return file_com_daml_daml_lf_dev_daml_lf_1_proto_rawDescGZIP(), []int{9}
}

func (m *TypeVarWithKind) GetVar() isTypeVarWithKind_Var {
	if m != nil {
		return m.Var
	}
	return nil
}

func (x *TypeVarWithKind) GetVarStr() string {
	if x, ok := x.GetVar().(*TypeVarWithKind_VarStr); ok {
		return x.VarStr
	}
	return ""
}

func (x *TypeVarWithKind) GetVarInternedStr() int32 {
	if x, ok := x.GetVar().(*TypeVarWithKind_VarInternedStr); ok {
		return x.VarInternedStr
	}
	return 0
}

func (x *TypeVarWithKind) GetKind() *Kind {
	if x != nil {
		return x.Kind
	}
	return nil
}

type isTypeVarWithKind_Var interface {
	isTypeVarWithKind_Var()
}

type TypeVarWithKind_VarStr struct {
	// *Must be a valid identifier*
	VarStr string `protobuf:"bytes,1,opt,name=var_str,json=varStr,proto3,oneof"` // *Available in version < 1.7*
}

type TypeVarWithKind_VarInternedStr struct {
	// *Must be a valid interned identifier*
	VarInternedStr int32 `protobuf:"varint,3,opt,name=var_interned_str,json=varInternedStr,proto3,oneof"` // *Available in versions >= 1.7*
}

func (*TypeVarWithKind_VarStr) isTypeVarWithKind_Var() {}

func (*TypeVarWithKind_VarInternedStr) isTypeVarWithKind_Var() {}

// A field in a record with its value.
type FieldWithExpr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Field:
	//	*FieldWithExpr_FieldStr
	//	*FieldWithExpr_FieldInternedStr
	Field isFieldWithExpr_Field `protobuf_oneof:"field"`
	// Value of the field
	Expr *Expr `protobuf:"bytes,2,opt,name=expr,proto3" json:"expr,omitempty"`
}

func (x *FieldWithExpr) Reset() {
	*x = FieldWithExpr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_daml_daml_lf_dev_daml_lf_1_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FieldWithExpr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FieldWithExpr) ProtoMessage() {}

func (x *FieldWithExpr) ProtoReflect() protoreflect.Message {
	mi := &file_com_daml_daml_lf_dev_daml_lf_1_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FieldWithExpr.ProtoReflect.Descriptor instead.
func (*FieldWithExpr) Descriptor() ([]byte, []int) {
	return file_com_daml_daml_lf_dev_daml_lf_1_proto_rawDescGZIP(), []int{10}
}

func (m *FieldWithExpr) GetField() isFieldWithExpr_Field {
	if m != nil {
		return m.Field
	}
	return nil
}

func (x *FieldWithExpr) GetFieldStr() string {
	if x, ok := x.GetField().(*FieldWithExpr_FieldStr); ok {
		return x.FieldStr
	}
	return ""
}

func (x *FieldWithExpr) GetFieldInternedStr() int32 {
	if x, ok := x.GetField().(*FieldWithExpr_FieldInternedStr); ok {
		return x.FieldInternedStr
	}
	return 0
}

func (x *FieldWithExpr) GetExpr() *Expr {
	if x != nil {
		return x.Expr
	}
	return nil
}

type isFieldWithExpr_Field interface {
	isFieldWithExpr_Field()
}

type FieldWithExpr_FieldStr struct {
	// *Must be a valid identifier*
	FieldStr string `protobuf:"bytes,1,opt,name=field_str,json=fieldStr,proto3,oneof"` // *Available in version < 1.7*
}

type FieldWithExpr_FieldInternedStr struct {
	// *Must be a valid interned identifier*
	FieldInternedStr int32 `protobuf:"varint,3,opt,name=field_interned_str,json=fieldInternedStr,proto3,oneof"` // *Available in versions >= 1.7*
}

func (*FieldWithExpr_FieldStr) isFieldWithExpr_Field() {}

func (*FieldWithExpr_FieldInternedStr) isFieldWithExpr_Field() {}

// A binding of a typed binder to an expression
type Binding struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The binder (expression variable and type)
	Binder *VarWithType `protobuf:"bytes,1,opt,name=binder,proto3" json:"binder,omitempty"`
	// The value to which the variable is bound.
	Bound *Expr `protobuf:"bytes,2,opt,name=bound,proto3" json:"bound,omitempty"`
}

func (x *Binding) Reset() {
	*x = Binding{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_daml_daml_lf_dev_daml_lf_1_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Binding) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Binding) ProtoMessage() {}

func (x *Binding) ProtoReflect() protoreflect.Message {
	mi := &file_com_daml_daml_lf_dev_daml_lf_1_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Binding.ProtoReflect.Descriptor instead.
func (*Binding) Descriptor() ([]byte, []int) {
	return file_com_daml_daml_lf_dev_daml_lf_1_proto_rawDescGZIP(), []int{11}
}

func (x *Binding) GetBinder() *VarWithType {
	if x != nil {
		return x.Binder
	}
	return nil
}

func (x *Binding) GetBound() *Expr {
	if x != nil {
		return x.Bound
	}
	return nil
}

// Kinds
type Kind struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Sum:
	//	*Kind_Star
	//	*Kind_Arrow_
	//	*Kind_Nat
	Sum isKind_Sum `protobuf_oneof:"Sum"`
}

func (x *Kind) Reset() {
	*x = Kind{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_daml_daml_lf_dev_daml_lf_1_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Kind) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Kind) ProtoMessage() {}

func (x *Kind) ProtoReflect() protoreflect.Message {
	mi := &file_com_daml_daml_lf_dev_daml_lf_1_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Kind.ProtoReflect.Descriptor instead.
func (*Kind) Descriptor() ([]byte, []int) {
	return file_com_daml_daml_lf_dev_daml_lf_1_proto_rawDescGZIP(), []int{12}
}

func (m *Kind) GetSum() isKind_Sum {
	if m != nil {
		return m.Sum
	}
	return nil
}

func (x *Kind) GetStar() *Unit {
	if x, ok := x.GetSum().(*Kind_Star); ok {
		return x.Star
	}
	return nil
}

func (x *Kind) GetArrow() *Kind_Arrow {
	if x, ok := x.GetSum().(*Kind_Arrow_); ok {
		return x.Arrow
	}
	return nil
}

func (x *Kind) GetNat() *Unit {
	if x, ok := x.GetSum().(*Kind_Nat); ok {
		return x.Nat
	}
	return nil
}

type isKind_Sum interface {
	isKind_Sum()
}

type Kind_Star struct {
	// Kind of monomorphic type.
	Star *Unit `protobuf:"bytes,1,opt,name=star,proto3,oneof"`
}

type Kind_Arrow_ struct {
	// Kind of polymorphic type.
	Arrow *Kind_Arrow `protobuf:"bytes,2,opt,name=arrow,proto3,oneof"`
}

type Kind_Nat struct {
	// kind of TNat type;
	// *Available in versions >= 1.7*
	Nat *Unit `protobuf:"bytes,3,opt,name=nat,proto3,oneof"`
}

func (*Kind_Star) isKind_Sum() {}

func (*Kind_Arrow_) isKind_Sum() {}

func (*Kind_Nat) isKind_Sum() {}

// Types
type Type struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Sum:
	//	*Type_Var_
	//	*Type_Con_
	//	*Type_Prim_
	//	*Type_Fun_
	//	*Type_Forall_
	//	*Type_Struct_
	//	*Type_Nat
	//	*Type_Syn_
	Sum isType_Sum `protobuf_oneof:"Sum"`
}

func (x *Type) Reset() {
	*x = Type{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_daml_daml_lf_dev_daml_lf_1_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Type) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Type) ProtoMessage() {}

func (x *Type) ProtoReflect() protoreflect.Message {
	mi := &file_com_daml_daml_lf_dev_daml_lf_1_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Type.ProtoReflect.Descriptor instead.
func (*Type) Descriptor() ([]byte, []int) {
	return file_com_daml_daml_lf_dev_daml_lf_1_proto_rawDescGZIP(), []int{13}
}

func (m *Type) GetSum() isType_Sum {
	if m != nil {
		return m.Sum
	}
	return nil
}

func (x *Type) GetVar() *Type_Var {
	if x, ok := x.GetSum().(*Type_Var_); ok {
		return x.Var
	}
	return nil
}

func (x *Type) GetCon() *Type_Con {
	if x, ok := x.GetSum().(*Type_Con_); ok {
		return x.Con
	}
	return nil
}

func (x *Type) GetPrim() *Type_Prim {
	if x, ok := x.GetSum().(*Type_Prim_); ok {
		return x.Prim
	}
	return nil
}

func (x *Type) GetFun() *Type_Fun {
	if x, ok := x.GetSum().(*Type_Fun_); ok {
		return x.Fun
	}
	return nil
}

func (x *Type) GetForall() *Type_Forall {
	if x, ok := x.GetSum().(*Type_Forall_); ok {
		return x.Forall
	}
	return nil
}

func (x *Type) GetStruct() *Type_Struct {
	if x, ok := x.GetSum().(*Type_Struct_); ok {
		return x.Struct
	}
	return nil
}

func (x *Type) GetNat() int64 {
	if x, ok := x.GetSum().(*Type_Nat); ok {
		return x.Nat
	}
	return 0
}

func (x *Type) GetSyn() *Type_Syn {
	if x, ok := x.GetSum().(*Type_Syn_); ok {
		return x.Syn
	}
	return nil
}

type isType_Sum interface {
	isType_Sum()
}

type Type_Var_ struct {
	Var *Type_Var `protobuf:"bytes,1,opt,name=var,proto3,oneof"`
}

type Type_Con_ struct {
	Con *Type_Con `protobuf:"bytes,2,opt,name=con,proto3,oneof"`
}

type Type_Prim_ struct {
	Prim *Type_Prim `protobuf:"bytes,3,opt,name=prim,proto3,oneof"` // FixMe: renamed
}

type Type_Fun_ struct {
	Fun *Type_Fun `protobuf:"bytes,4,opt,name=fun,proto3,oneof"`
}

type Type_Forall_ struct {
	Forall *Type_Forall `protobuf:"bytes,5,opt,name=forall,proto3,oneof"`
}

type Type_Struct_ struct {
	Struct *Type_Struct `protobuf:"bytes,7,opt,name=struct,proto3,oneof"`
}

type Type_Nat struct {
	// *Available in versions >= 1.7*
	// *Must be between 0 and 37 (bounds inclusive)*
	// use standard signed long for future usage.
	Nat int64 `protobuf:"zigzag64,11,opt,name=nat,proto3,oneof"`
}

type Type_Syn_ struct {
	Syn *Type_Syn `protobuf:"bytes,12,opt,name=syn,proto3,oneof"` // *Available in versions >= 1.8*
}

func (*Type_Var_) isType_Sum() {}

func (*Type_Con_) isType_Sum() {}

func (*Type_Prim_) isType_Sum() {}

func (*Type_Fun_) isType_Sum() {}

func (*Type_Forall_) isType_Sum() {}

func (*Type_Struct_) isType_Sum() {}

func (*Type_Nat) isType_Sum() {}

func (*Type_Syn_) isType_Sum() {}

// Builtin literals
// FixMe: Renamed
type PrimLit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Sum:
	//	*PrimLit_Int64
	//	*PrimLit_DecimalStr
	//	*PrimLit_NumericInternedStr
	//	*PrimLit_TextStr
	//	*PrimLit_TextInternedStr
	//	*PrimLit_Timestamp
	//	*PrimLit_PartyStr
	//	*PrimLit_PartyInternedStr
	//	*PrimLit_Date
	Sum isPrimLit_Sum `protobuf_oneof:"Sum"`
}

func (x *PrimLit) Reset() {
	*x = PrimLit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_daml_daml_lf_dev_daml_lf_1_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PrimLit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrimLit) ProtoMessage() {}

func (x *PrimLit) ProtoReflect() protoreflect.Message {
	mi := &file_com_daml_daml_lf_dev_daml_lf_1_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrimLit.ProtoReflect.Descriptor instead.
func (*PrimLit) Descriptor() ([]byte, []int) {
	return file_com_daml_daml_lf_dev_daml_lf_1_proto_rawDescGZIP(), []int{14}
}

func (m *PrimLit) GetSum() isPrimLit_Sum {
	if m != nil {
		return m.Sum
	}
	return nil
}

func (x *PrimLit) GetInt64() int64 {
	if x, ok := x.GetSum().(*PrimLit_Int64); ok {
		return x.Int64
	}
	return 0
}

func (x *PrimLit) GetDecimalStr() string {
	if x, ok := x.GetSum().(*PrimLit_DecimalStr); ok {
		return x.DecimalStr
	}
	return ""
}

func (x *PrimLit) GetNumericInternedStr() int32 {
	if x, ok := x.GetSum().(*PrimLit_NumericInternedStr); ok {
		return x.NumericInternedStr
	}
	return 0
}

func (x *PrimLit) GetTextStr() string {
	if x, ok := x.GetSum().(*PrimLit_TextStr); ok {
		return x.TextStr
	}
	return ""
}

func (x *PrimLit) GetTextInternedStr() int32 {
	if x, ok := x.GetSum().(*PrimLit_TextInternedStr); ok {
		return x.TextInternedStr
	}
	return 0
}

func (x *PrimLit) GetTimestamp() int64 {
	if x, ok := x.GetSum().(*PrimLit_Timestamp); ok {
		return x.Timestamp
	}
	return 0
}

func (x *PrimLit) GetPartyStr() string {
	if x, ok := x.GetSum().(*PrimLit_PartyStr); ok {
		return x.PartyStr
	}
	return ""
}

func (x *PrimLit) GetPartyInternedStr() int32 {
	if x, ok := x.GetSum().(*PrimLit_PartyInternedStr); ok {
		return x.PartyInternedStr
	}
	return 0
}

func (x *PrimLit) GetDate() int32 {
	if x, ok := x.GetSum().(*PrimLit_Date); ok {
		return x.Date
	}
	return 0
}

type isPrimLit_Sum interface {
	isPrimLit_Sum()
}

type PrimLit_Int64 struct {
	//  64-bit integer literal ('LitInt64')
	Int64 int64 `protobuf:"zigzag64,1,opt,name=int64,proto3,oneof"`
}

type PrimLit_DecimalStr struct {
	// *Must be a valid representation of decimal*
	DecimalStr string `protobuf:"bytes,2,opt,name=decimal_str,json=decimalStr,proto3,oneof"` // *Available in versions < 1.7*
}

type PrimLit_NumericInternedStr struct {
	// *Must be a valid interned numeric */
	NumericInternedStr int32 `protobuf:"varint,10,opt,name=numeric_interned_str,json=numericInternedStr,proto3,oneof"` // *Available in versions >= 1.7*
}

type PrimLit_TextStr struct {
	TextStr string `protobuf:"bytes,4,opt,name=text_str,json=textStr,proto3,oneof"` // *Available in version < 1.7*
}

type PrimLit_TextInternedStr struct {
	// *Must be a valid interned text*
	TextInternedStr int32 `protobuf:"varint,11,opt,name=text_interned_str,json=textInternedStr,proto3,oneof"` // *Available in versions >= 1.7*
}

type PrimLit_Timestamp struct {
	// *Must be a valid timestamp*
	Timestamp int64 `protobuf:"fixed64,5,opt,name=timestamp,proto3,oneof"`
}

type PrimLit_PartyStr struct {
	// *Must be a valid PartyId string*
	PartyStr string `protobuf:"bytes,7,opt,name=party_str,json=partyStr,proto3,oneof"` // *Available in version < 1.7*
}

type PrimLit_PartyInternedStr struct {
	// *Must be a valid interned PartyId string*
	PartyInternedStr int32 `protobuf:"varint,12,opt,name=party_interned_str,json=partyInternedStr,proto3,oneof"` // *Available in versions >= 1.7*
}

type PrimLit_Date struct {
	// *Must be a valid date*
	Date int32 `protobuf:"varint,8,opt,name=date,proto3,oneof"`
}

func (*PrimLit_Int64) isPrimLit_Sum() {}

func (*PrimLit_DecimalStr) isPrimLit_Sum() {}

func (*PrimLit_NumericInternedStr) isPrimLit_Sum() {}

func (*PrimLit_TextStr) isPrimLit_Sum() {}

func (*PrimLit_TextInternedStr) isPrimLit_Sum() {}

func (*PrimLit_Timestamp) isPrimLit_Sum() {}

func (*PrimLit_PartyStr) isPrimLit_Sum() {}

func (*PrimLit_PartyInternedStr) isPrimLit_Sum() {}

func (*PrimLit_Date) isPrimLit_Sum() {}

// Source code locations
type Location struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Module *ModuleRef      `protobuf:"bytes,1,opt,name=module,proto3" json:"module,omitempty"` // (*optional*), if missing the line is within the current module.
	Range  *Location_Range `protobuf:"bytes,2,opt,name=range,proto3" json:"range,omitempty"`
}

func (x *Location) Reset() {
	*x = Location{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_daml_daml_lf_dev_daml_lf_1_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Location) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Location) ProtoMessage() {}

func (x *Location) ProtoReflect() protoreflect.Message {
	mi := &file_com_daml_daml_lf_dev_daml_lf_1_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Location.ProtoReflect.Descriptor instead.
func (*Location) Descriptor() ([]byte, []int) {
	return file_com_daml_daml_lf_dev_daml_lf_1_proto_rawDescGZIP(), []int{15}
}

func (x *Location) GetModule() *ModuleRef {
	if x != nil {
		return x.Module
	}
	return nil
}

func (x *Location) GetRange() *Location_Range {
	if x != nil {
		return x.Range
	}
	return nil
}

// Expressions
type Expr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Location of the expression in the DAML code source.
	// Optional
	Location *Location `protobuf:"bytes,25,opt,name=location,proto3" json:"location,omitempty"`
	// Types that are assignable to Sum:
	//	*Expr_VarStr
	//	*Expr_VarInternedStr
	//	*Expr_Val
	//	*Expr_Builtin
	//	*Expr_PrimCon
	//	*Expr_PrimLit
	//	*Expr_RecCon_
	//	*Expr_RecProj_
	//	*Expr_RecUpd_
	//	*Expr_VariantCon_
	//	*Expr_EnumCon_
	//	*Expr_StructCon_
	//	*Expr_StructProj_
	//	*Expr_StructUpd_
	//	*Expr_App_
	//	*Expr_TyApp_
	//	*Expr_Abs_
	//	*Expr_TyAbs_
	//	*Expr_Case
	//	*Expr_Let
	//	*Expr_Nil_
	//	*Expr_Cons_
	//	*Expr_Update
	//	*Expr_Scenario
	//	*Expr_OptionalNone_
	//	*Expr_OptionalSome_
	//	*Expr_ToAny_
	//	*Expr_FromAny_
	//	*Expr_TypeRep
	Sum isExpr_Sum `protobuf_oneof:"Sum"`
}

func (x *Expr) Reset() {
	*x = Expr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_daml_daml_lf_dev_daml_lf_1_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Expr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Expr) ProtoMessage() {}

func (x *Expr) ProtoReflect() protoreflect.Message {
	mi := &file_com_daml_daml_lf_dev_daml_lf_1_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Expr.ProtoReflect.Descriptor instead.
func (*Expr) Descriptor() ([]byte, []int) {
	return file_com_daml_daml_lf_dev_daml_lf_1_proto_rawDescGZIP(), []int{16}
}

func (x *Expr) GetLocation() *Location {
	if x != nil {
		return x.Location
	}
	return nil
}

func (m *Expr) GetSum() isExpr_Sum {
	if m != nil {
		return m.Sum
	}
	return nil
}

func (x *Expr) GetVarStr() string {
	if x, ok := x.GetSum().(*Expr_VarStr); ok {
		return x.VarStr
	}
	return ""
}

func (x *Expr) GetVarInternedStr() int32 {
	if x, ok := x.GetSum().(*Expr_VarInternedStr); ok {
		return x.VarInternedStr
	}
	return 0
}

func (x *Expr) GetVal() *ValName {
	if x, ok := x.GetSum().(*Expr_Val); ok {
		return x.Val
	}
	return nil
}

func (x *Expr) GetBuiltin() BuiltinFunction {
	if x, ok := x.GetSum().(*Expr_Builtin); ok {
		return x.Builtin
	}
	return BuiltinFunction_ADD_DECIMAL
}

func (x *Expr) GetPrimCon() PrimCon {
	if x, ok := x.GetSum().(*Expr_PrimCon); ok {
		return x.PrimCon
	}
	return PrimCon_CON_UNIT
}

func (x *Expr) GetPrimLit() *PrimLit {
	if x, ok := x.GetSum().(*Expr_PrimLit); ok {
		return x.PrimLit
	}
	return nil
}

func (x *Expr) GetRecCon() *Expr_RecCon {
	if x, ok := x.GetSum().(*Expr_RecCon_); ok {
		return x.RecCon
	}
	return nil
}

func (x *Expr) GetRecProj() *Expr_RecProj {
	if x, ok := x.GetSum().(*Expr_RecProj_); ok {
		return x.RecProj
	}
	return nil
}

func (x *Expr) GetRecUpd() *Expr_RecUpd {
	if x, ok := x.GetSum().(*Expr_RecUpd_); ok {
		return x.RecUpd
	}
	return nil
}

func (x *Expr) GetVariantCon() *Expr_VariantCon {
	if x, ok := x.GetSum().(*Expr_VariantCon_); ok {
		return x.VariantCon
	}
	return nil
}

func (x *Expr) GetEnumCon() *Expr_EnumCon {
	if x, ok := x.GetSum().(*Expr_EnumCon_); ok {
		return x.EnumCon
	}
	return nil
}

func (x *Expr) GetStructCon() *Expr_StructCon {
	if x, ok := x.GetSum().(*Expr_StructCon_); ok {
		return x.StructCon
	}
	return nil
}

func (x *Expr) GetStructProj() *Expr_StructProj {
	if x, ok := x.GetSum().(*Expr_StructProj_); ok {
		return x.StructProj
	}
	return nil
}

func (x *Expr) GetStructUpd() *Expr_StructUpd {
	if x, ok := x.GetSum().(*Expr_StructUpd_); ok {
		return x.StructUpd
	}
	return nil
}

func (x *Expr) GetApp() *Expr_App {
	if x, ok := x.GetSum().(*Expr_App_); ok {
		return x.App
	}
	return nil
}

func (x *Expr) GetTyApp() *Expr_TyApp {
	if x, ok := x.GetSum().(*Expr_TyApp_); ok {
		return x.TyApp
	}
	return nil
}

func (x *Expr) GetAbs() *Expr_Abs {
	if x, ok := x.GetSum().(*Expr_Abs_); ok {
		return x.Abs
	}
	return nil
}

func (x *Expr) GetTyAbs() *Expr_TyAbs {
	if x, ok := x.GetSum().(*Expr_TyAbs_); ok {
		return x.TyAbs
	}
	return nil
}

func (x *Expr) GetCase() *Case {
	if x, ok := x.GetSum().(*Expr_Case); ok {
		return x.Case
	}
	return nil
}

func (x *Expr) GetLet() *Block {
	if x, ok := x.GetSum().(*Expr_Let); ok {
		return x.Let
	}
	return nil
}

func (x *Expr) GetNil() *Expr_Nil {
	if x, ok := x.GetSum().(*Expr_Nil_); ok {
		return x.Nil
	}
	return nil
}

func (x *Expr) GetCons() *Expr_Cons {
	if x, ok := x.GetSum().(*Expr_Cons_); ok {
		return x.Cons
	}
	return nil
}

func (x *Expr) GetUpdate() *Update {
	if x, ok := x.GetSum().(*Expr_Update); ok {
		return x.Update
	}
	return nil
}

func (x *Expr) GetScenario() *Scenario {
	if x, ok := x.GetSum().(*Expr_Scenario); ok {
		return x.Scenario
	}
	return nil
}

func (x *Expr) GetOptionalNone() *Expr_OptionalNone {
	if x, ok := x.GetSum().(*Expr_OptionalNone_); ok {
		return x.OptionalNone
	}
	return nil
}

func (x *Expr) GetOptionalSome() *Expr_OptionalSome {
	if x, ok := x.GetSum().(*Expr_OptionalSome_); ok {
		return x.OptionalSome
	}
	return nil
}

func (x *Expr) GetToAny() *Expr_ToAny {
	if x, ok := x.GetSum().(*Expr_ToAny_); ok {
		return x.ToAny
	}
	return nil
}

func (x *Expr) GetFromAny() *Expr_FromAny {
	if x, ok := x.GetSum().(*Expr_FromAny_); ok {
		return x.FromAny
	}
	return nil
}

func (x *Expr) GetTypeRep() *Type {
	if x, ok := x.GetSum().(*Expr_TypeRep); ok {
		return x.TypeRep
	}
	return nil
}

type isExpr_Sum interface {
	isExpr_Sum()
}

type Expr_VarStr struct {
	// *Must be a valid identifier*
	VarStr string `protobuf:"bytes,1,opt,name=var_str,json=varStr,proto3,oneof"` // *Available in version < 1.7*
}

type Expr_VarInternedStr struct {
	// *Must be a valid interned identifier*
	VarInternedStr int32 `protobuf:"varint,29,opt,name=var_interned_str,json=varInternedStr,proto3,oneof"` // *Available in versions >= 1.7*
}

type Expr_Val struct {
	// Defined value ('ExpVal')
	Val *ValName `protobuf:"bytes,2,opt,name=val,proto3,oneof"`
}

type Expr_Builtin struct {
	// Builtin function ('ExpBuiltin')
	Builtin BuiltinFunction `protobuf:"varint,3,opt,name=builtin,proto3,enum=daml_lf_1.BuiltinFunction,oneof"`
}

type Expr_PrimCon struct {
	// Primitive constructor ('()', 'False' or 'True')
	PrimCon PrimCon `protobuf:"varint,4,opt,name=prim_con,json=primCon,proto3,enum=daml_lf_1.PrimCon,oneof"`
}

type Expr_PrimLit struct {
	// Builtin literal ('ExpBuiltin')
	PrimLit *PrimLit `protobuf:"bytes,5,opt,name=prim_lit,json=primLit,proto3,oneof"`
}

type Expr_RecCon_ struct {
	// Record construction ('ExpRecCon')
	RecCon *Expr_RecCon `protobuf:"bytes,6,opt,name=rec_con,json=recCon,proto3,oneof"`
}

type Expr_RecProj_ struct {
	// Record projection ('ExpRecProj')
	RecProj *Expr_RecProj `protobuf:"bytes,7,opt,name=rec_proj,json=recProj,proto3,oneof"`
}

type Expr_RecUpd_ struct {
	// Record udpate ('ExpRecUpdate')
	RecUpd *Expr_RecUpd `protobuf:"bytes,22,opt,name=rec_upd,json=recUpd,proto3,oneof"`
}

type Expr_VariantCon_ struct {
	// Variant construction ('ExpVariantCon')
	VariantCon *Expr_VariantCon `protobuf:"bytes,8,opt,name=variant_con,json=variantCon,proto3,oneof"`
}

type Expr_EnumCon_ struct {
	// Enum construction ('ExpEnumCon')
	EnumCon *Expr_EnumCon `protobuf:"bytes,28,opt,name=enum_con,json=enumCon,proto3,oneof"` // *Available in versions >= 1.6*
}

type Expr_StructCon_ struct {
	// Struct construction ('ExpStructCon')
	StructCon *Expr_StructCon `protobuf:"bytes,9,opt,name=struct_con,json=structCon,proto3,oneof"`
}

type Expr_StructProj_ struct {
	// Struct project ('ExpStructProj')
	StructProj *Expr_StructProj `protobuf:"bytes,10,opt,name=struct_proj,json=structProj,proto3,oneof"`
}

type Expr_StructUpd_ struct {
	// Struct update ('ExpStructUpdate')
	StructUpd *Expr_StructUpd `protobuf:"bytes,23,opt,name=struct_upd,json=structUpd,proto3,oneof"`
}

type Expr_App_ struct {
	// Application ('ExpApp')
	App *Expr_App `protobuf:"bytes,11,opt,name=app,proto3,oneof"`
}

type Expr_TyApp_ struct {
	// Type Application ('ExpTyApp')
	TyApp *Expr_TyApp `protobuf:"bytes,12,opt,name=ty_app,json=tyApp,proto3,oneof"`
}

type Expr_Abs_ struct {
	// Abstraction ('ExpAbs')
	Abs *Expr_Abs `protobuf:"bytes,13,opt,name=abs,proto3,oneof"`
}

type Expr_TyAbs_ struct {
	// Type Abstraction ('ExpTyAbs')
	TyAbs *Expr_TyAbs `protobuf:"bytes,14,opt,name=ty_abs,json=tyAbs,proto3,oneof"`
}

type Expr_Case struct {
	// Pattern Matching ('ExpCase')
	Case *Case `protobuf:"bytes,15,opt,name=case,proto3,oneof"`
}

type Expr_Let struct {
	// Let block ('ExpLet')
	Let *Block `protobuf:"bytes,16,opt,name=let,proto3,oneof"`
}

type Expr_Nil_ struct {
	// Empty List ('ExpNil')
	Nil *Expr_Nil `protobuf:"bytes,17,opt,name=nil,proto3,oneof"`
}

type Expr_Cons_ struct {
	// Non Empty list ('ExpCons')
	Cons *Expr_Cons `protobuf:"bytes,18,opt,name=cons,proto3,oneof"`
}

type Expr_Update struct {
	// Update expression ('ExpUpdate')
	Update *Update `protobuf:"bytes,20,opt,name=update,proto3,oneof"`
}

type Expr_Scenario struct {
	// Scenario Expression ('ExpScenario')
	Scenario *Scenario `protobuf:"bytes,21,opt,name=scenario,proto3,oneof"`
}

type Expr_OptionalNone_ struct {
	// empty optional value ('ExpNone')
	// *Available in versions >= 1.1*
	OptionalNone *Expr_OptionalNone `protobuf:"bytes,26,opt,name=optional_none,json=optionalNone,proto3,oneof"`
}

type Expr_OptionalSome_ struct {
	// non empty optional value ('ExpSome')
	// *Available in versions >= 1.1*
	OptionalSome *Expr_OptionalSome `protobuf:"bytes,27,opt,name=optional_some,json=optionalSome,proto3,oneof"`
}

type Expr_ToAny_ struct {
	// Wrap an arbitrary value in Any ('ExpToAny')
	// *Available in versions >= 1.7*
	ToAny *Expr_ToAny `protobuf:"bytes,30,opt,name=to_any,json=toAny,proto3,oneof"`
}

type Expr_FromAny_ struct {
	// Extract the given type from Any or return None on type-mismatch ('ExpFromAny')
	// *Available in versions >= 1.7*
	FromAny *Expr_FromAny `protobuf:"bytes,31,opt,name=from_any,json=fromAny,proto3,oneof"`
}

type Expr_TypeRep struct {
	// A type representation
	// *Available in versions >= 1.7*
	TypeRep *Type `protobuf:"bytes,32,opt,name=type_rep,json=typeRep,proto3,oneof"`
}

func (*Expr_VarStr) isExpr_Sum() {}

func (*Expr_VarInternedStr) isExpr_Sum() {}

func (*Expr_Val) isExpr_Sum() {}

func (*Expr_Builtin) isExpr_Sum() {}

func (*Expr_PrimCon) isExpr_Sum() {}

func (*Expr_PrimLit) isExpr_Sum() {}

func (*Expr_RecCon_) isExpr_Sum() {}

func (*Expr_RecProj_) isExpr_Sum() {}

func (*Expr_RecUpd_) isExpr_Sum() {}

func (*Expr_VariantCon_) isExpr_Sum() {}

func (*Expr_EnumCon_) isExpr_Sum() {}

func (*Expr_StructCon_) isExpr_Sum() {}

func (*Expr_StructProj_) isExpr_Sum() {}

func (*Expr_StructUpd_) isExpr_Sum() {}

func (*Expr_App_) isExpr_Sum() {}

func (*Expr_TyApp_) isExpr_Sum() {}

func (*Expr_Abs_) isExpr_Sum() {}

func (*Expr_TyAbs_) isExpr_Sum() {}

func (*Expr_Case) isExpr_Sum() {}

func (*Expr_Let) isExpr_Sum() {}

func (*Expr_Nil_) isExpr_Sum() {}

func (*Expr_Cons_) isExpr_Sum() {}

func (*Expr_Update) isExpr_Sum() {}

func (*Expr_Scenario) isExpr_Sum() {}

func (*Expr_OptionalNone_) isExpr_Sum() {}

func (*Expr_OptionalSome_) isExpr_Sum() {}

func (*Expr_ToAny_) isExpr_Sum() {}

func (*Expr_FromAny_) isExpr_Sum() {}

func (*Expr_TypeRep) isExpr_Sum() {}

// Case alternative
type CaseAlt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Sum:
	//	*CaseAlt_Default
	//	*CaseAlt_Variant_
	//	*CaseAlt_PrimCon
	//	*CaseAlt_Nil
	//	*CaseAlt_Cons_
	//	*CaseAlt_OptionalNone
	//	*CaseAlt_OptionalSome_
	//	*CaseAlt_Enum_
	Sum  isCaseAlt_Sum `protobuf_oneof:"Sum"`
	Body *Expr         `protobuf:"bytes,6,opt,name=body,proto3" json:"body,omitempty"`
}

func (x *CaseAlt) Reset() {
	*x = CaseAlt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_daml_daml_lf_dev_daml_lf_1_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CaseAlt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CaseAlt) ProtoMessage() {}

func (x *CaseAlt) ProtoReflect() protoreflect.Message {
	mi := &file_com_daml_daml_lf_dev_daml_lf_1_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CaseAlt.ProtoReflect.Descriptor instead.
func (*CaseAlt) Descriptor() ([]byte, []int) {
	return file_com_daml_daml_lf_dev_daml_lf_1_proto_rawDescGZIP(), []int{17}
}

func (m *CaseAlt) GetSum() isCaseAlt_Sum {
	if m != nil {
		return m.Sum
	}
	return nil
}

func (x *CaseAlt) GetDefault() *Unit {
	if x, ok := x.GetSum().(*CaseAlt_Default); ok {
		return x.Default
	}
	return nil
}

func (x *CaseAlt) GetVariant() *CaseAlt_Variant {
	if x, ok := x.GetSum().(*CaseAlt_Variant_); ok {
		return x.Variant
	}
	return nil
}

func (x *CaseAlt) GetPrimCon() PrimCon {
	if x, ok := x.GetSum().(*CaseAlt_PrimCon); ok {
		return x.PrimCon
	}
	return PrimCon_CON_UNIT
}

func (x *CaseAlt) GetNil() *Unit {
	if x, ok := x.GetSum().(*CaseAlt_Nil); ok {
		return x.Nil
	}
	return nil
}

func (x *CaseAlt) GetCons() *CaseAlt_Cons {
	if x, ok := x.GetSum().(*CaseAlt_Cons_); ok {
		return x.Cons
	}
	return nil
}

func (x *CaseAlt) GetOptionalNone() *Unit {
	if x, ok := x.GetSum().(*CaseAlt_OptionalNone); ok {
		return x.OptionalNone
	}
	return nil
}

func (x *CaseAlt) GetOptionalSome() *CaseAlt_OptionalSome {
	if x, ok := x.GetSum().(*CaseAlt_OptionalSome_); ok {
		return x.OptionalSome
	}
	return nil
}

func (x *CaseAlt) GetEnum() *CaseAlt_Enum {
	if x, ok := x.GetSum().(*CaseAlt_Enum_); ok {
		return x.Enum
	}
	return nil
}

func (x *CaseAlt) GetBody() *Expr {
	if x != nil {
		return x.Body
	}
	return nil
}

type isCaseAlt_Sum interface {
	isCaseAlt_Sum()
}

type CaseAlt_Default struct {
	Default *Unit `protobuf:"bytes,1,opt,name=default,proto3,oneof"`
}

type CaseAlt_Variant_ struct {
	Variant *CaseAlt_Variant `protobuf:"bytes,2,opt,name=variant,proto3,oneof"`
}

type CaseAlt_PrimCon struct {
	PrimCon PrimCon `protobuf:"varint,3,opt,name=prim_con,json=primCon,proto3,enum=daml_lf_1.PrimCon,oneof"`
}

type CaseAlt_Nil struct {
	Nil *Unit `protobuf:"bytes,4,opt,name=nil,proto3,oneof"`
}

type CaseAlt_Cons_ struct {
	Cons *CaseAlt_Cons `protobuf:"bytes,5,opt,name=cons,proto3,oneof"`
}

type CaseAlt_OptionalNone struct {
	OptionalNone *Unit `protobuf:"bytes,7,opt,name=optional_none,json=optionalNone,proto3,oneof"` // *Available in versions >= 1.1*
}

type CaseAlt_OptionalSome_ struct {
	OptionalSome *CaseAlt_OptionalSome `protobuf:"bytes,8,opt,name=optional_some,json=optionalSome,proto3,oneof"` // *Available in versions >= 1.1*
}

type CaseAlt_Enum_ struct {
	Enum *CaseAlt_Enum `protobuf:"bytes,9,opt,name=enum,proto3,oneof"` // *Available in versions >= 1.6*
}

func (*CaseAlt_Default) isCaseAlt_Sum() {}

func (*CaseAlt_Variant_) isCaseAlt_Sum() {}

func (*CaseAlt_PrimCon) isCaseAlt_Sum() {}

func (*CaseAlt_Nil) isCaseAlt_Sum() {}

func (*CaseAlt_Cons_) isCaseAlt_Sum() {}

func (*CaseAlt_OptionalNone) isCaseAlt_Sum() {}

func (*CaseAlt_OptionalSome_) isCaseAlt_Sum() {}

func (*CaseAlt_Enum_) isCaseAlt_Sum() {}

type Case struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Scrut *Expr      `protobuf:"bytes,1,opt,name=scrut,proto3" json:"scrut,omitempty"`
	Alts  []*CaseAlt `protobuf:"bytes,2,rep,name=alts,proto3" json:"alts,omitempty"`
}

func (x *Case) Reset() {
	*x = Case{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_daml_daml_lf_dev_daml_lf_1_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Case) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Case) ProtoMessage() {}

func (x *Case) ProtoReflect() protoreflect.Message {
	mi := &file_com_daml_daml_lf_dev_daml_lf_1_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Case.ProtoReflect.Descriptor instead.
func (*Case) Descriptor() ([]byte, []int) {
	return file_com_daml_daml_lf_dev_daml_lf_1_proto_rawDescGZIP(), []int{18}
}

func (x *Case) GetScrut() *Expr {
	if x != nil {
		return x.Scrut
	}
	return nil
}

func (x *Case) GetAlts() []*CaseAlt {
	if x != nil {
		return x.Alts
	}
	return nil
}

// A block of bindings and an expression.
// Encodes a sequence of binds in e.g. a let or update block.
type Block struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// *Must be non-empty*
	// Bindings
	Bindings []*Binding `protobuf:"bytes,1,rep,name=bindings,proto3" json:"bindings,omitempty"`
	Body     *Expr      `protobuf:"bytes,2,opt,name=body,proto3" json:"body,omitempty"`
}

func (x *Block) Reset() {
	*x = Block{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_daml_daml_lf_dev_daml_lf_1_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Block) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Block) ProtoMessage() {}

func (x *Block) ProtoReflect() protoreflect.Message {
	mi := &file_com_daml_daml_lf_dev_daml_lf_1_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Block.ProtoReflect.Descriptor instead.
func (*Block) Descriptor() ([]byte, []int) {
	return file_com_daml_daml_lf_dev_daml_lf_1_proto_rawDescGZIP(), []int{19}
}

func (x *Block) GetBindings() []*Binding {
	if x != nil {
		return x.Bindings
	}
	return nil
}

func (x *Block) GetBody() *Expr {
	if x != nil {
		return x.Body
	}
	return nil
}

// A Pure statement either scenario or update
type Pure struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type *Type `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Expr *Expr `protobuf:"bytes,2,opt,name=expr,proto3" json:"expr,omitempty"`
}

func (x *Pure) Reset() {
	*x = Pure{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_daml_daml_lf_dev_daml_lf_1_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Pure) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Pure) ProtoMessage() {}

func (x *Pure) ProtoReflect() protoreflect.Message {
	mi := &file_com_daml_daml_lf_dev_daml_lf_1_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Pure.ProtoReflect.Descriptor instead.
func (*Pure) Descriptor() ([]byte, []int) {
	return file_com_daml_daml_lf_dev_daml_lf_1_proto_rawDescGZIP(), []int{20}
}

func (x *Pure) GetType() *Type {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *Pure) GetExpr() *Expr {
	if x != nil {
		return x.Expr
	}
	return nil
}

type Update struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Sum:
	//	*Update_Pure
	//	*Update_Block
	//	*Update_Create_
	//	*Update_Exercise_
	//	*Update_Fetch_
	//	*Update_GetTime
	//	*Update_LookupByKey
	//	*Update_FetchByKey
	//	*Update_EmbedExpr_
	Sum isUpdate_Sum `protobuf_oneof:"Sum"`
}

func (x *Update) Reset() {
	*x = Update{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_daml_daml_lf_dev_daml_lf_1_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Update) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Update) ProtoMessage() {}

func (x *Update) ProtoReflect() protoreflect.Message {
	mi := &file_com_daml_daml_lf_dev_daml_lf_1_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Update.ProtoReflect.Descriptor instead.
func (*Update) Descriptor() ([]byte, []int) {
	return file_com_daml_daml_lf_dev_daml_lf_1_proto_rawDescGZIP(), []int{21}
}

func (m *Update) GetSum() isUpdate_Sum {
	if m != nil {
		return m.Sum
	}
	return nil
}

func (x *Update) GetPure() *Pure {
	if x, ok := x.GetSum().(*Update_Pure); ok {
		return x.Pure
	}
	return nil
}

func (x *Update) GetBlock() *Block {
	if x, ok := x.GetSum().(*Update_Block); ok {
		return x.Block
	}
	return nil
}

func (x *Update) GetCreate() *Update_Create {
	if x, ok := x.GetSum().(*Update_Create_); ok {
		return x.Create
	}
	return nil
}

func (x *Update) GetExercise() *Update_Exercise {
	if x, ok := x.GetSum().(*Update_Exercise_); ok {
		return x.Exercise
	}
	return nil
}

func (x *Update) GetFetch() *Update_Fetch {
	if x, ok := x.GetSum().(*Update_Fetch_); ok {
		return x.Fetch
	}
	return nil
}

func (x *Update) GetGetTime() *Unit {
	if x, ok := x.GetSum().(*Update_GetTime); ok {
		return x.GetTime
	}
	return nil
}

func (x *Update) GetLookupByKey() *Update_RetrieveByKey {
	if x, ok := x.GetSum().(*Update_LookupByKey); ok {
		return x.LookupByKey
	}
	return nil
}

func (x *Update) GetFetchByKey() *Update_RetrieveByKey {
	if x, ok := x.GetSum().(*Update_FetchByKey); ok {
		return x.FetchByKey
	}
	return nil
}

func (x *Update) GetEmbedExpr() *Update_EmbedExpr {
	if x, ok := x.GetSum().(*Update_EmbedExpr_); ok {
		return x.EmbedExpr
	}
	return nil
}

type isUpdate_Sum interface {
	isUpdate_Sum()
}

type Update_Pure struct {
	Pure *Pure `protobuf:"bytes,1,opt,name=pure,proto3,oneof"`
}

type Update_Block struct {
	Block *Block `protobuf:"bytes,2,opt,name=block,proto3,oneof"`
}

type Update_Create_ struct {
	Create *Update_Create `protobuf:"bytes,3,opt,name=create,proto3,oneof"`
}

type Update_Exercise_ struct {
	Exercise *Update_Exercise `protobuf:"bytes,4,opt,name=exercise,proto3,oneof"`
}

type Update_Fetch_ struct {
	Fetch *Update_Fetch `protobuf:"bytes,5,opt,name=fetch,proto3,oneof"`
}

type Update_GetTime struct {
	GetTime *Unit `protobuf:"bytes,6,opt,name=get_time,json=getTime,proto3,oneof"`
}

type Update_LookupByKey struct {
	LookupByKey *Update_RetrieveByKey `protobuf:"bytes,8,opt,name=lookup_by_key,json=lookupByKey,proto3,oneof"` // *Available in versions >= 1.2*
}

type Update_FetchByKey struct {
	FetchByKey *Update_RetrieveByKey `protobuf:"bytes,9,opt,name=fetch_by_key,json=fetchByKey,proto3,oneof"` // *Available in versions >= 1.2*
}

type Update_EmbedExpr_ struct {
	// see similar constructor in `Scenario` on why this is useful.
	EmbedExpr *Update_EmbedExpr `protobuf:"bytes,7,opt,name=embed_expr,json=embedExpr,proto3,oneof"`
}

func (*Update_Pure) isUpdate_Sum() {}

func (*Update_Block) isUpdate_Sum() {}

func (*Update_Create_) isUpdate_Sum() {}

func (*Update_Exercise_) isUpdate_Sum() {}

func (*Update_Fetch_) isUpdate_Sum() {}

func (*Update_GetTime) isUpdate_Sum() {}

func (*Update_LookupByKey) isUpdate_Sum() {}

func (*Update_FetchByKey) isUpdate_Sum() {}

func (*Update_EmbedExpr_) isUpdate_Sum() {}

// Scenario actions
type Scenario struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Sum:
	//	*Scenario_Pure
	//	*Scenario_Block
	//	*Scenario_Commit_
	//	*Scenario_MustFailAt
	//	*Scenario_Pass
	//	*Scenario_GetTime
	//	*Scenario_GetParty
	//	*Scenario_EmbedExpr_
	Sum isScenario_Sum `protobuf_oneof:"Sum"`
}

func (x *Scenario) Reset() {
	*x = Scenario{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_daml_daml_lf_dev_daml_lf_1_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Scenario) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Scenario) ProtoMessage() {}

func (x *Scenario) ProtoReflect() protoreflect.Message {
	mi := &file_com_daml_daml_lf_dev_daml_lf_1_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Scenario.ProtoReflect.Descriptor instead.
func (*Scenario) Descriptor() ([]byte, []int) {
	return file_com_daml_daml_lf_dev_daml_lf_1_proto_rawDescGZIP(), []int{22}
}

func (m *Scenario) GetSum() isScenario_Sum {
	if m != nil {
		return m.Sum
	}
	return nil
}

func (x *Scenario) GetPure() *Pure {
	if x, ok := x.GetSum().(*Scenario_Pure); ok {
		return x.Pure
	}
	return nil
}

func (x *Scenario) GetBlock() *Block {
	if x, ok := x.GetSum().(*Scenario_Block); ok {
		return x.Block
	}
	return nil
}

func (x *Scenario) GetCommit() *Scenario_Commit {
	if x, ok := x.GetSum().(*Scenario_Commit_); ok {
		return x.Commit
	}
	return nil
}

func (x *Scenario) GetMustFailAt() *Scenario_Commit {
	if x, ok := x.GetSum().(*Scenario_MustFailAt); ok {
		return x.MustFailAt
	}
	return nil
}

func (x *Scenario) GetPass() *Expr {
	if x, ok := x.GetSum().(*Scenario_Pass); ok {
		return x.Pass
	}
	return nil
}

func (x *Scenario) GetGetTime() *Unit {
	if x, ok := x.GetSum().(*Scenario_GetTime); ok {
		return x.GetTime
	}
	return nil
}

func (x *Scenario) GetGetParty() *Expr {
	if x, ok := x.GetSum().(*Scenario_GetParty); ok {
		return x.GetParty
	}
	return nil
}

func (x *Scenario) GetEmbedExpr() *Scenario_EmbedExpr {
	if x, ok := x.GetSum().(*Scenario_EmbedExpr_); ok {
		return x.EmbedExpr
	}
	return nil
}

type isScenario_Sum interface {
	isScenario_Sum()
}

type Scenario_Pure struct {
	Pure *Pure `protobuf:"bytes,1,opt,name=pure,proto3,oneof"`
}

type Scenario_Block struct {
	Block *Block `protobuf:"bytes,2,opt,name=block,proto3,oneof"`
}

type Scenario_Commit_ struct {
	Commit *Scenario_Commit `protobuf:"bytes,3,opt,name=commit,proto3,oneof"`
}

type Scenario_MustFailAt struct {
	MustFailAt *Scenario_Commit `protobuf:"bytes,4,opt,name=mustFailAt,proto3,oneof"`
}

type Scenario_Pass struct {
	Pass *Expr `protobuf:"bytes,5,opt,name=pass,proto3,oneof"`
}

type Scenario_GetTime struct {
	GetTime *Unit `protobuf:"bytes,6,opt,name=get_time,json=getTime,proto3,oneof"`
}

type Scenario_GetParty struct {
	GetParty *Expr `protobuf:"bytes,7,opt,name=get_party,json=getParty,proto3,oneof"`
}

type Scenario_EmbedExpr_ struct {
	// embed an expression of type Scenario. note that this construct is useful
	// to explicitly mark the start of scenario execution, which is useful in
	// top level definitions. for example if we hav
	//
	// def test : Scenario Unit = if <blah> then <this> else <that>
	//
	// this is not a value, since it's headed with an `if`, but we can turn
	// it into a value by wrapping the `if` with this constructor. in that
	// case, the `if` will be executed every time the scenario runs --
	// as expected.
	EmbedExpr *Scenario_EmbedExpr `protobuf:"bytes,8,opt,name=embed_expr,json=embedExpr,proto3,oneof"`
}

func (*Scenario_Pure) isScenario_Sum() {}

func (*Scenario_Block) isScenario_Sum() {}

func (*Scenario_Commit_) isScenario_Sum() {}

func (*Scenario_MustFailAt) isScenario_Sum() {}

func (*Scenario_Pass) isScenario_Sum() {}

func (*Scenario_GetTime) isScenario_Sum() {}

func (*Scenario_GetParty) isScenario_Sum() {}

func (*Scenario_EmbedExpr_) isScenario_Sum() {}

// Template choice definition.
type TemplateChoice struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// *Must be a valid identifier*
	//
	// Types that are assignable to Name:
	//	*TemplateChoice_NameStr
	//	*TemplateChoice_NameInternedStr
	Name isTemplateChoice_Name `protobuf_oneof:"name"`
	// Choice type
	Consuming bool `protobuf:"varint,2,opt,name=consuming,proto3" json:"consuming,omitempty"`
	// The controllers of the choice. They have type `List Party` and the
	// template parameter in scope, but not the choice parameter. All of these
	// controllers need to authorize the exercising of this choice (aka
	// conjunctive choice controllers).
	Controllers *Expr `protobuf:"bytes,3,opt,name=controllers,proto3" json:"controllers,omitempty"`
	// Name to which the choice argument is bound and its type.
	ArgBinder *VarWithType `protobuf:"bytes,4,opt,name=arg_binder,json=argBinder,proto3" json:"arg_binder,omitempty"`
	// Return type of the choice.
	RetType *Type `protobuf:"bytes,5,opt,name=ret_type,json=retType,proto3" json:"ret_type,omitempty"`
	// Follow-up update of the choice. It has type `Update <ret_type>` and both
	// the template parameter and the choice parameter in scope.
	Update *Expr `protobuf:"bytes,6,opt,name=update,proto3" json:"update,omitempty"`
	// Name to bind the ContractId of the contract this choice is exercised on to.
	//
	// Types that are assignable to SelfBinder:
	//	*TemplateChoice_SelfBinderStr
	//	*TemplateChoice_SelfBinderInternedStr
	SelfBinder isTemplateChoice_SelfBinder `protobuf_oneof:"self_binder"`
	Location   *Location                   `protobuf:"bytes,8,opt,name=location,proto3" json:"location,omitempty"`
}

func (x *TemplateChoice) Reset() {
	*x = TemplateChoice{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_daml_daml_lf_dev_daml_lf_1_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TemplateChoice) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TemplateChoice) ProtoMessage() {}

func (x *TemplateChoice) ProtoReflect() protoreflect.Message {
	mi := &file_com_daml_daml_lf_dev_daml_lf_1_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TemplateChoice.ProtoReflect.Descriptor instead.
func (*TemplateChoice) Descriptor() ([]byte, []int) {
	return file_com_daml_daml_lf_dev_daml_lf_1_proto_rawDescGZIP(), []int{23}
}

func (m *TemplateChoice) GetName() isTemplateChoice_Name {
	if m != nil {
		return m.Name
	}
	return nil
}

func (x *TemplateChoice) GetNameStr() string {
	if x, ok := x.GetName().(*TemplateChoice_NameStr); ok {
		return x.NameStr
	}
	return ""
}

func (x *TemplateChoice) GetNameInternedStr() int32 {
	if x, ok := x.GetName().(*TemplateChoice_NameInternedStr); ok {
		return x.NameInternedStr
	}
	return 0
}

func (x *TemplateChoice) GetConsuming() bool {
	if x != nil {
		return x.Consuming
	}
	return false
}

func (x *TemplateChoice) GetControllers() *Expr {
	if x != nil {
		return x.Controllers
	}
	return nil
}

func (x *TemplateChoice) GetArgBinder() *VarWithType {
	if x != nil {
		return x.ArgBinder
	}
	return nil
}

func (x *TemplateChoice) GetRetType() *Type {
	if x != nil {
		return x.RetType
	}
	return nil
}

func (x *TemplateChoice) GetUpdate() *Expr {
	if x != nil {
		return x.Update
	}
	return nil
}

func (m *TemplateChoice) GetSelfBinder() isTemplateChoice_SelfBinder {
	if m != nil {
		return m.SelfBinder
	}
	return nil
}

func (x *TemplateChoice) GetSelfBinderStr() string {
	if x, ok := x.GetSelfBinder().(*TemplateChoice_SelfBinderStr); ok {
		return x.SelfBinderStr
	}
	return ""
}

func (x *TemplateChoice) GetSelfBinderInternedStr() int32 {
	if x, ok := x.GetSelfBinder().(*TemplateChoice_SelfBinderInternedStr); ok {
		return x.SelfBinderInternedStr
	}
	return 0
}

func (x *TemplateChoice) GetLocation() *Location {
	if x != nil {
		return x.Location
	}
	return nil
}

type isTemplateChoice_Name interface {
	isTemplateChoice_Name()
}

type TemplateChoice_NameStr struct {
	NameStr string `protobuf:"bytes,1,opt,name=name_str,json=nameStr,proto3,oneof"` // *Available in version < 1.7*
}

type TemplateChoice_NameInternedStr struct {
	// *Must be a valid interned identifier*
	NameInternedStr int32 `protobuf:"varint,9,opt,name=name_interned_str,json=nameInternedStr,proto3,oneof"` // *Available in versions >= 1.7*
}

func (*TemplateChoice_NameStr) isTemplateChoice_Name() {}

func (*TemplateChoice_NameInternedStr) isTemplateChoice_Name() {}

type isTemplateChoice_SelfBinder interface {
	isTemplateChoice_SelfBinder()
}

type TemplateChoice_SelfBinderStr struct {
	// *Must be a valid identifier*
	SelfBinderStr string `protobuf:"bytes,7,opt,name=self_binder_str,json=selfBinderStr,proto3,oneof"` // *Available in version < 1.7*
}

type TemplateChoice_SelfBinderInternedStr struct {
	// *Must be a valid interned identifier*
	SelfBinderInternedStr int32 `protobuf:"varint,10,opt,name=self_binder_interned_str,json=selfBinderInternedStr,proto3,oneof"` // *Available in versions >= 1.7*
}

func (*TemplateChoice_SelfBinderStr) isTemplateChoice_SelfBinder() {}

func (*TemplateChoice_SelfBinderInternedStr) isTemplateChoice_SelfBinder() {}

// we restrict key expressions to records of projections, much like SQL
type KeyExpr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Sum:
	//	*KeyExpr_Projections_
	//	*KeyExpr_Record_
	Sum isKeyExpr_Sum `protobuf_oneof:"Sum"`
}

func (x *KeyExpr) Reset() {
	*x = KeyExpr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_daml_daml_lf_dev_daml_lf_1_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KeyExpr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeyExpr) ProtoMessage() {}

func (x *KeyExpr) ProtoReflect() protoreflect.Message {
	mi := &file_com_daml_daml_lf_dev_daml_lf_1_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeyExpr.ProtoReflect.Descriptor instead.
func (*KeyExpr) Descriptor() ([]byte, []int) {
	return file_com_daml_daml_lf_dev_daml_lf_1_proto_rawDescGZIP(), []int{24}
}

func (m *KeyExpr) GetSum() isKeyExpr_Sum {
	if m != nil {
		return m.Sum
	}
	return nil
}

func (x *KeyExpr) GetProjections() *KeyExpr_Projections {
	if x, ok := x.GetSum().(*KeyExpr_Projections_); ok {
		return x.Projections
	}
	return nil
}

func (x *KeyExpr) GetRecord() *KeyExpr_Record {
	if x, ok := x.GetSum().(*KeyExpr_Record_); ok {
		return x.Record
	}
	return nil
}

type isKeyExpr_Sum interface {
	isKeyExpr_Sum()
}

type KeyExpr_Projections_ struct {
	Projections *KeyExpr_Projections `protobuf:"bytes,1,opt,name=projections,proto3,oneof"`
}

type KeyExpr_Record_ struct {
	Record *KeyExpr_Record `protobuf:"bytes,2,opt,name=record,proto3,oneof"`
}

func (*KeyExpr_Projections_) isKeyExpr_Sum() {}

func (*KeyExpr_Record_) isKeyExpr_Sum() {}

// Contract template definition
type DefTemplate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The type constructor for the template, acting as both
	// the name of the template and the type of the template argument.
	//
	// Types that are assignable to Tycon:
	//	*DefTemplate_TyconDname
	//	*DefTemplate_TyconInternedDname
	Tycon isDefTemplate_Tycon `protobuf_oneof:"tycon"`
	// Name to which the template argument is bound.
	//
	// Types that are assignable to Param:
	//	*DefTemplate_ParamStr
	//	*DefTemplate_ParamInternedStr
	Param isDefTemplate_Param `protobuf_oneof:"param"`
	// Pre-condition that the template argument must satisfy.
	// When present, it has type `Bool` and the template parameter in scope.
	// *Optional*, interpreted as 'True' if undefined
	Precond *Expr `protobuf:"bytes,4,opt,name=precond,proto3" json:"precond,omitempty"`
	// The signatories of the contract. They have type `List Party` and the
	// template parameter in scope.
	Signatories *Expr `protobuf:"bytes,5,opt,name=signatories,proto3" json:"signatories,omitempty"`
	// The agreement text associated with the contract. It has type `Text` and
	// the template parameter in scope.
	Agreement *Expr `protobuf:"bytes,6,opt,name=agreement,proto3" json:"agreement,omitempty"`
	// The choices available in the resulting contract.
	Choices []*TemplateChoice `protobuf:"bytes,7,rep,name=choices,proto3" json:"choices,omitempty"`
	// The observers of the contract. They have type `List Party` and the
	// template parameter in scope.
	Observers *Expr     `protobuf:"bytes,8,opt,name=observers,proto3" json:"observers,omitempty"`
	Location  *Location `protobuf:"bytes,9,opt,name=location,proto3" json:"location,omitempty"`
	// They key definition for the template, if present
	Key *DefTemplate_DefKey `protobuf:"bytes,10,opt,name=key,proto3" json:"key,omitempty"` // optional // *Available in versions >= 1.3*
}

func (x *DefTemplate) Reset() {
	*x = DefTemplate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_daml_daml_lf_dev_daml_lf_1_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DefTemplate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DefTemplate) ProtoMessage() {}

func (x *DefTemplate) ProtoReflect() protoreflect.Message {
	mi := &file_com_daml_daml_lf_dev_daml_lf_1_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DefTemplate.ProtoReflect.Descriptor instead.
func (*DefTemplate) Descriptor() ([]byte, []int) {
	return file_com_daml_daml_lf_dev_daml_lf_1_proto_rawDescGZIP(), []int{25}
}

func (m *DefTemplate) GetTycon() isDefTemplate_Tycon {
	if m != nil {
		return m.Tycon
	}
	return nil
}

func (x *DefTemplate) GetTyconDname() *DottedName {
	if x, ok := x.GetTycon().(*DefTemplate_TyconDname); ok {
		return x.TyconDname
	}
	return nil
}

func (x *DefTemplate) GetTyconInternedDname() int32 {
	if x, ok := x.GetTycon().(*DefTemplate_TyconInternedDname); ok {
		return x.TyconInternedDname
	}
	return 0
}

func (m *DefTemplate) GetParam() isDefTemplate_Param {
	if m != nil {
		return m.Param
	}
	return nil
}

func (x *DefTemplate) GetParamStr() string {
	if x, ok := x.GetParam().(*DefTemplate_ParamStr); ok {
		return x.ParamStr
	}
	return ""
}

func (x *DefTemplate) GetParamInternedStr() int32 {
	if x, ok := x.GetParam().(*DefTemplate_ParamInternedStr); ok {
		return x.ParamInternedStr
	}
	return 0
}

func (x *DefTemplate) GetPrecond() *Expr {
	if x != nil {
		return x.Precond
	}
	return nil
}

func (x *DefTemplate) GetSignatories() *Expr {
	if x != nil {
		return x.Signatories
	}
	return nil
}

func (x *DefTemplate) GetAgreement() *Expr {
	if x != nil {
		return x.Agreement
	}
	return nil
}

func (x *DefTemplate) GetChoices() []*TemplateChoice {
	if x != nil {
		return x.Choices
	}
	return nil
}

func (x *DefTemplate) GetObservers() *Expr {
	if x != nil {
		return x.Observers
	}
	return nil
}

func (x *DefTemplate) GetLocation() *Location {
	if x != nil {
		return x.Location
	}
	return nil
}

func (x *DefTemplate) GetKey() *DefTemplate_DefKey {
	if x != nil {
		return x.Key
	}
	return nil
}

type isDefTemplate_Tycon interface {
	isDefTemplate_Tycon()
}

type DefTemplate_TyconDname struct {
	TyconDname *DottedName `protobuf:"bytes,1,opt,name=tycon_dname,json=tyconDname,proto3,oneof"`
}

type DefTemplate_TyconInternedDname struct {
	// *Must be a valid interned name*
	TyconInternedDname int32 `protobuf:"varint,12,opt,name=tycon_interned_dname,json=tyconInternedDname,proto3,oneof"` // *Available in versions >= 1.7*
}

func (*DefTemplate_TyconDname) isDefTemplate_Tycon() {}

func (*DefTemplate_TyconInternedDname) isDefTemplate_Tycon() {}

type isDefTemplate_Param interface {
	isDefTemplate_Param()
}

type DefTemplate_ParamStr struct {
	// *Must be a valid identifier*
	ParamStr string `protobuf:"bytes,2,opt,name=param_str,json=paramStr,proto3,oneof"` // *Available in version < 1.7*
}

type DefTemplate_ParamInternedStr struct {
	// *Must be a valid interned identifier*
	ParamInternedStr int32 `protobuf:"varint,11,opt,name=param_interned_str,json=paramInternedStr,proto3,oneof"` // *Available in versions >= 1.7*
}

func (*DefTemplate_ParamStr) isDefTemplate_Param() {}

func (*DefTemplate_ParamInternedStr) isDefTemplate_Param() {}

// Data type definition
type DefDataType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// name of the defined data type
	//
	// Types that are assignable to Name:
	//	*DefDataType_NameDname
	//	*DefDataType_NameInternedDname
	Name isDefDataType_Name `protobuf_oneof:"name"`
	// type parameters
	// *Must be empty if enum field is set*
	Params []*TypeVarWithKind `protobuf:"bytes,2,rep,name=params,proto3" json:"params,omitempty"`
	// Types that are assignable to DataCons:
	//	*DefDataType_Record
	//	*DefDataType_Variant
	//	*DefDataType_Enum
	DataCons isDefDataType_DataCons `protobuf_oneof:"DataCons"`
	// If true, this data type preserves serializability in the sense that when
	// all parameters are instantiated with serializable types (of kind '*'),
	// then the resulting type is serializable as well.
	// This flag is used to simplify package validation by not requiring an
	// inference but only a check. Such a check must validate that this flag is
	// set correctly and that template and choice argument and result types
	// have this flag set to true.
	Serializable bool      `protobuf:"varint,5,opt,name=serializable,proto3" json:"serializable,omitempty"`
	Location     *Location `protobuf:"bytes,6,opt,name=location,proto3" json:"location,omitempty"`
}

func (x *DefDataType) Reset() {
	*x = DefDataType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_daml_daml_lf_dev_daml_lf_1_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DefDataType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DefDataType) ProtoMessage() {}

func (x *DefDataType) ProtoReflect() protoreflect.Message {
	mi := &file_com_daml_daml_lf_dev_daml_lf_1_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DefDataType.ProtoReflect.Descriptor instead.
func (*DefDataType) Descriptor() ([]byte, []int) {
	return file_com_daml_daml_lf_dev_daml_lf_1_proto_rawDescGZIP(), []int{26}
}

func (m *DefDataType) GetName() isDefDataType_Name {
	if m != nil {
		return m.Name
	}
	return nil
}

func (x *DefDataType) GetNameDname() *DottedName {
	if x, ok := x.GetName().(*DefDataType_NameDname); ok {
		return x.NameDname
	}
	return nil
}

func (x *DefDataType) GetNameInternedDname() int32 {
	if x, ok := x.GetName().(*DefDataType_NameInternedDname); ok {
		return x.NameInternedDname
	}
	return 0
}

func (x *DefDataType) GetParams() []*TypeVarWithKind {
	if x != nil {
		return x.Params
	}
	return nil
}

func (m *DefDataType) GetDataCons() isDefDataType_DataCons {
	if m != nil {
		return m.DataCons
	}
	return nil
}

func (x *DefDataType) GetRecord() *DefDataType_Fields {
	if x, ok := x.GetDataCons().(*DefDataType_Record); ok {
		return x.Record
	}
	return nil
}

func (x *DefDataType) GetVariant() *DefDataType_Fields {
	if x, ok := x.GetDataCons().(*DefDataType_Variant); ok {
		return x.Variant
	}
	return nil
}

func (x *DefDataType) GetEnum() *DefDataType_EnumConstructors {
	if x, ok := x.GetDataCons().(*DefDataType_Enum); ok {
		return x.Enum
	}
	return nil
}

func (x *DefDataType) GetSerializable() bool {
	if x != nil {
		return x.Serializable
	}
	return false
}

func (x *DefDataType) GetLocation() *Location {
	if x != nil {
		return x.Location
	}
	return nil
}

type isDefDataType_Name interface {
	isDefDataType_Name()
}

type DefDataType_NameDname struct {
	NameDname *DottedName `protobuf:"bytes,1,opt,name=name_dname,json=nameDname,proto3,oneof"`
}

type DefDataType_NameInternedDname struct {
	// *Must be a valid interned name*
	NameInternedDname int32 `protobuf:"varint,8,opt,name=name_interned_dname,json=nameInternedDname,proto3,oneof"` // *Available in versions >= 1.7*
}

func (*DefDataType_NameDname) isDefDataType_Name() {}

func (*DefDataType_NameInternedDname) isDefDataType_Name() {}

type isDefDataType_DataCons interface {
	isDefDataType_DataCons()
}

type DefDataType_Record struct {
	Record *DefDataType_Fields `protobuf:"bytes,3,opt,name=record,proto3,oneof"` // Records without fields are explicitly allowed.
}

type DefDataType_Variant struct {
	Variant *DefDataType_Fields `protobuf:"bytes,4,opt,name=variant,proto3,oneof"` // Variants without constructors are explicitly allowed.
}

type DefDataType_Enum struct {
	Enum *DefDataType_EnumConstructors `protobuf:"bytes,7,opt,name=enum,proto3,oneof"` // *Available in versions >= 1.6*
}

func (*DefDataType_Record) isDefDataType_DataCons() {}

func (*DefDataType_Variant) isDefDataType_DataCons() {}

func (*DefDataType_Enum) isDefDataType_DataCons() {}

// Type synonym definition
// *Available in versions >= 1.8*
type DefTypeSyn struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// name of the defined type synonym
	//
	// Types that are assignable to Name:
	//	*DefTypeSyn_NameDname
	//	*DefTypeSyn_NameInternedDname
	Name isDefTypeSyn_Name `protobuf_oneof:"name"`
	// type parameters
	Params   []*TypeVarWithKind `protobuf:"bytes,2,rep,name=params,proto3" json:"params,omitempty"`
	Type     *Type              `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`
	Location *Location          `protobuf:"bytes,4,opt,name=location,proto3" json:"location,omitempty"`
}

func (x *DefTypeSyn) Reset() {
	*x = DefTypeSyn{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_daml_daml_lf_dev_daml_lf_1_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DefTypeSyn) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DefTypeSyn) ProtoMessage() {}

func (x *DefTypeSyn) ProtoReflect() protoreflect.Message {
	mi := &file_com_daml_daml_lf_dev_daml_lf_1_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DefTypeSyn.ProtoReflect.Descriptor instead.
func (*DefTypeSyn) Descriptor() ([]byte, []int) {
	return file_com_daml_daml_lf_dev_daml_lf_1_proto_rawDescGZIP(), []int{27}
}

func (m *DefTypeSyn) GetName() isDefTypeSyn_Name {
	if m != nil {
		return m.Name
	}
	return nil
}

func (x *DefTypeSyn) GetNameDname() *DottedName {
	if x, ok := x.GetName().(*DefTypeSyn_NameDname); ok {
		return x.NameDname
	}
	return nil
}

func (x *DefTypeSyn) GetNameInternedDname() int32 {
	if x, ok := x.GetName().(*DefTypeSyn_NameInternedDname); ok {
		return x.NameInternedDname
	}
	return 0
}

func (x *DefTypeSyn) GetParams() []*TypeVarWithKind {
	if x != nil {
		return x.Params
	}
	return nil
}

func (x *DefTypeSyn) GetType() *Type {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *DefTypeSyn) GetLocation() *Location {
	if x != nil {
		return x.Location
	}
	return nil
}

type isDefTypeSyn_Name interface {
	isDefTypeSyn_Name()
}

type DefTypeSyn_NameDname struct {
	NameDname *DottedName `protobuf:"bytes,1,opt,name=name_dname,json=nameDname,proto3,oneof"`
}

type DefTypeSyn_NameInternedDname struct {
	// *Must be a valid interned name*
	NameInternedDname int32 `protobuf:"varint,8,opt,name=name_interned_dname,json=nameInternedDname,proto3,oneof"`
}

func (*DefTypeSyn_NameDname) isDefTypeSyn_Name() {}

func (*DefTypeSyn_NameInternedDname) isDefTypeSyn_Name() {}

// Value definition
type DefValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NameWithType *DefValue_NameWithType `protobuf:"bytes,1,opt,name=name_with_type,json=nameWithType,proto3" json:"name_with_type,omitempty"`
	Expr         *Expr                  `protobuf:"bytes,2,opt,name=expr,proto3" json:"expr,omitempty"`
	// If true, the value must not contain any party literals and not reference
	// values which contain party literals.
	// This flag is used to simplify package validation by not requiring an
	// inference but only a check. Such a check must validate that this flag is
	// set correctly and that templates do not reference values which have this
	// flag set to false.
	NoPartyLiterals bool      `protobuf:"varint,3,opt,name=no_party_literals,json=noPartyLiterals,proto3" json:"no_party_literals,omitempty"`
	IsTest          bool      `protobuf:"varint,4,opt,name=is_test,json=isTest,proto3" json:"is_test,omitempty"`
	Location        *Location `protobuf:"bytes,5,opt,name=location,proto3" json:"location,omitempty"`
}

func (x *DefValue) Reset() {
	*x = DefValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_daml_daml_lf_dev_daml_lf_1_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DefValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DefValue) ProtoMessage() {}

func (x *DefValue) ProtoReflect() protoreflect.Message {
	mi := &file_com_daml_daml_lf_dev_daml_lf_1_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DefValue.ProtoReflect.Descriptor instead.
func (*DefValue) Descriptor() ([]byte, []int) {
	return file_com_daml_daml_lf_dev_daml_lf_1_proto_rawDescGZIP(), []int{28}
}

func (x *DefValue) GetNameWithType() *DefValue_NameWithType {
	if x != nil {
		return x.NameWithType
	}
	return nil
}

func (x *DefValue) GetExpr() *Expr {
	if x != nil {
		return x.Expr
	}
	return nil
}

func (x *DefValue) GetNoPartyLiterals() bool {
	if x != nil {
		return x.NoPartyLiterals
	}
	return false
}

func (x *DefValue) GetIsTest() bool {
	if x != nil {
		return x.IsTest
	}
	return false
}

func (x *DefValue) GetLocation() *Location {
	if x != nil {
		return x.Location
	}
	return nil
}

type FeatureFlags struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ForbidPartyLiterals                        bool `protobuf:"varint,1,opt,name=forbidPartyLiterals,proto3" json:"forbidPartyLiterals,omitempty"`
	DontDivulgeContractIdsInCreateArguments    bool `protobuf:"varint,2,opt,name=dontDivulgeContractIdsInCreateArguments,proto3" json:"dontDivulgeContractIdsInCreateArguments,omitempty"`
	DontDiscloseNonConsumingChoicesToObservers bool `protobuf:"varint,3,opt,name=dontDiscloseNonConsumingChoicesToObservers,proto3" json:"dontDiscloseNonConsumingChoicesToObservers,omitempty"`
}

func (x *FeatureFlags) Reset() {
	*x = FeatureFlags{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_daml_daml_lf_dev_daml_lf_1_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FeatureFlags) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeatureFlags) ProtoMessage() {}

func (x *FeatureFlags) ProtoReflect() protoreflect.Message {
	mi := &file_com_daml_daml_lf_dev_daml_lf_1_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeatureFlags.ProtoReflect.Descriptor instead.
func (*FeatureFlags) Descriptor() ([]byte, []int) {
	return file_com_daml_daml_lf_dev_daml_lf_1_proto_rawDescGZIP(), []int{29}
}

func (x *FeatureFlags) GetForbidPartyLiterals() bool {
	if x != nil {
		return x.ForbidPartyLiterals
	}
	return false
}

func (x *FeatureFlags) GetDontDivulgeContractIdsInCreateArguments() bool {
	if x != nil {
		return x.DontDivulgeContractIdsInCreateArguments
	}
	return false
}

func (x *FeatureFlags) GetDontDiscloseNonConsumingChoicesToObservers() bool {
	if x != nil {
		return x.DontDiscloseNonConsumingChoicesToObservers
	}
	return false
}

type Module struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Name:
	//	*Module_NameDname
	//	*Module_NameInternedDname
	Name      isModule_Name  `protobuf_oneof:"name"`
	Flags     *FeatureFlags  `protobuf:"bytes,4,opt,name=flags,proto3" json:"flags,omitempty"`
	Synonyms  []*DefTypeSyn  `protobuf:"bytes,9,rep,name=synonyms,proto3" json:"synonyms,omitempty"` // *Available in versions >= 1.8*
	DataTypes []*DefDataType `protobuf:"bytes,5,rep,name=data_types,json=dataTypes,proto3" json:"data_types,omitempty"`
	Values    []*DefValue    `protobuf:"bytes,6,rep,name=values,proto3" json:"values,omitempty"`
	Templates []*DefTemplate `protobuf:"bytes,7,rep,name=templates,proto3" json:"templates,omitempty"`
}

func (x *Module) Reset() {
	*x = Module{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_daml_daml_lf_dev_daml_lf_1_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Module) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Module) ProtoMessage() {}

func (x *Module) ProtoReflect() protoreflect.Message {
	mi := &file_com_daml_daml_lf_dev_daml_lf_1_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Module.ProtoReflect.Descriptor instead.
func (*Module) Descriptor() ([]byte, []int) {
	return file_com_daml_daml_lf_dev_daml_lf_1_proto_rawDescGZIP(), []int{30}
}

func (m *Module) GetName() isModule_Name {
	if m != nil {
		return m.Name
	}
	return nil
}

func (x *Module) GetNameDname() *DottedName {
	if x, ok := x.GetName().(*Module_NameDname); ok {
		return x.NameDname
	}
	return nil
}

func (x *Module) GetNameInternedDname() int32 {
	if x, ok := x.GetName().(*Module_NameInternedDname); ok {
		return x.NameInternedDname
	}
	return 0
}

func (x *Module) GetFlags() *FeatureFlags {
	if x != nil {
		return x.Flags
	}
	return nil
}

func (x *Module) GetSynonyms() []*DefTypeSyn {
	if x != nil {
		return x.Synonyms
	}
	return nil
}

func (x *Module) GetDataTypes() []*DefDataType {
	if x != nil {
		return x.DataTypes
	}
	return nil
}

func (x *Module) GetValues() []*DefValue {
	if x != nil {
		return x.Values
	}
	return nil
}

func (x *Module) GetTemplates() []*DefTemplate {
	if x != nil {
		return x.Templates
	}
	return nil
}

type isModule_Name interface {
	isModule_Name()
}

type Module_NameDname struct {
	NameDname *DottedName `protobuf:"bytes,1,opt,name=name_dname,json=nameDname,proto3,oneof"`
}

type Module_NameInternedDname struct {
	NameInternedDname int32 `protobuf:"varint,8,opt,name=name_interned_dname,json=nameInternedDname,proto3,oneof"` // *Available in versions >= 1.7*
}

func (*Module_NameDname) isModule_Name() {}

func (*Module_NameInternedDname) isModule_Name() {}

type InternedDottedName struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SegmentsInternedStr []int32 `protobuf:"varint,1,rep,packed,name=segments_interned_str,json=segmentsInternedStr,proto3" json:"segments_interned_str,omitempty"` // *Available in versions >= 1.7*
}

func (x *InternedDottedName) Reset() {
	*x = InternedDottedName{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_daml_daml_lf_dev_daml_lf_1_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InternedDottedName) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InternedDottedName) ProtoMessage() {}

func (x *InternedDottedName) ProtoReflect() protoreflect.Message {
	mi := &file_com_daml_daml_lf_dev_daml_lf_1_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InternedDottedName.ProtoReflect.Descriptor instead.
func (*InternedDottedName) Descriptor() ([]byte, []int) {
	return file_com_daml_daml_lf_dev_daml_lf_1_proto_rawDescGZIP(), []int{31}
}

func (x *InternedDottedName) GetSegmentsInternedStr() []int32 {
	if x != nil {
		return x.SegmentsInternedStr
	}
	return nil
}

type PackageMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NameInternedStr    int32 `protobuf:"varint,1,opt,name=name_interned_str,json=nameInternedStr,proto3" json:"name_interned_str,omitempty"`          // *Available in versions >= 1.8*
	VersionInternedStr int32 `protobuf:"varint,2,opt,name=version_interned_str,json=versionInternedStr,proto3" json:"version_interned_str,omitempty"` // *Available in versions >= 1.8*
}

func (x *PackageMetadata) Reset() {
	*x = PackageMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_daml_daml_lf_dev_daml_lf_1_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PackageMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PackageMetadata) ProtoMessage() {}

func (x *PackageMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_com_daml_daml_lf_dev_daml_lf_1_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PackageMetadata.ProtoReflect.Descriptor instead.
func (*PackageMetadata) Descriptor() ([]byte, []int) {
	return file_com_daml_daml_lf_dev_daml_lf_1_proto_rawDescGZIP(), []int{32}
}

func (x *PackageMetadata) GetNameInternedStr() int32 {
	if x != nil {
		return x.NameInternedStr
	}
	return 0
}

func (x *PackageMetadata) GetVersionInternedStr() int32 {
	if x != nil {
		return x.VersionInternedStr
	}
	return 0
}

type Package struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Modules             []*Module             `protobuf:"bytes,1,rep,name=modules,proto3" json:"modules,omitempty"`
	InternedStrings     []string              `protobuf:"bytes,2,rep,name=interned_strings,json=internedStrings,proto3" json:"interned_strings,omitempty"`               // *Available in versions >= 1.6*
	InternedDottedNames []*InternedDottedName `protobuf:"bytes,3,rep,name=interned_dotted_names,json=internedDottedNames,proto3" json:"interned_dotted_names,omitempty"` // *Available in versions >= 1.7*
	Metadata            *PackageMetadata      `protobuf:"bytes,4,opt,name=metadata,proto3" json:"metadata,omitempty"`                                                    // *Available and required in versions >= 1.8*
}

func (x *Package) Reset() {
	*x = Package{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_daml_daml_lf_dev_daml_lf_1_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Package) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Package) ProtoMessage() {}

func (x *Package) ProtoReflect() protoreflect.Message {
	mi := &file_com_daml_daml_lf_dev_daml_lf_1_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Package.ProtoReflect.Descriptor instead.
func (*Package) Descriptor() ([]byte, []int) {
	return file_com_daml_daml_lf_dev_daml_lf_1_proto_rawDescGZIP(), []int{33}
}

func (x *Package) GetModules() []*Module {
	if x != nil {
		return x.Modules
	}
	return nil
}

func (x *Package) GetInternedStrings() []string {
	if x != nil {
		return x.InternedStrings
	}
	return nil
}

func (x *Package) GetInternedDottedNames() []*InternedDottedName {
	if x != nil {
		return x.InternedDottedNames
	}
	return nil
}

func (x *Package) GetMetadata() *PackageMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

// The kind of polimorphic type.
type Kind_Arrow struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// parameter of the kind
	// *Must be non-empty*
	Params []*Kind `protobuf:"bytes,1,rep,name=params,proto3" json:"params,omitempty"`
	Result *Kind   `protobuf:"bytes,2,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *Kind_Arrow) Reset() {
	*x = Kind_Arrow{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_daml_daml_lf_dev_daml_lf_1_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Kind_Arrow) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Kind_Arrow) ProtoMessage() {}

func (x *Kind_Arrow) ProtoReflect() protoreflect.Message {
	mi := &file_com_daml_daml_lf_dev_daml_lf_1_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Kind_Arrow.ProtoReflect.Descriptor instead.
func (*Kind_Arrow) Descriptor() ([]byte, []int) {
	return file_com_daml_daml_lf_dev_daml_lf_1_proto_rawDescGZIP(), []int{12, 0}
}

func (x *Kind_Arrow) GetParams() []*Kind {
	if x != nil {
		return x.Params
	}
	return nil
}

func (x *Kind_Arrow) GetResult() *Kind {
	if x != nil {
		return x.Result
	}
	return nil
}

// Possibly applied type variable 'TyVar'
type Type_Var struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of the variable.
	//
	// Types that are assignable to Var:
	//	*Type_Var_VarStr
	//	*Type_Var_VarInternedStr
	Var isType_Var_Var `protobuf_oneof:"var"`
	// Types to which the variable is applied
	Args []*Type `protobuf:"bytes,2,rep,name=args,proto3" json:"args,omitempty"`
}

func (x *Type_Var) Reset() {
	*x = Type_Var{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_daml_daml_lf_dev_daml_lf_1_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Type_Var) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Type_Var) ProtoMessage() {}

func (x *Type_Var) ProtoReflect() protoreflect.Message {
	mi := &file_com_daml_daml_lf_dev_daml_lf_1_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Type_Var.ProtoReflect.Descriptor instead.
func (*Type_Var) Descriptor() ([]byte, []int) {
	return file_com_daml_daml_lf_dev_daml_lf_1_proto_rawDescGZIP(), []int{13, 0}
}

func (m *Type_Var) GetVar() isType_Var_Var {
	if m != nil {
		return m.Var
	}
	return nil
}

func (x *Type_Var) GetVarStr() string {
	if x, ok := x.GetVar().(*Type_Var_VarStr); ok {
		return x.VarStr
	}
	return ""
}

func (x *Type_Var) GetVarInternedStr() int32 {
	if x, ok := x.GetVar().(*Type_Var_VarInternedStr); ok {
		return x.VarInternedStr
	}
	return 0
}

func (x *Type_Var) GetArgs() []*Type {
	if x != nil {
		return x.Args
	}
	return nil
}

type isType_Var_Var interface {
	isType_Var_Var()
}

type Type_Var_VarStr struct {
	// *Must be a valid identifier*
	VarStr string `protobuf:"bytes,1,opt,name=var_str,json=varStr,proto3,oneof"` // *Available in version < 1.7*
}

type Type_Var_VarInternedStr struct {
	// *Must be a valid interned identifier*
	VarInternedStr int32 `protobuf:"varint,3,opt,name=var_interned_str,json=varInternedStr,proto3,oneof"` // *Available in versions >= 1.7*
}

func (*Type_Var_VarStr) isType_Var_Var() {}

func (*Type_Var_VarInternedStr) isType_Var_Var() {}

// Possibly applied type constructor 'TyCon'
type Type_Con struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of the type constructor name
	Tycon *TypeConName `protobuf:"bytes,1,opt,name=tycon,proto3" json:"tycon,omitempty"`
	// Type to which the constructor name is applied.
	Args []*Type `protobuf:"bytes,2,rep,name=args,proto3" json:"args,omitempty"`
}

func (x *Type_Con) Reset() {
	*x = Type_Con{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_daml_daml_lf_dev_daml_lf_1_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Type_Con) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Type_Con) ProtoMessage() {}

func (x *Type_Con) ProtoReflect() protoreflect.Message {
	mi := &file_com_daml_daml_lf_dev_daml_lf_1_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Type_Con.ProtoReflect.Descriptor instead.
func (*Type_Con) Descriptor() ([]byte, []int) {
	return file_com_daml_daml_lf_dev_daml_lf_1_proto_rawDescGZIP(), []int{13, 1}
}

func (x *Type_Con) GetTycon() *TypeConName {
	if x != nil {
		return x.Tycon
	}
	return nil
}

func (x *Type_Con) GetArgs() []*Type {
	if x != nil {
		return x.Args
	}
	return nil
}

// Fully applied type constructor 'TySyn'
// *Available in versions >= 1.8*
type Type_Syn struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of the type synonym
	Tysyn *TypeSynName `protobuf:"bytes,1,opt,name=tysyn,proto3" json:"tysyn,omitempty"`
	// Types to which the synonym is applied.
	Args []*Type `protobuf:"bytes,2,rep,name=args,proto3" json:"args,omitempty"`
}

func (x *Type_Syn) Reset() {
	*x = Type_Syn{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_daml_daml_lf_dev_daml_lf_1_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Type_Syn) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Type_Syn) ProtoMessage() {}

func (x *Type_Syn) ProtoReflect() protoreflect.Message {
	mi := &file_com_daml_daml_lf_dev_daml_lf_1_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Type_Syn.ProtoReflect.Descriptor instead.
func (*Type_Syn) Descriptor() ([]byte, []int) {
	return file_com_daml_daml_lf_dev_daml_lf_1_proto_rawDescGZIP(), []int{13, 2}
}

func (x *Type_Syn) GetTysyn() *TypeSynName {
	if x != nil {
		return x.Tysyn
	}
	return nil
}

func (x *Type_Syn) GetArgs() []*Type {
	if x != nil {
		return x.Args
	}
	return nil
}

// Possibly applied builtin types
type Type_Prim struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Builtin type
	// FixMe: Rename
	Prim PrimType `protobuf:"varint,1,opt,name=prim,proto3,enum=daml_lf_1.PrimType" json:"prim,omitempty"`
	// Types to which the builtin type is applied.
	Args []*Type `protobuf:"bytes,2,rep,name=args,proto3" json:"args,omitempty"`
}

func (x *Type_Prim) Reset() {
	*x = Type_Prim{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_daml_daml_lf_dev_daml_lf_1_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Type_Prim) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Type_Prim) ProtoMessage() {}

func (x *Type_Prim) ProtoReflect() protoreflect.Message {
	mi := &file_com_daml_daml_lf_dev_daml_lf_1_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Type_Prim.ProtoReflect.Descriptor instead.
func (*Type_Prim) Descriptor() ([]byte, []int) {
	return file_com_daml_daml_lf_dev_daml_lf_1_proto_rawDescGZIP(), []int{13, 3}
}

func (x *Type_Prim) GetPrim() PrimType {
	if x != nil {
		return x.Prim
	}
	return PrimType_UNIT
}

func (x *Type_Prim) GetArgs() []*Type {
	if x != nil {
		return x.Args
	}
	return nil
}

// n-ary function type
// *Available in versions < 1.2*
type Type_Fun struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// type of the arguments
	// *Must be non-empty*
	Params []*Type `protobuf:"bytes,1,rep,name=params,proto3" json:"params,omitempty"`
	// type of the result
	Result *Type `protobuf:"bytes,2,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *Type_Fun) Reset() {
	*x = Type_Fun{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_daml_daml_lf_dev_daml_lf_1_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Type_Fun) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Type_Fun) ProtoMessage() {}

func (x *Type_Fun) ProtoReflect() protoreflect.Message {
	mi := &file_com_daml_daml_lf_dev_daml_lf_1_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Type_Fun.ProtoReflect.Descriptor instead.
func (*Type_Fun) Descriptor() ([]byte, []int) {
	return file_com_daml_daml_lf_dev_daml_lf_1_proto_rawDescGZIP(), []int{13, 4}
}

func (x *Type_Fun) GetParams() []*Type {
	if x != nil {
		return x.Params
	}
	return nil
}

func (x *Type_Fun) GetResult() *Type {
	if x != nil {
		return x.Result
	}
	return nil
}

// Universal quantification 'TyForAll'
type Type_Forall struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// binders of the quantification
	// *Must be non-empty*
	Vars []*TypeVarWithKind `protobuf:"bytes,1,rep,name=vars,proto3" json:"vars,omitempty"`
	// Body of the quantification
	Body *Type `protobuf:"bytes,2,opt,name=body,proto3" json:"body,omitempty"`
}

func (x *Type_Forall) Reset() {
	*x = Type_Forall{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_daml_daml_lf_dev_daml_lf_1_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Type_Forall) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Type_Forall) ProtoMessage() {}

func (x *Type_Forall) ProtoReflect() protoreflect.Message {
	mi := &file_com_daml_daml_lf_dev_daml_lf_1_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Type_Forall.ProtoReflect.Descriptor instead.
func (*Type_Forall) Descriptor() ([]byte, []int) {
	return file_com_daml_daml_lf_dev_daml_lf_1_proto_rawDescGZIP(), []int{13, 5}
}

func (x *Type_Forall) GetVars() []*TypeVarWithKind {
	if x != nil {
		return x.Vars
	}
	return nil
}

func (x *Type_Forall) GetBody() *Type {
	if x != nil {
		return x.Body
	}
	return nil
}

// Struct type
type Type_Struct struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// name of the field with their types.
	Fields []*FieldWithType `protobuf:"bytes,1,rep,name=fields,proto3" json:"fields,omitempty"`
}

func (x *Type_Struct) Reset() {
	*x = Type_Struct{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_daml_daml_lf_dev_daml_lf_1_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Type_Struct) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Type_Struct) ProtoMessage() {}

func (x *Type_Struct) ProtoReflect() protoreflect.Message {
	mi := &file_com_daml_daml_lf_dev_daml_lf_1_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Type_Struct.ProtoReflect.Descriptor instead.
func (*Type_Struct) Descriptor() ([]byte, []int) {
	return file_com_daml_daml_lf_dev_daml_lf_1_proto_rawDescGZIP(), []int{13, 6}
}

func (x *Type_Struct) GetFields() []*FieldWithType {
	if x != nil {
		return x.Fields
	}
	return nil
}

// 0-indexed start and end line and column numbers.
type Location_Range struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartLine int32 `protobuf:"varint,1,opt,name=start_line,json=startLine,proto3" json:"start_line,omitempty"`
	StartCol  int32 `protobuf:"varint,2,opt,name=start_col,json=startCol,proto3" json:"start_col,omitempty"`
	EndLine   int32 `protobuf:"varint,3,opt,name=end_line,json=endLine,proto3" json:"end_line,omitempty"`
	EndCol    int32 `protobuf:"varint,4,opt,name=end_col,json=endCol,proto3" json:"end_col,omitempty"`
}

func (x *Location_Range) Reset() {
	*x = Location_Range{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_daml_daml_lf_dev_daml_lf_1_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Location_Range) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Location_Range) ProtoMessage() {}

func (x *Location_Range) ProtoReflect() protoreflect.Message {
	mi := &file_com_daml_daml_lf_dev_daml_lf_1_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Location_Range.ProtoReflect.Descriptor instead.
func (*Location_Range) Descriptor() ([]byte, []int) {
	return file_com_daml_daml_lf_dev_daml_lf_1_proto_rawDescGZIP(), []int{15, 0}
}

func (x *Location_Range) GetStartLine() int32 {
	if x != nil {
		return x.StartLine
	}
	return 0
}

func (x *Location_Range) GetStartCol() int32 {
	if x != nil {
		return x.StartCol
	}
	return 0
}

func (x *Location_Range) GetEndLine() int32 {
	if x != nil {
		return x.EndLine
	}
	return 0
}

func (x *Location_Range) GetEndCol() int32 {
	if x != nil {
		return x.EndCol
	}
	return 0
}

// Record construction ('ExpRecCon')
type Expr_RecCon struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// type of the record being constructed
	Tycon *Type_Con `protobuf:"bytes,1,opt,name=tycon,proto3" json:"tycon,omitempty"`
	// Field names and the associated values.
	Fields []*FieldWithExpr `protobuf:"bytes,2,rep,name=fields,proto3" json:"fields,omitempty"`
}

func (x *Expr_RecCon) Reset() {
	*x = Expr_RecCon{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_daml_daml_lf_dev_daml_lf_1_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Expr_RecCon) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Expr_RecCon) ProtoMessage() {}

func (x *Expr_RecCon) ProtoReflect() protoreflect.Message {
	mi := &file_com_daml_daml_lf_dev_daml_lf_1_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Expr_RecCon.ProtoReflect.Descriptor instead.
func (*Expr_RecCon) Descriptor() ([]byte, []int) {
	return file_com_daml_daml_lf_dev_daml_lf_1_proto_rawDescGZIP(), []int{16, 0}
}

func (x *Expr_RecCon) GetTycon() *Type_Con {
	if x != nil {
		return x.Tycon
	}
	return nil
}

func (x *Expr_RecCon) GetFields() []*FieldWithExpr {
	if x != nil {
		return x.Fields
	}
	return nil
}

// Record projection (ExpRecProj)
type Expr_RecProj struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// type of the record being projected.
	Tycon *Type_Con `protobuf:"bytes,1,opt,name=tycon,proto3" json:"tycon,omitempty"`
	// Name of the record field to be projected on.
	//
	// Types that are assignable to Field:
	//	*Expr_RecProj_FieldStr
	//	*Expr_RecProj_FieldInternedStr
	Field isExpr_RecProj_Field `protobuf_oneof:"field"`
	// projected expression
	Record *Expr `protobuf:"bytes,3,opt,name=record,proto3" json:"record,omitempty"`
}

func (x *Expr_RecProj) Reset() {
	*x = Expr_RecProj{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_daml_daml_lf_dev_daml_lf_1_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Expr_RecProj) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Expr_RecProj) ProtoMessage() {}

func (x *Expr_RecProj) ProtoReflect() protoreflect.Message {
	mi := &file_com_daml_daml_lf_dev_daml_lf_1_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Expr_RecProj.ProtoReflect.Descriptor instead.
func (*Expr_RecProj) Descriptor() ([]byte, []int) {
	return file_com_daml_daml_lf_dev_daml_lf_1_proto_rawDescGZIP(), []int{16, 1}
}

func (x *Expr_RecProj) GetTycon() *Type_Con {
	if x != nil {
		return x.Tycon
	}
	return nil
}

func (m *Expr_RecProj) GetField() isExpr_RecProj_Field {
	if m != nil {
		return m.Field
	}
	return nil
}

func (x *Expr_RecProj) GetFieldStr() string {
	if x, ok := x.GetField().(*Expr_RecProj_FieldStr); ok {
		return x.FieldStr
	}
	return ""
}

func (x *Expr_RecProj) GetFieldInternedStr() int32 {
	if x, ok := x.GetField().(*Expr_RecProj_FieldInternedStr); ok {
		return x.FieldInternedStr
	}
	return 0
}

func (x *Expr_RecProj) GetRecord() *Expr {
	if x != nil {
		return x.Record
	}
	return nil
}

type isExpr_RecProj_Field interface {
	isExpr_RecProj_Field()
}

type Expr_RecProj_FieldStr struct {
	// *Must be a valid identifier*
	FieldStr string `protobuf:"bytes,2,opt,name=field_str,json=fieldStr,proto3,oneof"` // *Available in version < 1.7*
}

type Expr_RecProj_FieldInternedStr struct {
	// *Must be a valid interned identifier*
	FieldInternedStr int32 `protobuf:"varint,4,opt,name=field_interned_str,json=fieldInternedStr,proto3,oneof"` // *Available in versions >= 1.7*
}

func (*Expr_RecProj_FieldStr) isExpr_RecProj_Field() {}

func (*Expr_RecProj_FieldInternedStr) isExpr_RecProj_Field() {}

// Record update ('ExpRecUp')
type Expr_RecUpd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// type of the record being updated
	Tycon *Type_Con `protobuf:"bytes,1,opt,name=tycon,proto3" json:"tycon,omitempty"`
	// Name of the updated field.
	//
	// Types that are assignable to Field:
	//	*Expr_RecUpd_FieldStr
	//	*Expr_RecUpd_FieldInternedStr
	Field isExpr_RecUpd_Field `protobuf_oneof:"field"`
	// Actual record being updated
	Record *Expr `protobuf:"bytes,3,opt,name=record,proto3" json:"record,omitempty"`
	// Value to wich the record is udpated
	Update *Expr `protobuf:"bytes,4,opt,name=update,proto3" json:"update,omitempty"`
}

func (x *Expr_RecUpd) Reset() {
	*x = Expr_RecUpd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_daml_daml_lf_dev_daml_lf_1_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Expr_RecUpd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Expr_RecUpd) ProtoMessage() {}

func (x *Expr_RecUpd) ProtoReflect() protoreflect.Message {
	mi := &file_com_daml_daml_lf_dev_daml_lf_1_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Expr_RecUpd.ProtoReflect.Descriptor instead.
func (*Expr_RecUpd) Descriptor() ([]byte, []int) {
	return file_com_daml_daml_lf_dev_daml_lf_1_proto_rawDescGZIP(), []int{16, 2}
}

func (x *Expr_RecUpd) GetTycon() *Type_Con {
	if x != nil {
		return x.Tycon
	}
	return nil
}

func (m *Expr_RecUpd) GetField() isExpr_RecUpd_Field {
	if m != nil {
		return m.Field
	}
	return nil
}

func (x *Expr_RecUpd) GetFieldStr() string {
	if x, ok := x.GetField().(*Expr_RecUpd_FieldStr); ok {
		return x.FieldStr
	}
	return ""
}

func (x *Expr_RecUpd) GetFieldInternedStr() int32 {
	if x, ok := x.GetField().(*Expr_RecUpd_FieldInternedStr); ok {
		return x.FieldInternedStr
	}
	return 0
}

func (x *Expr_RecUpd) GetRecord() *Expr {
	if x != nil {
		return x.Record
	}
	return nil
}

func (x *Expr_RecUpd) GetUpdate() *Expr {
	if x != nil {
		return x.Update
	}
	return nil
}

type isExpr_RecUpd_Field interface {
	isExpr_RecUpd_Field()
}

type Expr_RecUpd_FieldStr struct {
	// *Must be a valid identifier*
	FieldStr string `protobuf:"bytes,2,opt,name=field_str,json=fieldStr,proto3,oneof"` // *Available in version < 1.7*
}

type Expr_RecUpd_FieldInternedStr struct {
	// *Must be a valid interned identifier*
	FieldInternedStr int32 `protobuf:"varint,5,opt,name=field_interned_str,json=fieldInternedStr,proto3,oneof"` // *Available in versions >= 1.7*
}

func (*Expr_RecUpd_FieldStr) isExpr_RecUpd_Field() {}

func (*Expr_RecUpd_FieldInternedStr) isExpr_RecUpd_Field() {}

// Variant construction ('ExpVariantCon')
type Expr_VariantCon struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// type of the variant being constructed
	Tycon *Type_Con `protobuf:"bytes,1,opt,name=tycon,proto3" json:"tycon,omitempty"`
	// name of the variant constructor
	//
	// Types that are assignable to VariantCon:
	//	*Expr_VariantCon_VariantConStr
	//	*Expr_VariantCon_VariantConInternedStr
	VariantCon isExpr_VariantCon_VariantCon `protobuf_oneof:"variant_con"`
	// Argument of the variant.
	VariantArg *Expr `protobuf:"bytes,3,opt,name=variant_arg,json=variantArg,proto3" json:"variant_arg,omitempty"`
}

func (x *Expr_VariantCon) Reset() {
	*x = Expr_VariantCon{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_daml_daml_lf_dev_daml_lf_1_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Expr_VariantCon) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Expr_VariantCon) ProtoMessage() {}

func (x *Expr_VariantCon) ProtoReflect() protoreflect.Message {
	mi := &file_com_daml_daml_lf_dev_daml_lf_1_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Expr_VariantCon.ProtoReflect.Descriptor instead.
func (*Expr_VariantCon) Descriptor() ([]byte, []int) {
	return file_com_daml_daml_lf_dev_daml_lf_1_proto_rawDescGZIP(), []int{16, 3}
}

func (x *Expr_VariantCon) GetTycon() *Type_Con {
	if x != nil {
		return x.Tycon
	}
	return nil
}

func (m *Expr_VariantCon) GetVariantCon() isExpr_VariantCon_VariantCon {
	if m != nil {
		return m.VariantCon
	}
	return nil
}

func (x *Expr_VariantCon) GetVariantConStr() string {
	if x, ok := x.GetVariantCon().(*Expr_VariantCon_VariantConStr); ok {
		return x.VariantConStr
	}
	return ""
}

func (x *Expr_VariantCon) GetVariantConInternedStr() int32 {
	if x, ok := x.GetVariantCon().(*Expr_VariantCon_VariantConInternedStr); ok {
		return x.VariantConInternedStr
	}
	return 0
}

func (x *Expr_VariantCon) GetVariantArg() *Expr {
	if x != nil {
		return x.VariantArg
	}
	return nil
}

type isExpr_VariantCon_VariantCon interface {
	isExpr_VariantCon_VariantCon()
}

type Expr_VariantCon_VariantConStr struct {
	// *Must be a valid identifier*
	VariantConStr string `protobuf:"bytes,2,opt,name=variant_con_str,json=variantConStr,proto3,oneof"` // *Available in version < 1.7*
}

type Expr_VariantCon_VariantConInternedStr struct {
	// *Must be a valid interned identifier*
	VariantConInternedStr int32 `protobuf:"varint,4,opt,name=variant_con_interned_str,json=variantConInternedStr,proto3,oneof"` // *Available in versions >= 1.7*
}

func (*Expr_VariantCon_VariantConStr) isExpr_VariantCon_VariantCon() {}

func (*Expr_VariantCon_VariantConInternedStr) isExpr_VariantCon_VariantCon() {}

// Enum construction ('ExpEnumCon')
// *Available in versions >= 1.6*
type Expr_EnumCon struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of the type constructor name
	Tycon *TypeConName `protobuf:"bytes,1,opt,name=tycon,proto3" json:"tycon,omitempty"`
	// name of the enum constructor
	//
	// Types that are assignable to EnumCon:
	//	*Expr_EnumCon_EnumConStr
	//	*Expr_EnumCon_EnumConInternedStr
	EnumCon isExpr_EnumCon_EnumCon `protobuf_oneof:"enum_con"`
}

func (x *Expr_EnumCon) Reset() {
	*x = Expr_EnumCon{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_daml_daml_lf_dev_daml_lf_1_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Expr_EnumCon) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Expr_EnumCon) ProtoMessage() {}

func (x *Expr_EnumCon) ProtoReflect() protoreflect.Message {
	mi := &file_com_daml_daml_lf_dev_daml_lf_1_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Expr_EnumCon.ProtoReflect.Descriptor instead.
func (*Expr_EnumCon) Descriptor() ([]byte, []int) {
	return file_com_daml_daml_lf_dev_daml_lf_1_proto_rawDescGZIP(), []int{16, 4}
}

func (x *Expr_EnumCon) GetTycon() *TypeConName {
	if x != nil {
		return x.Tycon
	}
	return nil
}

func (m *Expr_EnumCon) GetEnumCon() isExpr_EnumCon_EnumCon {
	if m != nil {
		return m.EnumCon
	}
	return nil
}

func (x *Expr_EnumCon) GetEnumConStr() string {
	if x, ok := x.GetEnumCon().(*Expr_EnumCon_EnumConStr); ok {
		return x.EnumConStr
	}
	return ""
}

func (x *Expr_EnumCon) GetEnumConInternedStr() int32 {
	if x, ok := x.GetEnumCon().(*Expr_EnumCon_EnumConInternedStr); ok {
		return x.EnumConInternedStr
	}
	return 0
}

type isExpr_EnumCon_EnumCon interface {
	isExpr_EnumCon_EnumCon()
}

type Expr_EnumCon_EnumConStr struct {
	// *Must be a valid identifier*
	EnumConStr string `protobuf:"bytes,2,opt,name=enum_con_str,json=enumConStr,proto3,oneof"` // *Available in version < 1.7*
}

type Expr_EnumCon_EnumConInternedStr struct {
	// *Must be a valid interned identifier*
	EnumConInternedStr int32 `protobuf:"varint,3,opt,name=enum_con_interned_str,json=enumConInternedStr,proto3,oneof"` // *Available in versions >= 1.7*
}

func (*Expr_EnumCon_EnumConStr) isExpr_EnumCon_EnumCon() {}

func (*Expr_EnumCon_EnumConInternedStr) isExpr_EnumCon_EnumCon() {}

// Struct Construction ('ExpStructCon')
type Expr_StructCon struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Field names and their associated values.
	Fields []*FieldWithExpr `protobuf:"bytes,1,rep,name=fields,proto3" json:"fields,omitempty"`
}

func (x *Expr_StructCon) Reset() {
	*x = Expr_StructCon{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_daml_daml_lf_dev_daml_lf_1_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Expr_StructCon) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Expr_StructCon) ProtoMessage() {}

func (x *Expr_StructCon) ProtoReflect() protoreflect.Message {
	mi := &file_com_daml_daml_lf_dev_daml_lf_1_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Expr_StructCon.ProtoReflect.Descriptor instead.
func (*Expr_StructCon) Descriptor() ([]byte, []int) {
	return file_com_daml_daml_lf_dev_daml_lf_1_proto_rawDescGZIP(), []int{16, 5}
}

func (x *Expr_StructCon) GetFields() []*FieldWithExpr {
	if x != nil {
		return x.Fields
	}
	return nil
}

// Struct Projection ('ExpStructProj')
type Expr_StructProj struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of the field to be projected on.
	//
	// Types that are assignable to Field:
	//	*Expr_StructProj_FieldStr
	//	*Expr_StructProj_FieldInternedStr
	Field isExpr_StructProj_Field `protobuf_oneof:"field"`
	// struct to be projected.
	Struct *Expr `protobuf:"bytes,2,opt,name=struct,proto3" json:"struct,omitempty"`
}

func (x *Expr_StructProj) Reset() {
	*x = Expr_StructProj{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_daml_daml_lf_dev_daml_lf_1_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Expr_StructProj) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Expr_StructProj) ProtoMessage() {}

func (x *Expr_StructProj) ProtoReflect() protoreflect.Message {
	mi := &file_com_daml_daml_lf_dev_daml_lf_1_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Expr_StructProj.ProtoReflect.Descriptor instead.
func (*Expr_StructProj) Descriptor() ([]byte, []int) {
	return file_com_daml_daml_lf_dev_daml_lf_1_proto_rawDescGZIP(), []int{16, 6}
}

func (m *Expr_StructProj) GetField() isExpr_StructProj_Field {
	if m != nil {
		return m.Field
	}
	return nil
}

func (x *Expr_StructProj) GetFieldStr() string {
	if x, ok := x.GetField().(*Expr_StructProj_FieldStr); ok {
		return x.FieldStr
	}
	return ""
}

func (x *Expr_StructProj) GetFieldInternedStr() int32 {
	if x, ok := x.GetField().(*Expr_StructProj_FieldInternedStr); ok {
		return x.FieldInternedStr
	}
	return 0
}

func (x *Expr_StructProj) GetStruct() *Expr {
	if x != nil {
		return x.Struct
	}
	return nil
}

type isExpr_StructProj_Field interface {
	isExpr_StructProj_Field()
}

type Expr_StructProj_FieldStr struct {
	// *Must be a valid Identifier*
	FieldStr string `protobuf:"bytes,1,opt,name=field_str,json=fieldStr,proto3,oneof"` // *Available in version < 1.7*
}

type Expr_StructProj_FieldInternedStr struct {
	// *Must be a valid interned identifier*
	FieldInternedStr int32 `protobuf:"varint,3,opt,name=field_interned_str,json=fieldInternedStr,proto3,oneof"` // *Available in versions >= 1.7*
}

func (*Expr_StructProj_FieldStr) isExpr_StructProj_Field() {}

func (*Expr_StructProj_FieldInternedStr) isExpr_StructProj_Field() {}

// Struct update ('ExpTuplUpdate')
type Expr_StructUpd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of the updated field.
	//
	// Types that are assignable to Field:
	//	*Expr_StructUpd_FieldStr
	//	*Expr_StructUpd_FieldInternedStr
	Field isExpr_StructUpd_Field `protobuf_oneof:"field"`
	// Actual struct being updated.
	Struct *Expr `protobuf:"bytes,2,opt,name=struct,proto3" json:"struct,omitempty"`
	// Value to which the record is udpated.
	Update *Expr `protobuf:"bytes,3,opt,name=update,proto3" json:"update,omitempty"`
}

func (x *Expr_StructUpd) Reset() {
	*x = Expr_StructUpd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_daml_daml_lf_dev_daml_lf_1_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Expr_StructUpd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Expr_StructUpd) ProtoMessage() {}

func (x *Expr_StructUpd) ProtoReflect() protoreflect.Message {
	mi := &file_com_daml_daml_lf_dev_daml_lf_1_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Expr_StructUpd.ProtoReflect.Descriptor instead.
func (*Expr_StructUpd) Descriptor() ([]byte, []int) {
	return file_com_daml_daml_lf_dev_daml_lf_1_proto_rawDescGZIP(), []int{16, 7}
}

func (m *Expr_StructUpd) GetField() isExpr_StructUpd_Field {
	if m != nil {
		return m.Field
	}
	return nil
}

func (x *Expr_StructUpd) GetFieldStr() string {
	if x, ok := x.GetField().(*Expr_StructUpd_FieldStr); ok {
		return x.FieldStr
	}
	return ""
}

func (x *Expr_StructUpd) GetFieldInternedStr() int32 {
	if x, ok := x.GetField().(*Expr_StructUpd_FieldInternedStr); ok {
		return x.FieldInternedStr
	}
	return 0
}

func (x *Expr_StructUpd) GetStruct() *Expr {
	if x != nil {
		return x.Struct
	}
	return nil
}

func (x *Expr_StructUpd) GetUpdate() *Expr {
	if x != nil {
		return x.Update
	}
	return nil
}

type isExpr_StructUpd_Field interface {
	isExpr_StructUpd_Field()
}

type Expr_StructUpd_FieldStr struct {
	// *Must be a valid identifier*.
	FieldStr string `protobuf:"bytes,1,opt,name=field_str,json=fieldStr,proto3,oneof"` // *Available in version < 1.7*
}

type Expr_StructUpd_FieldInternedStr struct {
	// *Must be a valid interned identifier*
	FieldInternedStr int32 `protobuf:"varint,4,opt,name=field_interned_str,json=fieldInternedStr,proto3,oneof"` // *Available in versions >= 1.7*
}

func (*Expr_StructUpd_FieldStr) isExpr_StructUpd_Field() {}

func (*Expr_StructUpd_FieldInternedStr) isExpr_StructUpd_Field() {}

// Application ('ExpApp')
type Expr_App struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Function
	Fun *Expr `protobuf:"bytes,1,opt,name=fun,proto3" json:"fun,omitempty"`
	// Arguments of the function.
	// *Must be non-empty*
	Args []*Expr `protobuf:"bytes,2,rep,name=args,proto3" json:"args,omitempty"`
}

func (x *Expr_App) Reset() {
	*x = Expr_App{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_daml_daml_lf_dev_daml_lf_1_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Expr_App) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Expr_App) ProtoMessage() {}

func (x *Expr_App) ProtoReflect() protoreflect.Message {
	mi := &file_com_daml_daml_lf_dev_daml_lf_1_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Expr_App.ProtoReflect.Descriptor instead.
func (*Expr_App) Descriptor() ([]byte, []int) {
	return file_com_daml_daml_lf_dev_daml_lf_1_proto_rawDescGZIP(), []int{16, 8}
}

func (x *Expr_App) GetFun() *Expr {
	if x != nil {
		return x.Fun
	}
	return nil
}

func (x *Expr_App) GetArgs() []*Expr {
	if x != nil {
		return x.Args
	}
	return nil
}

// Type application ('ExpTyApp')
type Expr_TyApp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Polymorphic expression
	Expr *Expr `protobuf:"bytes,1,opt,name=expr,proto3" json:"expr,omitempty"`
	// Arguments of the function.
	// *Must be non-empty*
	Types []*Type `protobuf:"bytes,2,rep,name=types,proto3" json:"types,omitempty"`
}

func (x *Expr_TyApp) Reset() {
	*x = Expr_TyApp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_daml_daml_lf_dev_daml_lf_1_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Expr_TyApp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Expr_TyApp) ProtoMessage() {}

func (x *Expr_TyApp) ProtoReflect() protoreflect.Message {
	mi := &file_com_daml_daml_lf_dev_daml_lf_1_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Expr_TyApp.ProtoReflect.Descriptor instead.
func (*Expr_TyApp) Descriptor() ([]byte, []int) {
	return file_com_daml_daml_lf_dev_daml_lf_1_proto_rawDescGZIP(), []int{16, 9}
}

func (x *Expr_TyApp) GetExpr() *Expr {
	if x != nil {
		return x.Expr
	}
	return nil
}

func (x *Expr_TyApp) GetTypes() []*Type {
	if x != nil {
		return x.Types
	}
	return nil
}

// Abstraction ('ExpAbs')
type Expr_Abs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Abstracted Variables with their kind
	// *Must be non-empty*
	Param []*VarWithType `protobuf:"bytes,1,rep,name=param,proto3" json:"param,omitempty"`
	// Abstracted value
	Body *Expr `protobuf:"bytes,2,opt,name=body,proto3" json:"body,omitempty"`
}

func (x *Expr_Abs) Reset() {
	*x = Expr_Abs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_daml_daml_lf_dev_daml_lf_1_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Expr_Abs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Expr_Abs) ProtoMessage() {}

func (x *Expr_Abs) ProtoReflect() protoreflect.Message {
	mi := &file_com_daml_daml_lf_dev_daml_lf_1_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Expr_Abs.ProtoReflect.Descriptor instead.
func (*Expr_Abs) Descriptor() ([]byte, []int) {
	return file_com_daml_daml_lf_dev_daml_lf_1_proto_rawDescGZIP(), []int{16, 10}
}

func (x *Expr_Abs) GetParam() []*VarWithType {
	if x != nil {
		return x.Param
	}
	return nil
}

func (x *Expr_Abs) GetBody() *Expr {
	if x != nil {
		return x.Body
	}
	return nil
}

type Expr_TyAbs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Abstracted Variables with their type
	// *Must be non-empty*
	Param []*TypeVarWithKind `protobuf:"bytes,1,rep,name=param,proto3" json:"param,omitempty"`
	// Abstracted value
	Body *Expr `protobuf:"bytes,2,opt,name=body,proto3" json:"body,omitempty"`
}

func (x *Expr_TyAbs) Reset() {
	*x = Expr_TyAbs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_daml_daml_lf_dev_daml_lf_1_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Expr_TyAbs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Expr_TyAbs) ProtoMessage() {}

func (x *Expr_TyAbs) ProtoReflect() protoreflect.Message {
	mi := &file_com_daml_daml_lf_dev_daml_lf_1_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Expr_TyAbs.ProtoReflect.Descriptor instead.
func (*Expr_TyAbs) Descriptor() ([]byte, []int) {
	return file_com_daml_daml_lf_dev_daml_lf_1_proto_rawDescGZIP(), []int{16, 11}
}

func (x *Expr_TyAbs) GetParam() []*TypeVarWithKind {
	if x != nil {
		return x.Param
	}
	return nil
}

func (x *Expr_TyAbs) GetBody() *Expr {
	if x != nil {
		return x.Body
	}
	return nil
}

// Empty list ('ExpNil')
type Expr_Nil struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// type of the list elements.
	Type *Type `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
}

func (x *Expr_Nil) Reset() {
	*x = Expr_Nil{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_daml_daml_lf_dev_daml_lf_1_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Expr_Nil) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Expr_Nil) ProtoMessage() {}

func (x *Expr_Nil) ProtoReflect() protoreflect.Message {
	mi := &file_com_daml_daml_lf_dev_daml_lf_1_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Expr_Nil.ProtoReflect.Descriptor instead.
func (*Expr_Nil) Descriptor() ([]byte, []int) {
	return file_com_daml_daml_lf_dev_daml_lf_1_proto_rawDescGZIP(), []int{16, 12}
}

func (x *Expr_Nil) GetType() *Type {
	if x != nil {
		return x.Type
	}
	return nil
}

// Non empty list
type Expr_Cons struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// type of the list elements.
	Type *Type `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	// Front element of the list.
	// *Must be non-empty*
	Front []*Expr `protobuf:"bytes,2,rep,name=front,proto3" json:"front,omitempty"`
	// tail of the list
	Tail *Expr `protobuf:"bytes,3,opt,name=tail,proto3" json:"tail,omitempty"`
}

func (x *Expr_Cons) Reset() {
	*x = Expr_Cons{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_daml_daml_lf_dev_daml_lf_1_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Expr_Cons) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Expr_Cons) ProtoMessage() {}

func (x *Expr_Cons) ProtoReflect() protoreflect.Message {
	mi := &file_com_daml_daml_lf_dev_daml_lf_1_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Expr_Cons.ProtoReflect.Descriptor instead.
func (*Expr_Cons) Descriptor() ([]byte, []int) {
	return file_com_daml_daml_lf_dev_daml_lf_1_proto_rawDescGZIP(), []int{16, 13}
}

func (x *Expr_Cons) GetType() *Type {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *Expr_Cons) GetFront() []*Expr {
	if x != nil {
		return x.Front
	}
	return nil
}

func (x *Expr_Cons) GetTail() *Expr {
	if x != nil {
		return x.Tail
	}
	return nil
}

// (*Since version 1*)
// Empty optional value
type Expr_OptionalNone struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// type of the element
	Type *Type `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
}

func (x *Expr_OptionalNone) Reset() {
	*x = Expr_OptionalNone{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_daml_daml_lf_dev_daml_lf_1_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Expr_OptionalNone) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Expr_OptionalNone) ProtoMessage() {}

func (x *Expr_OptionalNone) ProtoReflect() protoreflect.Message {
	mi := &file_com_daml_daml_lf_dev_daml_lf_1_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Expr_OptionalNone.ProtoReflect.Descriptor instead.
func (*Expr_OptionalNone) Descriptor() ([]byte, []int) {
	return file_com_daml_daml_lf_dev_daml_lf_1_proto_rawDescGZIP(), []int{16, 14}
}

func (x *Expr_OptionalNone) GetType() *Type {
	if x != nil {
		return x.Type
	}
	return nil
}

// (*Since version 1*)
// Non empty optional value
type Expr_OptionalSome struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// type of the element
	Type *Type `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	// contained value
	// FixMe: renamed to 'value'
	Body *Expr `protobuf:"bytes,2,opt,name=body,proto3" json:"body,omitempty"`
}

func (x *Expr_OptionalSome) Reset() {
	*x = Expr_OptionalSome{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_daml_daml_lf_dev_daml_lf_1_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Expr_OptionalSome) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Expr_OptionalSome) ProtoMessage() {}

func (x *Expr_OptionalSome) ProtoReflect() protoreflect.Message {
	mi := &file_com_daml_daml_lf_dev_daml_lf_1_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Expr_OptionalSome.ProtoReflect.Descriptor instead.
func (*Expr_OptionalSome) Descriptor() ([]byte, []int) {
	return file_com_daml_daml_lf_dev_daml_lf_1_proto_rawDescGZIP(), []int{16, 15}
}

func (x *Expr_OptionalSome) GetType() *Type {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *Expr_OptionalSome) GetBody() *Expr {
	if x != nil {
		return x.Body
	}
	return nil
}

// Wrap a value in Any
// *Available in versions >= 1.7*
type Expr_ToAny struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// type of argument. Must be the TypeConName of a template.
	Type *Type `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	// argument
	Expr *Expr `protobuf:"bytes,2,opt,name=expr,proto3" json:"expr,omitempty"`
}

func (x *Expr_ToAny) Reset() {
	*x = Expr_ToAny{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_daml_daml_lf_dev_daml_lf_1_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Expr_ToAny) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Expr_ToAny) ProtoMessage() {}

func (x *Expr_ToAny) ProtoReflect() protoreflect.Message {
	mi := &file_com_daml_daml_lf_dev_daml_lf_1_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Expr_ToAny.ProtoReflect.Descriptor instead.
func (*Expr_ToAny) Descriptor() ([]byte, []int) {
	return file_com_daml_daml_lf_dev_daml_lf_1_proto_rawDescGZIP(), []int{16, 16}
}

func (x *Expr_ToAny) GetType() *Type {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *Expr_ToAny) GetExpr() *Expr {
	if x != nil {
		return x.Expr
	}
	return nil
}

// Extract the given type from Any or return None on type-mismatch
// *Available in versions >= 1.7*
type Expr_FromAny struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// type that should be extracted. Must be the TypeConName of a template.
	Type *Type `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	// Value of type Any
	Expr *Expr `protobuf:"bytes,2,opt,name=expr,proto3" json:"expr,omitempty"`
}

func (x *Expr_FromAny) Reset() {
	*x = Expr_FromAny{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_daml_daml_lf_dev_daml_lf_1_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Expr_FromAny) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Expr_FromAny) ProtoMessage() {}

func (x *Expr_FromAny) ProtoReflect() protoreflect.Message {
	mi := &file_com_daml_daml_lf_dev_daml_lf_1_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Expr_FromAny.ProtoReflect.Descriptor instead.
func (*Expr_FromAny) Descriptor() ([]byte, []int) {
	return file_com_daml_daml_lf_dev_daml_lf_1_proto_rawDescGZIP(), []int{16, 17}
}

func (x *Expr_FromAny) GetType() *Type {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *Expr_FromAny) GetExpr() *Expr {
	if x != nil {
		return x.Expr
	}
	return nil
}

// Variant pattern
type CaseAlt_Variant struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// name of the type constructor
	Con *TypeConName `protobuf:"bytes,1,opt,name=con,proto3" json:"con,omitempty"`
	// name of the variant constructor
	//
	// Types that are assignable to Variant:
	//	*CaseAlt_Variant_VariantStr
	//	*CaseAlt_Variant_VariantInternedStr
	Variant isCaseAlt_Variant_Variant `protobuf_oneof:"variant"`
	// name of the variant binder
	//
	// Types that are assignable to Binder:
	//	*CaseAlt_Variant_BinderStr
	//	*CaseAlt_Variant_BinderInternedStr
	Binder isCaseAlt_Variant_Binder `protobuf_oneof:"binder"`
}

func (x *CaseAlt_Variant) Reset() {
	*x = CaseAlt_Variant{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_daml_daml_lf_dev_daml_lf_1_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CaseAlt_Variant) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CaseAlt_Variant) ProtoMessage() {}

func (x *CaseAlt_Variant) ProtoReflect() protoreflect.Message {
	mi := &file_com_daml_daml_lf_dev_daml_lf_1_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CaseAlt_Variant.ProtoReflect.Descriptor instead.
func (*CaseAlt_Variant) Descriptor() ([]byte, []int) {
	return file_com_daml_daml_lf_dev_daml_lf_1_proto_rawDescGZIP(), []int{17, 0}
}

func (x *CaseAlt_Variant) GetCon() *TypeConName {
	if x != nil {
		return x.Con
	}
	return nil
}

func (m *CaseAlt_Variant) GetVariant() isCaseAlt_Variant_Variant {
	if m != nil {
		return m.Variant
	}
	return nil
}

func (x *CaseAlt_Variant) GetVariantStr() string {
	if x, ok := x.GetVariant().(*CaseAlt_Variant_VariantStr); ok {
		return x.VariantStr
	}
	return ""
}

func (x *CaseAlt_Variant) GetVariantInternedStr() int32 {
	if x, ok := x.GetVariant().(*CaseAlt_Variant_VariantInternedStr); ok {
		return x.VariantInternedStr
	}
	return 0
}

func (m *CaseAlt_Variant) GetBinder() isCaseAlt_Variant_Binder {
	if m != nil {
		return m.Binder
	}
	return nil
}

func (x *CaseAlt_Variant) GetBinderStr() string {
	if x, ok := x.GetBinder().(*CaseAlt_Variant_BinderStr); ok {
		return x.BinderStr
	}
	return ""
}

func (x *CaseAlt_Variant) GetBinderInternedStr() int32 {
	if x, ok := x.GetBinder().(*CaseAlt_Variant_BinderInternedStr); ok {
		return x.BinderInternedStr
	}
	return 0
}

type isCaseAlt_Variant_Variant interface {
	isCaseAlt_Variant_Variant()
}

type CaseAlt_Variant_VariantStr struct {
	// *Must be a valid identifier*
	VariantStr string `protobuf:"bytes,2,opt,name=variant_str,json=variantStr,proto3,oneof"` // *Available in version < 1.7*
}

type CaseAlt_Variant_VariantInternedStr struct {
	// *Must be a valid interned identifier*
	VariantInternedStr int32 `protobuf:"varint,4,opt,name=variant_interned_str,json=variantInternedStr,proto3,oneof"` // *Available in versions >= 1.7*
}

func (*CaseAlt_Variant_VariantStr) isCaseAlt_Variant_Variant() {}

func (*CaseAlt_Variant_VariantInternedStr) isCaseAlt_Variant_Variant() {}

type isCaseAlt_Variant_Binder interface {
	isCaseAlt_Variant_Binder()
}

type CaseAlt_Variant_BinderStr struct {
	// *Must be a valid identifier*
	BinderStr string `protobuf:"bytes,3,opt,name=binder_str,json=binderStr,proto3,oneof"` // *Available in version < 1.7*
}

type CaseAlt_Variant_BinderInternedStr struct {
	// *Must be a valid interned identifier*
	BinderInternedStr int32 `protobuf:"varint,5,opt,name=binder_interned_str,json=binderInternedStr,proto3,oneof"` // *Available in versions >= 1.7*
}

func (*CaseAlt_Variant_BinderStr) isCaseAlt_Variant_Binder() {}

func (*CaseAlt_Variant_BinderInternedStr) isCaseAlt_Variant_Binder() {}

// Enum pattern
// *Available in versions >= 1.6*
type CaseAlt_Enum struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// name of the type constructor
	Con *TypeConName `protobuf:"bytes,1,opt,name=con,proto3" json:"con,omitempty"`
	// name of the variant constructor
	// *Must be a valid identifier*
	//
	// Types that are assignable to Constructor:
	//	*CaseAlt_Enum_ConstructorStr
	//	*CaseAlt_Enum_ConstructorInternedStr
	Constructor isCaseAlt_Enum_Constructor `protobuf_oneof:"constructor"`
}

func (x *CaseAlt_Enum) Reset() {
	*x = CaseAlt_Enum{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_daml_daml_lf_dev_daml_lf_1_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CaseAlt_Enum) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CaseAlt_Enum) ProtoMessage() {}

func (x *CaseAlt_Enum) ProtoReflect() protoreflect.Message {
	mi := &file_com_daml_daml_lf_dev_daml_lf_1_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CaseAlt_Enum.ProtoReflect.Descriptor instead.
func (*CaseAlt_Enum) Descriptor() ([]byte, []int) {
	return file_com_daml_daml_lf_dev_daml_lf_1_proto_rawDescGZIP(), []int{17, 1}
}

func (x *CaseAlt_Enum) GetCon() *TypeConName {
	if x != nil {
		return x.Con
	}
	return nil
}

func (m *CaseAlt_Enum) GetConstructor() isCaseAlt_Enum_Constructor {
	if m != nil {
		return m.Constructor
	}
	return nil
}

func (x *CaseAlt_Enum) GetConstructorStr() string {
	if x, ok := x.GetConstructor().(*CaseAlt_Enum_ConstructorStr); ok {
		return x.ConstructorStr
	}
	return ""
}

func (x *CaseAlt_Enum) GetConstructorInternedStr() int32 {
	if x, ok := x.GetConstructor().(*CaseAlt_Enum_ConstructorInternedStr); ok {
		return x.ConstructorInternedStr
	}
	return 0
}

type isCaseAlt_Enum_Constructor interface {
	isCaseAlt_Enum_Constructor()
}

type CaseAlt_Enum_ConstructorStr struct {
	// *Must be a valid identifier*
	ConstructorStr string `protobuf:"bytes,2,opt,name=constructor_str,json=constructorStr,proto3,oneof"` // *Available in version < 1.7*
}

type CaseAlt_Enum_ConstructorInternedStr struct {
	// *Must be a valid interned identifier*
	ConstructorInternedStr int32 `protobuf:"varint,3,opt,name=constructor_interned_str,json=constructorInternedStr,proto3,oneof"` // *Available in versions >= 1.7*
}

func (*CaseAlt_Enum_ConstructorStr) isCaseAlt_Enum_Constructor() {}

func (*CaseAlt_Enum_ConstructorInternedStr) isCaseAlt_Enum_Constructor() {}

// Non empty list pattern
type CaseAlt_Cons struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// name of the binder for the head
	//
	// Types that are assignable to VarHead:
	//	*CaseAlt_Cons_VarHeadStr
	//	*CaseAlt_Cons_VarHeadInternedStr
	VarHead isCaseAlt_Cons_VarHead `protobuf_oneof:"var_head"`
	// Types that are assignable to VarTail:
	//	*CaseAlt_Cons_VarTailStr
	//	*CaseAlt_Cons_VarTailInternedStr
	VarTail isCaseAlt_Cons_VarTail `protobuf_oneof:"var_tail"`
}

func (x *CaseAlt_Cons) Reset() {
	*x = CaseAlt_Cons{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_daml_daml_lf_dev_daml_lf_1_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CaseAlt_Cons) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CaseAlt_Cons) ProtoMessage() {}

func (x *CaseAlt_Cons) ProtoReflect() protoreflect.Message {
	mi := &file_com_daml_daml_lf_dev_daml_lf_1_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CaseAlt_Cons.ProtoReflect.Descriptor instead.
func (*CaseAlt_Cons) Descriptor() ([]byte, []int) {
	return file_com_daml_daml_lf_dev_daml_lf_1_proto_rawDescGZIP(), []int{17, 2}
}

func (m *CaseAlt_Cons) GetVarHead() isCaseAlt_Cons_VarHead {
	if m != nil {
		return m.VarHead
	}
	return nil
}

func (x *CaseAlt_Cons) GetVarHeadStr() string {
	if x, ok := x.GetVarHead().(*CaseAlt_Cons_VarHeadStr); ok {
		return x.VarHeadStr
	}
	return ""
}

func (x *CaseAlt_Cons) GetVarHeadInternedStr() int32 {
	if x, ok := x.GetVarHead().(*CaseAlt_Cons_VarHeadInternedStr); ok {
		return x.VarHeadInternedStr
	}
	return 0
}

func (m *CaseAlt_Cons) GetVarTail() isCaseAlt_Cons_VarTail {
	if m != nil {
		return m.VarTail
	}
	return nil
}

func (x *CaseAlt_Cons) GetVarTailStr() string {
	if x, ok := x.GetVarTail().(*CaseAlt_Cons_VarTailStr); ok {
		return x.VarTailStr
	}
	return ""
}

func (x *CaseAlt_Cons) GetVarTailInternedStr() int32 {
	if x, ok := x.GetVarTail().(*CaseAlt_Cons_VarTailInternedStr); ok {
		return x.VarTailInternedStr
	}
	return 0
}

type isCaseAlt_Cons_VarHead interface {
	isCaseAlt_Cons_VarHead()
}

type CaseAlt_Cons_VarHeadStr struct {
	// *Must be a valid identifier*
	VarHeadStr string `protobuf:"bytes,1,opt,name=var_head_str,json=varHeadStr,proto3,oneof"` // *Available in version < 1.7*
}

type CaseAlt_Cons_VarHeadInternedStr struct {
	// *Must be a valid interned identifier*
	VarHeadInternedStr int32 `protobuf:"varint,3,opt,name=var_head_interned_str,json=varHeadInternedStr,proto3,oneof"` // *Available in versions >= 1.7*
}

func (*CaseAlt_Cons_VarHeadStr) isCaseAlt_Cons_VarHead() {}

func (*CaseAlt_Cons_VarHeadInternedStr) isCaseAlt_Cons_VarHead() {}

type isCaseAlt_Cons_VarTail interface {
	isCaseAlt_Cons_VarTail()
}

type CaseAlt_Cons_VarTailStr struct {
	// *Must be a valid identifier*
	VarTailStr string `protobuf:"bytes,2,opt,name=var_tail_str,json=varTailStr,proto3,oneof"` // *Available in version < 1.7*
}

type CaseAlt_Cons_VarTailInternedStr struct {
	// *Must be a valid interned identifier*
	VarTailInternedStr int32 `protobuf:"varint,4,opt,name=var_tail_interned_str,json=varTailInternedStr,proto3,oneof"` // *Available in versions >= 1.7*
}

func (*CaseAlt_Cons_VarTailStr) isCaseAlt_Cons_VarTail() {}

func (*CaseAlt_Cons_VarTailInternedStr) isCaseAlt_Cons_VarTail() {}

// Non empty option patterm
// *Available in versions >= 1.1*
type CaseAlt_OptionalSome struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to VarBody:
	//	*CaseAlt_OptionalSome_VarBodyStr
	//	*CaseAlt_OptionalSome_VarBodyInternedStr
	VarBody isCaseAlt_OptionalSome_VarBody `protobuf_oneof:"var_body"`
}

func (x *CaseAlt_OptionalSome) Reset() {
	*x = CaseAlt_OptionalSome{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_daml_daml_lf_dev_daml_lf_1_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CaseAlt_OptionalSome) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CaseAlt_OptionalSome) ProtoMessage() {}

func (x *CaseAlt_OptionalSome) ProtoReflect() protoreflect.Message {
	mi := &file_com_daml_daml_lf_dev_daml_lf_1_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CaseAlt_OptionalSome.ProtoReflect.Descriptor instead.
func (*CaseAlt_OptionalSome) Descriptor() ([]byte, []int) {
	return file_com_daml_daml_lf_dev_daml_lf_1_proto_rawDescGZIP(), []int{17, 3}
}

func (m *CaseAlt_OptionalSome) GetVarBody() isCaseAlt_OptionalSome_VarBody {
	if m != nil {
		return m.VarBody
	}
	return nil
}

func (x *CaseAlt_OptionalSome) GetVarBodyStr() string {
	if x, ok := x.GetVarBody().(*CaseAlt_OptionalSome_VarBodyStr); ok {
		return x.VarBodyStr
	}
	return ""
}

func (x *CaseAlt_OptionalSome) GetVarBodyInternedStr() int32 {
	if x, ok := x.GetVarBody().(*CaseAlt_OptionalSome_VarBodyInternedStr); ok {
		return x.VarBodyInternedStr
	}
	return 0
}

type isCaseAlt_OptionalSome_VarBody interface {
	isCaseAlt_OptionalSome_VarBody()
}

type CaseAlt_OptionalSome_VarBodyStr struct {
	// *Must be a valid identifier*
	VarBodyStr string `protobuf:"bytes,1,opt,name=var_body_str,json=varBodyStr,proto3,oneof"` // *Available in version < 1.7*
}

type CaseAlt_OptionalSome_VarBodyInternedStr struct {
	// *Must be a valid interned identifier*
	VarBodyInternedStr int32 `protobuf:"varint,2,opt,name=var_body_interned_str,json=varBodyInternedStr,proto3,oneof"` // *Available in versions >= 1.7*
}

func (*CaseAlt_OptionalSome_VarBodyStr) isCaseAlt_OptionalSome_VarBody() {}

func (*CaseAlt_OptionalSome_VarBodyInternedStr) isCaseAlt_OptionalSome_VarBody() {}

// Create Update
type Update_Create struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Template type
	Template *TypeConName `protobuf:"bytes,1,opt,name=template,proto3" json:"template,omitempty"`
	// Template argument
	Expr *Expr `protobuf:"bytes,2,opt,name=expr,proto3" json:"expr,omitempty"`
}

func (x *Update_Create) Reset() {
	*x = Update_Create{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_daml_daml_lf_dev_daml_lf_1_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Update_Create) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Update_Create) ProtoMessage() {}

func (x *Update_Create) ProtoReflect() protoreflect.Message {
	mi := &file_com_daml_daml_lf_dev_daml_lf_1_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Update_Create.ProtoReflect.Descriptor instead.
func (*Update_Create) Descriptor() ([]byte, []int) {
	return file_com_daml_daml_lf_dev_daml_lf_1_proto_rawDescGZIP(), []int{21, 0}
}

func (x *Update_Create) GetTemplate() *TypeConName {
	if x != nil {
		return x.Template
	}
	return nil
}

func (x *Update_Create) GetExpr() *Expr {
	if x != nil {
		return x.Expr
	}
	return nil
}

// Exercise Update
type Update_Exercise struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Template type
	Template *TypeConName `protobuf:"bytes,1,opt,name=template,proto3" json:"template,omitempty"`
	// name of the exercised template choice
	//
	// Types that are assignable to Choice:
	//	*Update_Exercise_ChoiceStr
	//	*Update_Exercise_ChoiceInternedStr
	Choice isUpdate_Exercise_Choice `protobuf_oneof:"choice"`
	// contract id
	Cid *Expr `protobuf:"bytes,3,opt,name=cid,proto3" json:"cid,omitempty"`
	// actors
	// *optional since version 1.5*
	Actor *Expr `protobuf:"bytes,4,opt,name=actor,proto3" json:"actor,omitempty"`
	// argument
	Arg *Expr `protobuf:"bytes,5,opt,name=arg,proto3" json:"arg,omitempty"`
}

func (x *Update_Exercise) Reset() {
	*x = Update_Exercise{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_daml_daml_lf_dev_daml_lf_1_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Update_Exercise) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Update_Exercise) ProtoMessage() {}

func (x *Update_Exercise) ProtoReflect() protoreflect.Message {
	mi := &file_com_daml_daml_lf_dev_daml_lf_1_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Update_Exercise.ProtoReflect.Descriptor instead.
func (*Update_Exercise) Descriptor() ([]byte, []int) {
	return file_com_daml_daml_lf_dev_daml_lf_1_proto_rawDescGZIP(), []int{21, 1}
}

func (x *Update_Exercise) GetTemplate() *TypeConName {
	if x != nil {
		return x.Template
	}
	return nil
}

func (m *Update_Exercise) GetChoice() isUpdate_Exercise_Choice {
	if m != nil {
		return m.Choice
	}
	return nil
}

func (x *Update_Exercise) GetChoiceStr() string {
	if x, ok := x.GetChoice().(*Update_Exercise_ChoiceStr); ok {
		return x.ChoiceStr
	}
	return ""
}

func (x *Update_Exercise) GetChoiceInternedStr() int32 {
	if x, ok := x.GetChoice().(*Update_Exercise_ChoiceInternedStr); ok {
		return x.ChoiceInternedStr
	}
	return 0
}

func (x *Update_Exercise) GetCid() *Expr {
	if x != nil {
		return x.Cid
	}
	return nil
}

func (x *Update_Exercise) GetActor() *Expr {
	if x != nil {
		return x.Actor
	}
	return nil
}

func (x *Update_Exercise) GetArg() *Expr {
	if x != nil {
		return x.Arg
	}
	return nil
}

type isUpdate_Exercise_Choice interface {
	isUpdate_Exercise_Choice()
}

type Update_Exercise_ChoiceStr struct {
	// *Must be a valid identifier*
	ChoiceStr string `protobuf:"bytes,2,opt,name=choice_str,json=choiceStr,proto3,oneof"` // *Available in version < 1.7*
}

type Update_Exercise_ChoiceInternedStr struct {
	// *Must be a valid interned identifier*
	ChoiceInternedStr int32 `protobuf:"varint,6,opt,name=choice_interned_str,json=choiceInternedStr,proto3,oneof"` // *Available in versions >= 1.7*
}

func (*Update_Exercise_ChoiceStr) isUpdate_Exercise_Choice() {}

func (*Update_Exercise_ChoiceInternedStr) isUpdate_Exercise_Choice() {}

// Fetch Update
type Update_Fetch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Template type
	Template *TypeConName `protobuf:"bytes,1,opt,name=template,proto3" json:"template,omitempty"`
	// contract id
	Cid *Expr `protobuf:"bytes,2,opt,name=cid,proto3" json:"cid,omitempty"`
}

func (x *Update_Fetch) Reset() {
	*x = Update_Fetch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_daml_daml_lf_dev_daml_lf_1_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Update_Fetch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Update_Fetch) ProtoMessage() {}

func (x *Update_Fetch) ProtoReflect() protoreflect.Message {
	mi := &file_com_daml_daml_lf_dev_daml_lf_1_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Update_Fetch.ProtoReflect.Descriptor instead.
func (*Update_Fetch) Descriptor() ([]byte, []int) {
	return file_com_daml_daml_lf_dev_daml_lf_1_proto_rawDescGZIP(), []int{21, 2}
}

func (x *Update_Fetch) GetTemplate() *TypeConName {
	if x != nil {
		return x.Template
	}
	return nil
}

func (x *Update_Fetch) GetCid() *Expr {
	if x != nil {
		return x.Cid
	}
	return nil
}

// Embedded Expression Update
type Update_EmbedExpr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Expression type
	Type *Type `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	// Expression body
	Body *Expr `protobuf:"bytes,2,opt,name=body,proto3" json:"body,omitempty"`
}

func (x *Update_EmbedExpr) Reset() {
	*x = Update_EmbedExpr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_daml_daml_lf_dev_daml_lf_1_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Update_EmbedExpr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Update_EmbedExpr) ProtoMessage() {}

func (x *Update_EmbedExpr) ProtoReflect() protoreflect.Message {
	mi := &file_com_daml_daml_lf_dev_daml_lf_1_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Update_EmbedExpr.ProtoReflect.Descriptor instead.
func (*Update_EmbedExpr) Descriptor() ([]byte, []int) {
	return file_com_daml_daml_lf_dev_daml_lf_1_proto_rawDescGZIP(), []int{21, 3}
}

func (x *Update_EmbedExpr) GetType() *Type {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *Update_EmbedExpr) GetBody() *Expr {
	if x != nil {
		return x.Body
	}
	return nil
}

// Retrieve by key Update
// *Available in versions >= 1.2*
type Update_RetrieveByKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Template *TypeConName `protobuf:"bytes,1,opt,name=template,proto3" json:"template,omitempty"`
	Key      *Expr        `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
}

func (x *Update_RetrieveByKey) Reset() {
	*x = Update_RetrieveByKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_daml_daml_lf_dev_daml_lf_1_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Update_RetrieveByKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Update_RetrieveByKey) ProtoMessage() {}

func (x *Update_RetrieveByKey) ProtoReflect() protoreflect.Message {
	mi := &file_com_daml_daml_lf_dev_daml_lf_1_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Update_RetrieveByKey.ProtoReflect.Descriptor instead.
func (*Update_RetrieveByKey) Descriptor() ([]byte, []int) {
	return file_com_daml_daml_lf_dev_daml_lf_1_proto_rawDescGZIP(), []int{21, 4}
}

func (x *Update_RetrieveByKey) GetTemplate() *TypeConName {
	if x != nil {
		return x.Template
	}
	return nil
}

func (x *Update_RetrieveByKey) GetKey() *Expr {
	if x != nil {
		return x.Key
	}
	return nil
}

type Scenario_Commit struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// committing party
	Party *Expr `protobuf:"bytes,1,opt,name=party,proto3" json:"party,omitempty"`
	//
	Expr *Expr `protobuf:"bytes,2,opt,name=expr,proto3" json:"expr,omitempty"`
	// type of result
	RetType *Type `protobuf:"bytes,3,opt,name=ret_type,json=retType,proto3" json:"ret_type,omitempty"`
}

func (x *Scenario_Commit) Reset() {
	*x = Scenario_Commit{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_daml_daml_lf_dev_daml_lf_1_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Scenario_Commit) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Scenario_Commit) ProtoMessage() {}

func (x *Scenario_Commit) ProtoReflect() protoreflect.Message {
	mi := &file_com_daml_daml_lf_dev_daml_lf_1_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Scenario_Commit.ProtoReflect.Descriptor instead.
func (*Scenario_Commit) Descriptor() ([]byte, []int) {
	return file_com_daml_daml_lf_dev_daml_lf_1_proto_rawDescGZIP(), []int{22, 0}
}

func (x *Scenario_Commit) GetParty() *Expr {
	if x != nil {
		return x.Party
	}
	return nil
}

func (x *Scenario_Commit) GetExpr() *Expr {
	if x != nil {
		return x.Expr
	}
	return nil
}

func (x *Scenario_Commit) GetRetType() *Type {
	if x != nil {
		return x.RetType
	}
	return nil
}

type Scenario_EmbedExpr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type *Type `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Body *Expr `protobuf:"bytes,2,opt,name=body,proto3" json:"body,omitempty"`
}

func (x *Scenario_EmbedExpr) Reset() {
	*x = Scenario_EmbedExpr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_daml_daml_lf_dev_daml_lf_1_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Scenario_EmbedExpr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Scenario_EmbedExpr) ProtoMessage() {}

func (x *Scenario_EmbedExpr) ProtoReflect() protoreflect.Message {
	mi := &file_com_daml_daml_lf_dev_daml_lf_1_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Scenario_EmbedExpr.ProtoReflect.Descriptor instead.
func (*Scenario_EmbedExpr) Descriptor() ([]byte, []int) {
	return file_com_daml_daml_lf_dev_daml_lf_1_proto_rawDescGZIP(), []int{22, 1}
}

func (x *Scenario_EmbedExpr) GetType() *Type {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *Scenario_EmbedExpr) GetBody() *Expr {
	if x != nil {
		return x.Body
	}
	return nil
}

type KeyExpr_Projection struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tycon *Type_Con `protobuf:"bytes,1,opt,name=tycon,proto3" json:"tycon,omitempty"` // Always fully applied
	// Types that are assignable to Field:
	//	*KeyExpr_Projection_FieldStr
	//	*KeyExpr_Projection_FieldInternedStr
	Field isKeyExpr_Projection_Field `protobuf_oneof:"field"`
}

func (x *KeyExpr_Projection) Reset() {
	*x = KeyExpr_Projection{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_daml_daml_lf_dev_daml_lf_1_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KeyExpr_Projection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeyExpr_Projection) ProtoMessage() {}

func (x *KeyExpr_Projection) ProtoReflect() protoreflect.Message {
	mi := &file_com_daml_daml_lf_dev_daml_lf_1_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeyExpr_Projection.ProtoReflect.Descriptor instead.
func (*KeyExpr_Projection) Descriptor() ([]byte, []int) {
	return file_com_daml_daml_lf_dev_daml_lf_1_proto_rawDescGZIP(), []int{24, 0}
}

func (x *KeyExpr_Projection) GetTycon() *Type_Con {
	if x != nil {
		return x.Tycon
	}
	return nil
}

func (m *KeyExpr_Projection) GetField() isKeyExpr_Projection_Field {
	if m != nil {
		return m.Field
	}
	return nil
}

func (x *KeyExpr_Projection) GetFieldStr() string {
	if x, ok := x.GetField().(*KeyExpr_Projection_FieldStr); ok {
		return x.FieldStr
	}
	return ""
}

func (x *KeyExpr_Projection) GetFieldInternedStr() int32 {
	if x, ok := x.GetField().(*KeyExpr_Projection_FieldInternedStr); ok {
		return x.FieldInternedStr
	}
	return 0
}

type isKeyExpr_Projection_Field interface {
	isKeyExpr_Projection_Field()
}

type KeyExpr_Projection_FieldStr struct {
	// *Must be a valid identifier*
	FieldStr string `protobuf:"bytes,2,opt,name=field_str,json=fieldStr,proto3,oneof"` // *Available in version < 1.7*
}

type KeyExpr_Projection_FieldInternedStr struct {
	// *Must be a valid interned identifier*
	FieldInternedStr int32 `protobuf:"varint,3,opt,name=field_interned_str,json=fieldInternedStr,proto3,oneof"` // *Available in versions >= 1.7*
}

func (*KeyExpr_Projection_FieldStr) isKeyExpr_Projection_Field() {}

func (*KeyExpr_Projection_FieldInternedStr) isKeyExpr_Projection_Field() {}

// note that the projection is always referring to the template parameter.
type KeyExpr_Projections struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Projections []*KeyExpr_Projection `protobuf:"bytes,2,rep,name=projections,proto3" json:"projections,omitempty"`
}

func (x *KeyExpr_Projections) Reset() {
	*x = KeyExpr_Projections{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_daml_daml_lf_dev_daml_lf_1_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KeyExpr_Projections) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeyExpr_Projections) ProtoMessage() {}

func (x *KeyExpr_Projections) ProtoReflect() protoreflect.Message {
	mi := &file_com_daml_daml_lf_dev_daml_lf_1_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeyExpr_Projections.ProtoReflect.Descriptor instead.
func (*KeyExpr_Projections) Descriptor() ([]byte, []int) {
	return file_com_daml_daml_lf_dev_daml_lf_1_proto_rawDescGZIP(), []int{24, 1}
}

func (x *KeyExpr_Projections) GetProjections() []*KeyExpr_Projection {
	if x != nil {
		return x.Projections
	}
	return nil
}

type KeyExpr_RecordField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Field:
	//	*KeyExpr_RecordField_FieldStr
	//	*KeyExpr_RecordField_FieldInternedStr
	Field isKeyExpr_RecordField_Field `protobuf_oneof:"field"`
	Expr  *KeyExpr                    `protobuf:"bytes,2,opt,name=expr,proto3" json:"expr,omitempty"`
}

func (x *KeyExpr_RecordField) Reset() {
	*x = KeyExpr_RecordField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_daml_daml_lf_dev_daml_lf_1_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KeyExpr_RecordField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeyExpr_RecordField) ProtoMessage() {}

func (x *KeyExpr_RecordField) ProtoReflect() protoreflect.Message {
	mi := &file_com_daml_daml_lf_dev_daml_lf_1_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeyExpr_RecordField.ProtoReflect.Descriptor instead.
func (*KeyExpr_RecordField) Descriptor() ([]byte, []int) {
	return file_com_daml_daml_lf_dev_daml_lf_1_proto_rawDescGZIP(), []int{24, 2}
}

func (m *KeyExpr_RecordField) GetField() isKeyExpr_RecordField_Field {
	if m != nil {
		return m.Field
	}
	return nil
}

func (x *KeyExpr_RecordField) GetFieldStr() string {
	if x, ok := x.GetField().(*KeyExpr_RecordField_FieldStr); ok {
		return x.FieldStr
	}
	return ""
}

func (x *KeyExpr_RecordField) GetFieldInternedStr() int32 {
	if x, ok := x.GetField().(*KeyExpr_RecordField_FieldInternedStr); ok {
		return x.FieldInternedStr
	}
	return 0
}

func (x *KeyExpr_RecordField) GetExpr() *KeyExpr {
	if x != nil {
		return x.Expr
	}
	return nil
}

type isKeyExpr_RecordField_Field interface {
	isKeyExpr_RecordField_Field()
}

type KeyExpr_RecordField_FieldStr struct {
	// *Must be a valid identifier*
	FieldStr string `protobuf:"bytes,1,opt,name=field_str,json=fieldStr,proto3,oneof"` // *Available in version < 1.7*
}

type KeyExpr_RecordField_FieldInternedStr struct {
	// *Must be a valid identifier*
	FieldInternedStr int32 `protobuf:"varint,3,opt,name=field_interned_str,json=fieldInternedStr,proto3,oneof"` // *Available in versions >= 1.7*
}

func (*KeyExpr_RecordField_FieldStr) isKeyExpr_RecordField_Field() {}

func (*KeyExpr_RecordField_FieldInternedStr) isKeyExpr_RecordField_Field() {}

type KeyExpr_Record struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tycon  *Type_Con              `protobuf:"bytes,1,opt,name=tycon,proto3" json:"tycon,omitempty"` // Always fully applied
	Fields []*KeyExpr_RecordField `protobuf:"bytes,2,rep,name=fields,proto3" json:"fields,omitempty"`
}

func (x *KeyExpr_Record) Reset() {
	*x = KeyExpr_Record{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_daml_daml_lf_dev_daml_lf_1_proto_msgTypes[75]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KeyExpr_Record) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeyExpr_Record) ProtoMessage() {}

func (x *KeyExpr_Record) ProtoReflect() protoreflect.Message {
	mi := &file_com_daml_daml_lf_dev_daml_lf_1_proto_msgTypes[75]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeyExpr_Record.ProtoReflect.Descriptor instead.
func (*KeyExpr_Record) Descriptor() ([]byte, []int) {
	return file_com_daml_daml_lf_dev_daml_lf_1_proto_rawDescGZIP(), []int{24, 3}
}

func (x *KeyExpr_Record) GetTycon() *Type_Con {
	if x != nil {
		return x.Tycon
	}
	return nil
}

func (x *KeyExpr_Record) GetFields() []*KeyExpr_RecordField {
	if x != nil {
		return x.Fields
	}
	return nil
}

type DefTemplate_DefKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type *Type `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	// NOTE(MH): The first version of contract keys had syntactic
	// restrictions that key expression had to be "simple". We lifted these
	// restrictions later and allowed arbitrarily complext key expressions.
	//
	// Types that are assignable to KeyExpr:
	//	*DefTemplate_DefKey_Key
	//	*DefTemplate_DefKey_ComplexKey
	KeyExpr     isDefTemplate_DefKey_KeyExpr `protobuf_oneof:"key_expr"`
	Maintainers *Expr                        `protobuf:"bytes,3,opt,name=maintainers,proto3" json:"maintainers,omitempty"` // a function from the key type to [Party]
}

func (x *DefTemplate_DefKey) Reset() {
	*x = DefTemplate_DefKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_daml_daml_lf_dev_daml_lf_1_proto_msgTypes[76]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DefTemplate_DefKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DefTemplate_DefKey) ProtoMessage() {}

func (x *DefTemplate_DefKey) ProtoReflect() protoreflect.Message {
	mi := &file_com_daml_daml_lf_dev_daml_lf_1_proto_msgTypes[76]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DefTemplate_DefKey.ProtoReflect.Descriptor instead.
func (*DefTemplate_DefKey) Descriptor() ([]byte, []int) {
	return file_com_daml_daml_lf_dev_daml_lf_1_proto_rawDescGZIP(), []int{25, 0}
}

func (x *DefTemplate_DefKey) GetType() *Type {
	if x != nil {
		return x.Type
	}
	return nil
}

func (m *DefTemplate_DefKey) GetKeyExpr() isDefTemplate_DefKey_KeyExpr {
	if m != nil {
		return m.KeyExpr
	}
	return nil
}

func (x *DefTemplate_DefKey) GetKey() *KeyExpr {
	if x, ok := x.GetKeyExpr().(*DefTemplate_DefKey_Key); ok {
		return x.Key
	}
	return nil
}

func (x *DefTemplate_DefKey) GetComplexKey() *Expr {
	if x, ok := x.GetKeyExpr().(*DefTemplate_DefKey_ComplexKey); ok {
		return x.ComplexKey
	}
	return nil
}

func (x *DefTemplate_DefKey) GetMaintainers() *Expr {
	if x != nil {
		return x.Maintainers
	}
	return nil
}

type isDefTemplate_DefKey_KeyExpr interface {
	isDefTemplate_DefKey_KeyExpr()
}

type DefTemplate_DefKey_Key struct {
	Key *KeyExpr `protobuf:"bytes,2,opt,name=key,proto3,oneof"`
}

type DefTemplate_DefKey_ComplexKey struct {
	ComplexKey *Expr `protobuf:"bytes,4,opt,name=complex_key,json=complexKey,proto3,oneof"`
}

func (*DefTemplate_DefKey_Key) isDefTemplate_DefKey_KeyExpr() {}

func (*DefTemplate_DefKey_ComplexKey) isDefTemplate_DefKey_KeyExpr() {}

type DefDataType_Fields struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fields []*FieldWithType `protobuf:"bytes,1,rep,name=fields,proto3" json:"fields,omitempty"`
}

func (x *DefDataType_Fields) Reset() {
	*x = DefDataType_Fields{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_daml_daml_lf_dev_daml_lf_1_proto_msgTypes[77]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DefDataType_Fields) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DefDataType_Fields) ProtoMessage() {}

func (x *DefDataType_Fields) ProtoReflect() protoreflect.Message {
	mi := &file_com_daml_daml_lf_dev_daml_lf_1_proto_msgTypes[77]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DefDataType_Fields.ProtoReflect.Descriptor instead.
func (*DefDataType_Fields) Descriptor() ([]byte, []int) {
	return file_com_daml_daml_lf_dev_daml_lf_1_proto_rawDescGZIP(), []int{26, 0}
}

func (x *DefDataType_Fields) GetFields() []*FieldWithType {
	if x != nil {
		return x.Fields
	}
	return nil
}

// *Available in versions >= 1.6*
type DefDataType_EnumConstructors struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// *Must be a list of valid identifiers*
	ConstructorsStr []string `protobuf:"bytes,1,rep,name=constructors_str,json=constructorsStr,proto3" json:"constructors_str,omitempty"` // *Available in version < 1.7*
	// *Must be a list of valid interned identifiers*
	ConstructorsInternedStr []int32 `protobuf:"varint,2,rep,packed,name=constructors_interned_str,json=constructorsInternedStr,proto3" json:"constructors_interned_str,omitempty"` // *Available in versions >= 1.7*
}

func (x *DefDataType_EnumConstructors) Reset() {
	*x = DefDataType_EnumConstructors{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_daml_daml_lf_dev_daml_lf_1_proto_msgTypes[78]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DefDataType_EnumConstructors) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DefDataType_EnumConstructors) ProtoMessage() {}

func (x *DefDataType_EnumConstructors) ProtoReflect() protoreflect.Message {
	mi := &file_com_daml_daml_lf_dev_daml_lf_1_proto_msgTypes[78]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DefDataType_EnumConstructors.ProtoReflect.Descriptor instead.
func (*DefDataType_EnumConstructors) Descriptor() ([]byte, []int) {
	return file_com_daml_daml_lf_dev_daml_lf_1_proto_rawDescGZIP(), []int{26, 1}
}

func (x *DefDataType_EnumConstructors) GetConstructorsStr() []string {
	if x != nil {
		return x.ConstructorsStr
	}
	return nil
}

func (x *DefDataType_EnumConstructors) GetConstructorsInternedStr() []int32 {
	if x != nil {
		return x.ConstructorsInternedStr
	}
	return nil
}

// The reason why we have this type instead of just flattening name
// and type in DefValue is that it was VarWithType before, and we
// want to be binary-compatible with it.
type DefValue_NameWithType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// *Must a non-empty list a valid identifier*
	NameDname []string `protobuf:"bytes,1,rep,name=name_dname,json=nameDname,proto3" json:"name_dname,omitempty"` // *Available in version < 1.7*
	// *Must be a valid interned name*
	NameInternedDname int32 `protobuf:"varint,3,opt,name=name_interned_dname,json=nameInternedDname,proto3" json:"name_interned_dname,omitempty"` // *Available in versions >= 1.7*
	// Type of the value
	Type *Type `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
}

func (x *DefValue_NameWithType) Reset() {
	*x = DefValue_NameWithType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_com_daml_daml_lf_dev_daml_lf_1_proto_msgTypes[79]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DefValue_NameWithType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DefValue_NameWithType) ProtoMessage() {}

func (x *DefValue_NameWithType) ProtoReflect() protoreflect.Message {
	mi := &file_com_daml_daml_lf_dev_daml_lf_1_proto_msgTypes[79]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DefValue_NameWithType.ProtoReflect.Descriptor instead.
func (*DefValue_NameWithType) Descriptor() ([]byte, []int) {
	return file_com_daml_daml_lf_dev_daml_lf_1_proto_rawDescGZIP(), []int{28, 0}
}

func (x *DefValue_NameWithType) GetNameDname() []string {
	if x != nil {
		return x.NameDname
	}
	return nil
}

func (x *DefValue_NameWithType) GetNameInternedDname() int32 {
	if x != nil {
		return x.NameInternedDname
	}
	return 0
}

func (x *DefValue_NameWithType) GetType() *Type {
	if x != nil {
		return x.Type
	}
	return nil
}

var File_com_daml_daml_lf_dev_daml_lf_1_proto protoreflect.FileDescriptor

var file_com_daml_daml_lf_dev_daml_lf_1_proto_rawDesc = []byte{
	0x0a, 0x24, 0x63, 0x6f, 0x6d, 0x2f, 0x64, 0x61, 0x6d, 0x6c, 0x2f, 0x64, 0x61, 0x6d, 0x6c, 0x5f,
	0x6c, 0x66, 0x5f, 0x64, 0x65, 0x76, 0x2f, 0x64, 0x61, 0x6d, 0x6c, 0x5f, 0x6c, 0x66, 0x5f, 0x31,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x09, 0x64, 0x61, 0x6d, 0x6c, 0x5f, 0x6c, 0x66, 0x5f,
	0x31, 0x22, 0x06, 0x0a, 0x04, 0x55, 0x6e, 0x69, 0x74, 0x22, 0x9b, 0x01, 0x0a, 0x0a, 0x50, 0x61,
	0x63, 0x6b, 0x61, 0x67, 0x65, 0x52, 0x65, 0x66, 0x12, 0x25, 0x0a, 0x04, 0x73, 0x65, 0x6c, 0x66,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x5f, 0x6c, 0x66,
	0x5f, 0x31, 0x2e, 0x55, 0x6e, 0x69, 0x74, 0x48, 0x00, 0x52, 0x04, 0x73, 0x65, 0x6c, 0x66, 0x12,
	0x26, 0x0a, 0x0e, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x5f, 0x73, 0x74,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0c, 0x70, 0x61, 0x63, 0x6b, 0x61,
	0x67, 0x65, 0x49, 0x64, 0x53, 0x74, 0x72, 0x12, 0x37, 0x0a, 0x17, 0x70, 0x61, 0x63, 0x6b, 0x61,
	0x67, 0x65, 0x5f, 0x69, 0x64, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x65, 0x64, 0x5f, 0x73,
	0x74, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x14, 0x70, 0x61, 0x63, 0x6b,
	0x61, 0x67, 0x65, 0x49, 0x64, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x65, 0x64, 0x53, 0x74, 0x72,
	0x42, 0x05, 0x0a, 0x03, 0x53, 0x75, 0x6d, 0x22, 0x28, 0x0a, 0x0a, 0x44, 0x6f, 0x74, 0x74, 0x65,
	0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74,
	0x73, 0x22, 0xd6, 0x01, 0x0a, 0x09, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x66, 0x12,
	0x36, 0x0a, 0x0b, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x5f, 0x72, 0x65, 0x66, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x5f, 0x6c, 0x66, 0x5f, 0x31,
	0x2e, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x52, 0x65, 0x66, 0x52, 0x0a, 0x70, 0x61, 0x63,
	0x6b, 0x61, 0x67, 0x65, 0x52, 0x65, 0x66, 0x12, 0x43, 0x0a, 0x11, 0x6d, 0x6f, 0x64, 0x75, 0x6c,
	0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x64, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x5f, 0x6c, 0x66, 0x5f, 0x31, 0x2e, 0x44,
	0x6f, 0x74, 0x74, 0x65, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x48, 0x00, 0x52, 0x0f, 0x6d, 0x6f, 0x64,
	0x75, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x44, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x3d, 0x0a, 0x1a,
	0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x6e, 0x65, 0x64, 0x5f, 0x64, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x48, 0x00, 0x52, 0x17, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x6e, 0x65, 0x64, 0x44, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x6d,
	0x6f, 0x64, 0x75, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xad, 0x01, 0x0a, 0x0b, 0x54,
	0x79, 0x70, 0x65, 0x43, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x06, 0x6d, 0x6f,
	0x64, 0x75, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x64, 0x61, 0x6d,
	0x6c, 0x5f, 0x6c, 0x66, 0x5f, 0x31, 0x2e, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x66,
	0x52, 0x06, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x36, 0x0a, 0x0a, 0x6e, 0x61, 0x6d, 0x65,
	0x5f, 0x64, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x64,
	0x61, 0x6d, 0x6c, 0x5f, 0x6c, 0x66, 0x5f, 0x31, 0x2e, 0x44, 0x6f, 0x74, 0x74, 0x65, 0x64, 0x4e,
	0x61, 0x6d, 0x65, 0x48, 0x00, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x44, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x30, 0x0a, 0x13, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x65,
	0x64, 0x5f, 0x64, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52,
	0x11, 0x6e, 0x61, 0x6d, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x65, 0x64, 0x44, 0x6e, 0x61,
	0x6d, 0x65, 0x42, 0x06, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xad, 0x01, 0x0a, 0x0b, 0x54,
	0x79, 0x70, 0x65, 0x53, 0x79, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x06, 0x6d, 0x6f,
	0x64, 0x75, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x64, 0x61, 0x6d,
	0x6c, 0x5f, 0x6c, 0x66, 0x5f, 0x31, 0x2e, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x66,
	0x52, 0x06, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x12, 0x36, 0x0a, 0x0a, 0x6e, 0x61, 0x6d, 0x65,
	0x5f, 0x64, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x64,
	0x61, 0x6d, 0x6c, 0x5f, 0x6c, 0x66, 0x5f, 0x31, 0x2e, 0x44, 0x6f, 0x74, 0x74, 0x65, 0x64, 0x4e,
	0x61, 0x6d, 0x65, 0x48, 0x00, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x44, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x30, 0x0a, 0x13, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x65,
	0x64, 0x5f, 0x64, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52,
	0x11, 0x6e, 0x61, 0x6d, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x65, 0x64, 0x44, 0x6e, 0x61,
	0x6d, 0x65, 0x42, 0x06, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x86, 0x01, 0x0a, 0x07, 0x56,
	0x61, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x06, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x5f, 0x6c, 0x66,
	0x5f, 0x31, 0x2e, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x66, 0x52, 0x06, 0x6d, 0x6f,
	0x64, 0x75, 0x6c, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x64, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x44, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x6e, 0x65, 0x64, 0x5f, 0x64, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x11, 0x6e, 0x61, 0x6d, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x65, 0x64, 0x44, 0x6e,
	0x61, 0x6d, 0x65, 0x22, 0x8c, 0x01, 0x0a, 0x0d, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x57, 0x69, 0x74,
	0x68, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x09, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x73,
	0x74, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x08, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x53, 0x74, 0x72, 0x12, 0x2e, 0x0a, 0x12, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x6e, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x48, 0x00, 0x52, 0x10, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x65,
	0x64, 0x53, 0x74, 0x72, 0x12, 0x23, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x5f, 0x6c, 0x66, 0x5f, 0x31, 0x2e, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x22, 0x80, 0x01, 0x0a, 0x0b, 0x56, 0x61, 0x72, 0x57, 0x69, 0x74, 0x68, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x19, 0x0a, 0x07, 0x76, 0x61, 0x72, 0x5f, 0x73, 0x74, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x06, 0x76, 0x61, 0x72, 0x53, 0x74, 0x72, 0x12, 0x2a, 0x0a,
	0x10, 0x76, 0x61, 0x72, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x65, 0x64, 0x5f, 0x73, 0x74,
	0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x0e, 0x76, 0x61, 0x72, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x6e, 0x65, 0x64, 0x53, 0x74, 0x72, 0x12, 0x23, 0x0a, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x5f, 0x6c,
	0x66, 0x5f, 0x31, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x42, 0x05,
	0x0a, 0x03, 0x76, 0x61, 0x72, 0x22, 0x84, 0x01, 0x0a, 0x0f, 0x54, 0x79, 0x70, 0x65, 0x56, 0x61,
	0x72, 0x57, 0x69, 0x74, 0x68, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x19, 0x0a, 0x07, 0x76, 0x61, 0x72,
	0x5f, 0x73, 0x74, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x06, 0x76, 0x61,
	0x72, 0x53, 0x74, 0x72, 0x12, 0x2a, 0x0a, 0x10, 0x76, 0x61, 0x72, 0x5f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x6e, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00,
	0x52, 0x0e, 0x76, 0x61, 0x72, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x65, 0x64, 0x53, 0x74, 0x72,
	0x12, 0x23, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f,
	0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x5f, 0x6c, 0x66, 0x5f, 0x31, 0x2e, 0x4b, 0x69, 0x6e, 0x64, 0x52,
	0x04, 0x6b, 0x69, 0x6e, 0x64, 0x42, 0x05, 0x0a, 0x03, 0x76, 0x61, 0x72, 0x22, 0x8c, 0x01, 0x0a,
	0x0d, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x57, 0x69, 0x74, 0x68, 0x45, 0x78, 0x70, 0x72, 0x12, 0x1d,
	0x0a, 0x09, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x73, 0x74, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x00, 0x52, 0x08, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x53, 0x74, 0x72, 0x12, 0x2e, 0x0a,
	0x12, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x65, 0x64, 0x5f,
	0x73, 0x74, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x10, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x65, 0x64, 0x53, 0x74, 0x72, 0x12, 0x23, 0x0a,
	0x04, 0x65, 0x78, 0x70, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x64, 0x61,
	0x6d, 0x6c, 0x5f, 0x6c, 0x66, 0x5f, 0x31, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x52, 0x04, 0x65, 0x78,
	0x70, 0x72, 0x42, 0x07, 0x0a, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x22, 0x60, 0x0a, 0x07, 0x42,
	0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x12, 0x2e, 0x0a, 0x06, 0x62, 0x69, 0x6e, 0x64, 0x65, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x5f, 0x6c, 0x66,
	0x5f, 0x31, 0x2e, 0x56, 0x61, 0x72, 0x57, 0x69, 0x74, 0x68, 0x54, 0x79, 0x70, 0x65, 0x52, 0x06,
	0x62, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x25, 0x0a, 0x05, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x5f, 0x6c, 0x66, 0x5f,
	0x31, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x52, 0x05, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x22, 0xe3, 0x01,
	0x0a, 0x04, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x25, 0x0a, 0x04, 0x73, 0x74, 0x61, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x5f, 0x6c, 0x66, 0x5f, 0x31,
	0x2e, 0x55, 0x6e, 0x69, 0x74, 0x48, 0x00, 0x52, 0x04, 0x73, 0x74, 0x61, 0x72, 0x12, 0x2d, 0x0a,
	0x05, 0x61, 0x72, 0x72, 0x6f, 0x77, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x64,
	0x61, 0x6d, 0x6c, 0x5f, 0x6c, 0x66, 0x5f, 0x31, 0x2e, 0x4b, 0x69, 0x6e, 0x64, 0x2e, 0x41, 0x72,
	0x72, 0x6f, 0x77, 0x48, 0x00, 0x52, 0x05, 0x61, 0x72, 0x72, 0x6f, 0x77, 0x12, 0x23, 0x0a, 0x03,
	0x6e, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x64, 0x61, 0x6d, 0x6c,
	0x5f, 0x6c, 0x66, 0x5f, 0x31, 0x2e, 0x55, 0x6e, 0x69, 0x74, 0x48, 0x00, 0x52, 0x03, 0x6e, 0x61,
	0x74, 0x1a, 0x59, 0x0a, 0x05, 0x41, 0x72, 0x72, 0x6f, 0x77, 0x12, 0x27, 0x0a, 0x06, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x64, 0x61, 0x6d,
	0x6c, 0x5f, 0x6c, 0x66, 0x5f, 0x31, 0x2e, 0x4b, 0x69, 0x6e, 0x64, 0x52, 0x06, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x73, 0x12, 0x27, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x5f, 0x6c, 0x66, 0x5f, 0x31, 0x2e,
	0x4b, 0x69, 0x6e, 0x64, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x42, 0x05, 0x0a, 0x03,
	0x53, 0x75, 0x6d, 0x22, 0xe5, 0x07, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x27, 0x0a, 0x03,
	0x76, 0x61, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x64, 0x61, 0x6d, 0x6c,
	0x5f, 0x6c, 0x66, 0x5f, 0x31, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x56, 0x61, 0x72, 0x48, 0x00,
	0x52, 0x03, 0x76, 0x61, 0x72, 0x12, 0x27, 0x0a, 0x03, 0x63, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x5f, 0x6c, 0x66, 0x5f, 0x31, 0x2e, 0x54,
	0x79, 0x70, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x03, 0x63, 0x6f, 0x6e, 0x12, 0x2a,
	0x0a, 0x04, 0x70, 0x72, 0x69, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x64,
	0x61, 0x6d, 0x6c, 0x5f, 0x6c, 0x66, 0x5f, 0x31, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x50, 0x72,
	0x69, 0x6d, 0x48, 0x00, 0x52, 0x04, 0x70, 0x72, 0x69, 0x6d, 0x12, 0x27, 0x0a, 0x03, 0x66, 0x75,
	0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x5f, 0x6c,
	0x66, 0x5f, 0x31, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x46, 0x75, 0x6e, 0x48, 0x00, 0x52, 0x03,
	0x66, 0x75, 0x6e, 0x12, 0x30, 0x0a, 0x06, 0x66, 0x6f, 0x72, 0x61, 0x6c, 0x6c, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x5f, 0x6c, 0x66, 0x5f, 0x31, 0x2e,
	0x54, 0x79, 0x70, 0x65, 0x2e, 0x46, 0x6f, 0x72, 0x61, 0x6c, 0x6c, 0x48, 0x00, 0x52, 0x06, 0x66,
	0x6f, 0x72, 0x61, 0x6c, 0x6c, 0x12, 0x30, 0x0a, 0x06, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x5f, 0x6c, 0x66, 0x5f,
	0x31, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x48, 0x00, 0x52,
	0x06, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x12, 0x12, 0x0a, 0x03, 0x6e, 0x61, 0x74, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x12, 0x48, 0x00, 0x52, 0x03, 0x6e, 0x61, 0x74, 0x12, 0x27, 0x0a, 0x03, 0x73,
	0x79, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x5f,
	0x6c, 0x66, 0x5f, 0x31, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x53, 0x79, 0x6e, 0x48, 0x00, 0x52,
	0x03, 0x73, 0x79, 0x6e, 0x1a, 0x78, 0x0a, 0x03, 0x56, 0x61, 0x72, 0x12, 0x19, 0x0a, 0x07, 0x76,
	0x61, 0x72, 0x5f, 0x73, 0x74, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x06,
	0x76, 0x61, 0x72, 0x53, 0x74, 0x72, 0x12, 0x2a, 0x0a, 0x10, 0x76, 0x61, 0x72, 0x5f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x6e, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x48, 0x00, 0x52, 0x0e, 0x76, 0x61, 0x72, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x65, 0x64, 0x53,
	0x74, 0x72, 0x12, 0x23, 0x0a, 0x04, 0x61, 0x72, 0x67, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x0f, 0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x5f, 0x6c, 0x66, 0x5f, 0x31, 0x2e, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x04, 0x61, 0x72, 0x67, 0x73, 0x42, 0x05, 0x0a, 0x03, 0x76, 0x61, 0x72, 0x1a, 0x58,
	0x0a, 0x03, 0x43, 0x6f, 0x6e, 0x12, 0x2c, 0x0a, 0x05, 0x74, 0x79, 0x63, 0x6f, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x5f, 0x6c, 0x66, 0x5f, 0x31,
	0x2e, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x05, 0x74, 0x79,
	0x63, 0x6f, 0x6e, 0x12, 0x23, 0x0a, 0x04, 0x61, 0x72, 0x67, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x0f, 0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x5f, 0x6c, 0x66, 0x5f, 0x31, 0x2e, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x04, 0x61, 0x72, 0x67, 0x73, 0x1a, 0x58, 0x0a, 0x03, 0x53, 0x79, 0x6e, 0x12,
	0x2c, 0x0a, 0x05, 0x74, 0x79, 0x73, 0x79, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x5f, 0x6c, 0x66, 0x5f, 0x31, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x53,
	0x79, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x05, 0x74, 0x79, 0x73, 0x79, 0x6e, 0x12, 0x23, 0x0a,
	0x04, 0x61, 0x72, 0x67, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x64, 0x61,
	0x6d, 0x6c, 0x5f, 0x6c, 0x66, 0x5f, 0x31, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x61, 0x72,
	0x67, 0x73, 0x1a, 0x54, 0x0a, 0x04, 0x50, 0x72, 0x69, 0x6d, 0x12, 0x27, 0x0a, 0x04, 0x70, 0x72,
	0x69, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x5f,
	0x6c, 0x66, 0x5f, 0x31, 0x2e, 0x50, 0x72, 0x69, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x70,
	0x72, 0x69, 0x6d, 0x12, 0x23, 0x0a, 0x04, 0x61, 0x72, 0x67, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x0f, 0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x5f, 0x6c, 0x66, 0x5f, 0x31, 0x2e, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x04, 0x61, 0x72, 0x67, 0x73, 0x1a, 0x57, 0x0a, 0x03, 0x46, 0x75, 0x6e, 0x12,
	0x27, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x0f, 0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x5f, 0x6c, 0x66, 0x5f, 0x31, 0x2e, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x27, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x5f,
	0x6c, 0x66, 0x5f, 0x31, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x1a, 0x5d, 0x0a, 0x06, 0x46, 0x6f, 0x72, 0x61, 0x6c, 0x6c, 0x12, 0x2e, 0x0a, 0x04, 0x76,
	0x61, 0x72, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x64, 0x61, 0x6d, 0x6c,
	0x5f, 0x6c, 0x66, 0x5f, 0x31, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x56, 0x61, 0x72, 0x57, 0x69, 0x74,
	0x68, 0x4b, 0x69, 0x6e, 0x64, 0x52, 0x04, 0x76, 0x61, 0x72, 0x73, 0x12, 0x23, 0x0a, 0x04, 0x62,
	0x6f, 0x64, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x64, 0x61, 0x6d, 0x6c,
	0x5f, 0x6c, 0x66, 0x5f, 0x31, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x62, 0x6f, 0x64, 0x79,
	0x1a, 0x3a, 0x0a, 0x06, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x12, 0x30, 0x0a, 0x06, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x64, 0x61, 0x6d,
	0x6c, 0x5f, 0x6c, 0x66, 0x5f, 0x31, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x57, 0x69, 0x74, 0x68,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x42, 0x05, 0x0a, 0x03,
	0x53, 0x75, 0x6d, 0x4a, 0x04, 0x08, 0x06, 0x10, 0x07, 0x4a, 0x04, 0x08, 0x08, 0x10, 0x09, 0x4a,
	0x04, 0x08, 0x09, 0x10, 0x0a, 0x4a, 0x04, 0x08, 0x0a, 0x10, 0x0b, 0x22, 0xdb, 0x02, 0x0a, 0x07,
	0x50, 0x72, 0x69, 0x6d, 0x4c, 0x69, 0x74, 0x12, 0x16, 0x0a, 0x05, 0x69, 0x6e, 0x74, 0x36, 0x34,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x12, 0x48, 0x00, 0x52, 0x05, 0x69, 0x6e, 0x74, 0x36, 0x34, 0x12,
	0x21, 0x0a, 0x0b, 0x64, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x5f, 0x73, 0x74, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0a, 0x64, 0x65, 0x63, 0x69, 0x6d, 0x61, 0x6c, 0x53,
	0x74, 0x72, 0x12, 0x32, 0x0a, 0x14, 0x6e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x5f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x6e, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05,
	0x48, 0x00, 0x52, 0x12, 0x6e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x6e, 0x65, 0x64, 0x53, 0x74, 0x72, 0x12, 0x1b, 0x0a, 0x08, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x73,
	0x74, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x07, 0x74, 0x65, 0x78, 0x74,
	0x53, 0x74, 0x72, 0x12, 0x2c, 0x0a, 0x11, 0x74, 0x65, 0x78, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x6e, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00,
	0x52, 0x0f, 0x74, 0x65, 0x78, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x65, 0x64, 0x53, 0x74,
	0x72, 0x12, 0x1e, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x10, 0x48, 0x00, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x12, 0x1d, 0x0a, 0x09, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x73, 0x74, 0x72, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x08, 0x70, 0x61, 0x72, 0x74, 0x79, 0x53, 0x74, 0x72,
	0x12, 0x2e, 0x0a, 0x12, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e,
	0x65, 0x64, 0x5f, 0x73, 0x74, 0x72, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x10,
	0x70, 0x61, 0x72, 0x74, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x65, 0x64, 0x53, 0x74, 0x72,
	0x12, 0x14, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00,
	0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x42, 0x05, 0x0a, 0x03, 0x53, 0x75, 0x6d, 0x4a, 0x04, 0x08,
	0x03, 0x10, 0x04, 0x4a, 0x04, 0x08, 0x06, 0x10, 0x07, 0x22, 0xe2, 0x01, 0x0a, 0x08, 0x4c, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2c, 0x0a, 0x06, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x5f, 0x6c, 0x66,
	0x5f, 0x31, 0x2e, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x52, 0x65, 0x66, 0x52, 0x06, 0x6d, 0x6f,
	0x64, 0x75, 0x6c, 0x65, 0x12, 0x2f, 0x0a, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x5f, 0x6c, 0x66, 0x5f, 0x31, 0x2e,
	0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x05,
	0x72, 0x61, 0x6e, 0x67, 0x65, 0x1a, 0x77, 0x0a, 0x05, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x1d,
	0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x4c, 0x69, 0x6e, 0x65, 0x12, 0x1b, 0x0a,
	0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x63, 0x6f, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x08, 0x73, 0x74, 0x61, 0x72, 0x74, 0x43, 0x6f, 0x6c, 0x12, 0x19, 0x0a, 0x08, 0x65, 0x6e,
	0x64, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x65, 0x6e,
	0x64, 0x4c, 0x69, 0x6e, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x65, 0x6e, 0x64, 0x5f, 0x63, 0x6f, 0x6c,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x65, 0x6e, 0x64, 0x43, 0x6f, 0x6c, 0x22, 0xac,
	0x1c, 0x0a, 0x04, 0x45, 0x78, 0x70, 0x72, 0x12, 0x2f, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x64, 0x61, 0x6d, 0x6c,
	0x5f, 0x6c, 0x66, 0x5f, 0x31, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08,
	0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x19, 0x0a, 0x07, 0x76, 0x61, 0x72, 0x5f,
	0x73, 0x74, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x06, 0x76, 0x61, 0x72,
	0x53, 0x74, 0x72, 0x12, 0x2a, 0x0a, 0x10, 0x76, 0x61, 0x72, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x6e, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x72, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52,
	0x0e, 0x76, 0x61, 0x72, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x65, 0x64, 0x53, 0x74, 0x72, 0x12,
	0x26, 0x0a, 0x03, 0x76, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x64,
	0x61, 0x6d, 0x6c, 0x5f, 0x6c, 0x66, 0x5f, 0x31, 0x2e, 0x56, 0x61, 0x6c, 0x4e, 0x61, 0x6d, 0x65,
	0x48, 0x00, 0x52, 0x03, 0x76, 0x61, 0x6c, 0x12, 0x36, 0x0a, 0x07, 0x62, 0x75, 0x69, 0x6c, 0x74,
	0x69, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x5f,
	0x6c, 0x66, 0x5f, 0x31, 0x2e, 0x42, 0x75, 0x69, 0x6c, 0x74, 0x69, 0x6e, 0x46, 0x75, 0x6e, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x07, 0x62, 0x75, 0x69, 0x6c, 0x74, 0x69, 0x6e, 0x12,
	0x2f, 0x0a, 0x08, 0x70, 0x72, 0x69, 0x6d, 0x5f, 0x63, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x12, 0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x5f, 0x6c, 0x66, 0x5f, 0x31, 0x2e, 0x50, 0x72,
	0x69, 0x6d, 0x43, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x07, 0x70, 0x72, 0x69, 0x6d, 0x43, 0x6f, 0x6e,
	0x12, 0x2f, 0x0a, 0x08, 0x70, 0x72, 0x69, 0x6d, 0x5f, 0x6c, 0x69, 0x74, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x12, 0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x5f, 0x6c, 0x66, 0x5f, 0x31, 0x2e, 0x50,
	0x72, 0x69, 0x6d, 0x4c, 0x69, 0x74, 0x48, 0x00, 0x52, 0x07, 0x70, 0x72, 0x69, 0x6d, 0x4c, 0x69,
	0x74, 0x12, 0x31, 0x0a, 0x07, 0x72, 0x65, 0x63, 0x5f, 0x63, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x5f, 0x6c, 0x66, 0x5f, 0x31, 0x2e, 0x45,
	0x78, 0x70, 0x72, 0x2e, 0x52, 0x65, 0x63, 0x43, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x06, 0x72, 0x65,
	0x63, 0x43, 0x6f, 0x6e, 0x12, 0x34, 0x0a, 0x08, 0x72, 0x65, 0x63, 0x5f, 0x70, 0x72, 0x6f, 0x6a,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x5f, 0x6c, 0x66,
	0x5f, 0x31, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x2e, 0x52, 0x65, 0x63, 0x50, 0x72, 0x6f, 0x6a, 0x48,
	0x00, 0x52, 0x07, 0x72, 0x65, 0x63, 0x50, 0x72, 0x6f, 0x6a, 0x12, 0x31, 0x0a, 0x07, 0x72, 0x65,
	0x63, 0x5f, 0x75, 0x70, 0x64, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x64, 0x61,
	0x6d, 0x6c, 0x5f, 0x6c, 0x66, 0x5f, 0x31, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x2e, 0x52, 0x65, 0x63,
	0x55, 0x70, 0x64, 0x48, 0x00, 0x52, 0x06, 0x72, 0x65, 0x63, 0x55, 0x70, 0x64, 0x12, 0x3d, 0x0a,
	0x0b, 0x76, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x5f, 0x6c, 0x66, 0x5f, 0x31, 0x2e, 0x45,
	0x78, 0x70, 0x72, 0x2e, 0x56, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x48, 0x00,
	0x52, 0x0a, 0x76, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x12, 0x34, 0x0a, 0x08,
	0x65, 0x6e, 0x75, 0x6d, 0x5f, 0x63, 0x6f, 0x6e, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x5f, 0x6c, 0x66, 0x5f, 0x31, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x2e,
	0x45, 0x6e, 0x75, 0x6d, 0x43, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x07, 0x65, 0x6e, 0x75, 0x6d, 0x43,
	0x6f, 0x6e, 0x12, 0x3a, 0x0a, 0x0a, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x5f, 0x63, 0x6f, 0x6e,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x5f, 0x6c, 0x66,
	0x5f, 0x31, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x43, 0x6f,
	0x6e, 0x48, 0x00, 0x52, 0x09, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x43, 0x6f, 0x6e, 0x12, 0x3d,
	0x0a, 0x0b, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x6a, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x5f, 0x6c, 0x66, 0x5f, 0x31, 0x2e,
	0x45, 0x78, 0x70, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x48,
	0x00, 0x52, 0x0a, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x12, 0x3a, 0x0a,
	0x0a, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x5f, 0x75, 0x70, 0x64, 0x18, 0x17, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x5f, 0x6c, 0x66, 0x5f, 0x31, 0x2e, 0x45, 0x78,
	0x70, 0x72, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x55, 0x70, 0x64, 0x48, 0x00, 0x52, 0x09,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x55, 0x70, 0x64, 0x12, 0x27, 0x0a, 0x03, 0x61, 0x70, 0x70,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x5f, 0x6c, 0x66,
	0x5f, 0x31, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x2e, 0x41, 0x70, 0x70, 0x48, 0x00, 0x52, 0x03, 0x61,
	0x70, 0x70, 0x12, 0x2e, 0x0a, 0x06, 0x74, 0x79, 0x5f, 0x61, 0x70, 0x70, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x5f, 0x6c, 0x66, 0x5f, 0x31, 0x2e, 0x45,
	0x78, 0x70, 0x72, 0x2e, 0x54, 0x79, 0x41, 0x70, 0x70, 0x48, 0x00, 0x52, 0x05, 0x74, 0x79, 0x41,
	0x70, 0x70, 0x12, 0x27, 0x0a, 0x03, 0x61, 0x62, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x13, 0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x5f, 0x6c, 0x66, 0x5f, 0x31, 0x2e, 0x45, 0x78, 0x70, 0x72,
	0x2e, 0x41, 0x62, 0x73, 0x48, 0x00, 0x52, 0x03, 0x61, 0x62, 0x73, 0x12, 0x2e, 0x0a, 0x06, 0x74,
	0x79, 0x5f, 0x61, 0x62, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x64, 0x61,
	0x6d, 0x6c, 0x5f, 0x6c, 0x66, 0x5f, 0x31, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x2e, 0x54, 0x79, 0x41,
	0x62, 0x73, 0x48, 0x00, 0x52, 0x05, 0x74, 0x79, 0x41, 0x62, 0x73, 0x12, 0x25, 0x0a, 0x04, 0x63,
	0x61, 0x73, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x64, 0x61, 0x6d, 0x6c,
	0x5f, 0x6c, 0x66, 0x5f, 0x31, 0x2e, 0x43, 0x61, 0x73, 0x65, 0x48, 0x00, 0x52, 0x04, 0x63, 0x61,
	0x73, 0x65, 0x12, 0x24, 0x0a, 0x03, 0x6c, 0x65, 0x74, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x10, 0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x5f, 0x6c, 0x66, 0x5f, 0x31, 0x2e, 0x42, 0x6c, 0x6f, 0x63,
	0x6b, 0x48, 0x00, 0x52, 0x03, 0x6c, 0x65, 0x74, 0x12, 0x27, 0x0a, 0x03, 0x6e, 0x69, 0x6c, 0x18,
	0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x5f, 0x6c, 0x66, 0x5f,
	0x31, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x2e, 0x4e, 0x69, 0x6c, 0x48, 0x00, 0x52, 0x03, 0x6e, 0x69,
	0x6c, 0x12, 0x2a, 0x0a, 0x04, 0x63, 0x6f, 0x6e, 0x73, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x5f, 0x6c, 0x66, 0x5f, 0x31, 0x2e, 0x45, 0x78, 0x70, 0x72,
	0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x48, 0x00, 0x52, 0x04, 0x63, 0x6f, 0x6e, 0x73, 0x12, 0x2b, 0x0a,
	0x06, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e,
	0x64, 0x61, 0x6d, 0x6c, 0x5f, 0x6c, 0x66, 0x5f, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x48, 0x00, 0x52, 0x06, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x31, 0x0a, 0x08, 0x73, 0x63,
	0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x64,
	0x61, 0x6d, 0x6c, 0x5f, 0x6c, 0x66, 0x5f, 0x31, 0x2e, 0x53, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69,
	0x6f, 0x48, 0x00, 0x52, 0x08, 0x73, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x12, 0x43, 0x0a,
	0x0d, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x6e, 0x6f, 0x6e, 0x65, 0x18, 0x1a,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x5f, 0x6c, 0x66, 0x5f, 0x31,
	0x2e, 0x45, 0x78, 0x70, 0x72, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x4e, 0x6f,
	0x6e, 0x65, 0x48, 0x00, 0x52, 0x0c, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x4e, 0x6f,
	0x6e, 0x65, 0x12, 0x43, 0x0a, 0x0d, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x73,
	0x6f, 0x6d, 0x65, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x64, 0x61, 0x6d, 0x6c,
	0x5f, 0x6c, 0x66, 0x5f, 0x31, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x61, 0x6c, 0x53, 0x6f, 0x6d, 0x65, 0x48, 0x00, 0x52, 0x0c, 0x6f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x61, 0x6c, 0x53, 0x6f, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x06, 0x74, 0x6f, 0x5f, 0x61, 0x6e,
	0x79, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x5f, 0x6c,
	0x66, 0x5f, 0x31, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x2e, 0x54, 0x6f, 0x41, 0x6e, 0x79, 0x48, 0x00,
	0x52, 0x05, 0x74, 0x6f, 0x41, 0x6e, 0x79, 0x12, 0x34, 0x0a, 0x08, 0x66, 0x72, 0x6f, 0x6d, 0x5f,
	0x61, 0x6e, 0x79, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x64, 0x61, 0x6d, 0x6c,
	0x5f, 0x6c, 0x66, 0x5f, 0x31, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x2e, 0x46, 0x72, 0x6f, 0x6d, 0x41,
	0x6e, 0x79, 0x48, 0x00, 0x52, 0x07, 0x66, 0x72, 0x6f, 0x6d, 0x41, 0x6e, 0x79, 0x12, 0x2c, 0x0a,
	0x08, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x72, 0x65, 0x70, 0x18, 0x20, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0f, 0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x5f, 0x6c, 0x66, 0x5f, 0x31, 0x2e, 0x54, 0x79, 0x70, 0x65,
	0x48, 0x00, 0x52, 0x07, 0x74, 0x79, 0x70, 0x65, 0x52, 0x65, 0x70, 0x1a, 0x65, 0x0a, 0x06, 0x52,
	0x65, 0x63, 0x43, 0x6f, 0x6e, 0x12, 0x29, 0x0a, 0x05, 0x74, 0x79, 0x63, 0x6f, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x5f, 0x6c, 0x66, 0x5f, 0x31,
	0x2e, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x52, 0x05, 0x74, 0x79, 0x63, 0x6f, 0x6e,
	0x12, 0x30, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x5f, 0x6c, 0x66, 0x5f, 0x31, 0x2e, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x57, 0x69, 0x74, 0x68, 0x45, 0x78, 0x70, 0x72, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x73, 0x1a, 0xb5, 0x01, 0x0a, 0x07, 0x52, 0x65, 0x63, 0x50, 0x72, 0x6f, 0x6a, 0x12, 0x29,
	0x0a, 0x05, 0x74, 0x79, 0x63, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x64, 0x61, 0x6d, 0x6c, 0x5f, 0x6c, 0x66, 0x5f, 0x31, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x43,
	0x6f, 0x6e, 0x52, 0x05, 0x74, 0x79, 0x63, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x09, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x5f, 0x73, 0x74, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x08,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x53, 0x74, 0x72, 0x12, 0x2e, 0x0a, 0x12, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x72, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x10, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x6e, 0x65, 0x64, 0x53, 0x74, 0x72, 0x12, 0x27, 0x0a, 0x06, 0x72, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x5f,
	0x6c, 0x66, 0x5f, 0x31, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x52, 0x06, 0x72, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x42, 0x07, 0x0a, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x1a, 0xdd, 0x01, 0x0a, 0x06, 0x52,
	0x65, 0x63, 0x55, 0x70, 0x64, 0x12, 0x29, 0x0a, 0x05, 0x74, 0x79, 0x63, 0x6f, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x5f, 0x6c, 0x66, 0x5f, 0x31,
	0x2e, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x52, 0x05, 0x74, 0x79, 0x63, 0x6f, 0x6e,
	0x12, 0x1d, 0x0a, 0x09, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x73, 0x74, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x08, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x53, 0x74, 0x72, 0x12,
	0x2e, 0x0a, 0x12, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x65,
	0x64, 0x5f, 0x73, 0x74, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x10, 0x66,
	0x69, 0x65, 0x6c, 0x64, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x65, 0x64, 0x53, 0x74, 0x72, 0x12,
	0x27, 0x0a, 0x06, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0f, 0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x5f, 0x6c, 0x66, 0x5f, 0x31, 0x2e, 0x45, 0x78, 0x70, 0x72,
	0x52, 0x06, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x27, 0x0a, 0x06, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x5f,
	0x6c, 0x66, 0x5f, 0x31, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x52, 0x06, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x42, 0x07, 0x0a, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x1a, 0xdd, 0x01, 0x0a, 0x0a, 0x56,
	0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x12, 0x29, 0x0a, 0x05, 0x74, 0x79, 0x63,
	0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x5f,
	0x6c, 0x66, 0x5f, 0x31, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x52, 0x05, 0x74,
	0x79, 0x63, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x0f, 0x76, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x5f,
	0x63, 0x6f, 0x6e, 0x5f, 0x73, 0x74, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52,
	0x0d, 0x76, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x53, 0x74, 0x72, 0x12, 0x39,
	0x0a, 0x18, 0x76, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x5f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x6e, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05,
	0x48, 0x00, 0x52, 0x15, 0x76, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x6e, 0x65, 0x64, 0x53, 0x74, 0x72, 0x12, 0x30, 0x0a, 0x0b, 0x76, 0x61, 0x72,
	0x69, 0x61, 0x6e, 0x74, 0x5f, 0x61, 0x72, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f,
	0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x5f, 0x6c, 0x66, 0x5f, 0x31, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x52,
	0x0a, 0x76, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x41, 0x72, 0x67, 0x42, 0x0d, 0x0a, 0x0b, 0x76,
	0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x1a, 0x9c, 0x01, 0x0a, 0x07, 0x45,
	0x6e, 0x75, 0x6d, 0x43, 0x6f, 0x6e, 0x12, 0x2c, 0x0a, 0x05, 0x74, 0x79, 0x63, 0x6f, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x5f, 0x6c, 0x66, 0x5f,
	0x31, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x05, 0x74,
	0x79, 0x63, 0x6f, 0x6e, 0x12, 0x22, 0x0a, 0x0c, 0x65, 0x6e, 0x75, 0x6d, 0x5f, 0x63, 0x6f, 0x6e,
	0x5f, 0x73, 0x74, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0a, 0x65, 0x6e,
	0x75, 0x6d, 0x43, 0x6f, 0x6e, 0x53, 0x74, 0x72, 0x12, 0x33, 0x0a, 0x15, 0x65, 0x6e, 0x75, 0x6d,
	0x5f, 0x63, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x65, 0x64, 0x5f, 0x73, 0x74,
	0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x12, 0x65, 0x6e, 0x75, 0x6d, 0x43,
	0x6f, 0x6e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x65, 0x64, 0x53, 0x74, 0x72, 0x42, 0x0a, 0x0a,
	0x08, 0x65, 0x6e, 0x75, 0x6d, 0x5f, 0x63, 0x6f, 0x6e, 0x1a, 0x3d, 0x0a, 0x09, 0x53, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x43, 0x6f, 0x6e, 0x12, 0x30, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x5f, 0x6c, 0x66,
	0x5f, 0x31, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x57, 0x69, 0x74, 0x68, 0x45, 0x78, 0x70, 0x72,
	0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x1a, 0x8d, 0x01, 0x0a, 0x0a, 0x53, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x50, 0x72, 0x6f, 0x6a, 0x12, 0x1d, 0x0a, 0x09, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x5f, 0x73, 0x74, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x08, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x53, 0x74, 0x72, 0x12, 0x2e, 0x0a, 0x12, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x72, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x48, 0x00, 0x52, 0x10, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x6e, 0x65, 0x64, 0x53, 0x74, 0x72, 0x12, 0x27, 0x0a, 0x06, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x5f, 0x6c, 0x66,
	0x5f, 0x31, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x52, 0x06, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x42,
	0x07, 0x0a, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x1a, 0xb5, 0x01, 0x0a, 0x09, 0x53, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x55, 0x70, 0x64, 0x12, 0x1d, 0x0a, 0x09, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f,
	0x73, 0x74, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x08, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x53, 0x74, 0x72, 0x12, 0x2e, 0x0a, 0x12, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x6e, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x05, 0x48, 0x00, 0x52, 0x10, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e,
	0x65, 0x64, 0x53, 0x74, 0x72, 0x12, 0x27, 0x0a, 0x06, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x5f, 0x6c, 0x66, 0x5f,
	0x31, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x52, 0x06, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x12, 0x27,
	0x0a, 0x06, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f,
	0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x5f, 0x6c, 0x66, 0x5f, 0x31, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x52,
	0x06, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x1a, 0x4d, 0x0a, 0x03, 0x41, 0x70, 0x70, 0x12, 0x21, 0x0a, 0x03, 0x66, 0x75, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x5f, 0x6c, 0x66, 0x5f, 0x31,
	0x2e, 0x45, 0x78, 0x70, 0x72, 0x52, 0x03, 0x66, 0x75, 0x6e, 0x12, 0x23, 0x0a, 0x04, 0x61, 0x72,
	0x67, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x5f,
	0x6c, 0x66, 0x5f, 0x31, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x52, 0x04, 0x61, 0x72, 0x67, 0x73, 0x1a,
	0x53, 0x0a, 0x05, 0x54, 0x79, 0x41, 0x70, 0x70, 0x12, 0x23, 0x0a, 0x04, 0x65, 0x78, 0x70, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x5f, 0x6c, 0x66,
	0x5f, 0x31, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x52, 0x04, 0x65, 0x78, 0x70, 0x72, 0x12, 0x25, 0x0a,
	0x05, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x64,
	0x61, 0x6d, 0x6c, 0x5f, 0x6c, 0x66, 0x5f, 0x31, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x05, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x1a, 0x58, 0x0a, 0x03, 0x41, 0x62, 0x73, 0x12, 0x2c, 0x0a, 0x05, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x64, 0x61, 0x6d,
	0x6c, 0x5f, 0x6c, 0x66, 0x5f, 0x31, 0x2e, 0x56, 0x61, 0x72, 0x57, 0x69, 0x74, 0x68, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x23, 0x0a, 0x04, 0x62, 0x6f, 0x64,
	0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x5f, 0x6c,
	0x66, 0x5f, 0x31, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x52, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x1a, 0x5e,
	0x0a, 0x05, 0x54, 0x79, 0x41, 0x62, 0x73, 0x12, 0x30, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x5f, 0x6c, 0x66,
	0x5f, 0x31, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x56, 0x61, 0x72, 0x57, 0x69, 0x74, 0x68, 0x4b, 0x69,
	0x6e, 0x64, 0x52, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x23, 0x0a, 0x04, 0x62, 0x6f, 0x64,
	0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x5f, 0x6c,
	0x66, 0x5f, 0x31, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x52, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x1a, 0x2a,
	0x0a, 0x03, 0x4e, 0x69, 0x6c, 0x12, 0x23, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x5f, 0x6c, 0x66, 0x5f, 0x31, 0x2e,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x1a, 0x77, 0x0a, 0x04, 0x43, 0x6f,
	0x6e, 0x73, 0x12, 0x23, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0f, 0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x5f, 0x6c, 0x66, 0x5f, 0x31, 0x2e, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x25, 0x0a, 0x05, 0x66, 0x72, 0x6f, 0x6e, 0x74,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x5f, 0x6c, 0x66,
	0x5f, 0x31, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x52, 0x05, 0x66, 0x72, 0x6f, 0x6e, 0x74, 0x12, 0x23,
	0x0a, 0x04, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x64,
	0x61, 0x6d, 0x6c, 0x5f, 0x6c, 0x66, 0x5f, 0x31, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x52, 0x04, 0x74,
	0x61, 0x69, 0x6c, 0x1a, 0x33, 0x0a, 0x0c, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x4e,
	0x6f, 0x6e, 0x65, 0x12, 0x23, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0f, 0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x5f, 0x6c, 0x66, 0x5f, 0x31, 0x2e, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x1a, 0x58, 0x0a, 0x0c, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x61, 0x6c, 0x53, 0x6f, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x5f, 0x6c, 0x66,
	0x5f, 0x31, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x23, 0x0a,
	0x04, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x64, 0x61,
	0x6d, 0x6c, 0x5f, 0x6c, 0x66, 0x5f, 0x31, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x52, 0x04, 0x62, 0x6f,
	0x64, 0x79, 0x1a, 0x51, 0x0a, 0x05, 0x54, 0x6f, 0x41, 0x6e, 0x79, 0x12, 0x23, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x64, 0x61, 0x6d, 0x6c,
	0x5f, 0x6c, 0x66, 0x5f, 0x31, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x12, 0x23, 0x0a, 0x04, 0x65, 0x78, 0x70, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f,
	0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x5f, 0x6c, 0x66, 0x5f, 0x31, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x52,
	0x04, 0x65, 0x78, 0x70, 0x72, 0x1a, 0x53, 0x0a, 0x07, 0x46, 0x72, 0x6f, 0x6d, 0x41, 0x6e, 0x79,
	0x12, 0x23, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f,
	0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x5f, 0x6c, 0x66, 0x5f, 0x31, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x23, 0x0a, 0x04, 0x65, 0x78, 0x70, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x5f, 0x6c, 0x66, 0x5f, 0x31, 0x2e,
	0x45, 0x78, 0x70, 0x72, 0x52, 0x04, 0x65, 0x78, 0x70, 0x72, 0x42, 0x05, 0x0a, 0x03, 0x53, 0x75,
	0x6d, 0x4a, 0x04, 0x08, 0x13, 0x10, 0x14, 0x4a, 0x04, 0x08, 0x18, 0x10, 0x19, 0x22, 0xb4, 0x09,
	0x0a, 0x07, 0x43, 0x61, 0x73, 0x65, 0x41, 0x6c, 0x74, 0x12, 0x2b, 0x0a, 0x07, 0x64, 0x65, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x64, 0x61, 0x6d,
	0x6c, 0x5f, 0x6c, 0x66, 0x5f, 0x31, 0x2e, 0x55, 0x6e, 0x69, 0x74, 0x48, 0x00, 0x52, 0x07, 0x64,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x12, 0x36, 0x0a, 0x07, 0x76, 0x61, 0x72, 0x69, 0x61, 0x6e,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x5f, 0x6c,
	0x66, 0x5f, 0x31, 0x2e, 0x43, 0x61, 0x73, 0x65, 0x41, 0x6c, 0x74, 0x2e, 0x56, 0x61, 0x72, 0x69,
	0x61, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x07, 0x76, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x12, 0x2f,
	0x0a, 0x08, 0x70, 0x72, 0x69, 0x6d, 0x5f, 0x63, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x12, 0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x5f, 0x6c, 0x66, 0x5f, 0x31, 0x2e, 0x50, 0x72, 0x69,
	0x6d, 0x43, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x07, 0x70, 0x72, 0x69, 0x6d, 0x43, 0x6f, 0x6e, 0x12,
	0x23, 0x0a, 0x03, 0x6e, 0x69, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x64,
	0x61, 0x6d, 0x6c, 0x5f, 0x6c, 0x66, 0x5f, 0x31, 0x2e, 0x55, 0x6e, 0x69, 0x74, 0x48, 0x00, 0x52,
	0x03, 0x6e, 0x69, 0x6c, 0x12, 0x2d, 0x0a, 0x04, 0x63, 0x6f, 0x6e, 0x73, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x5f, 0x6c, 0x66, 0x5f, 0x31, 0x2e, 0x43,
	0x61, 0x73, 0x65, 0x41, 0x6c, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x48, 0x00, 0x52, 0x04, 0x63,
	0x6f, 0x6e, 0x73, 0x12, 0x36, 0x0a, 0x0d, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f,
	0x6e, 0x6f, 0x6e, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x64, 0x61, 0x6d,
	0x6c, 0x5f, 0x6c, 0x66, 0x5f, 0x31, 0x2e, 0x55, 0x6e, 0x69, 0x74, 0x48, 0x00, 0x52, 0x0c, 0x6f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x4e, 0x6f, 0x6e, 0x65, 0x12, 0x46, 0x0a, 0x0d, 0x6f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x5f, 0x73, 0x6f, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x5f, 0x6c, 0x66, 0x5f, 0x31, 0x2e, 0x43,
	0x61, 0x73, 0x65, 0x41, 0x6c, 0x74, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x53,
	0x6f, 0x6d, 0x65, 0x48, 0x00, 0x52, 0x0c, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x53,
	0x6f, 0x6d, 0x65, 0x12, 0x2d, 0x0a, 0x04, 0x65, 0x6e, 0x75, 0x6d, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x5f, 0x6c, 0x66, 0x5f, 0x31, 0x2e, 0x43, 0x61,
	0x73, 0x65, 0x41, 0x6c, 0x74, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x48, 0x00, 0x52, 0x04, 0x65, 0x6e,
	0x75, 0x6d, 0x12, 0x23, 0x0a, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0f, 0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x5f, 0x6c, 0x66, 0x5f, 0x31, 0x2e, 0x45, 0x78, 0x70,
	0x72, 0x52, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x1a, 0xf2, 0x01, 0x0a, 0x07, 0x56, 0x61, 0x72, 0x69,
	0x61, 0x6e, 0x74, 0x12, 0x28, 0x0a, 0x03, 0x63, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x5f, 0x6c, 0x66, 0x5f, 0x31, 0x2e, 0x54, 0x79, 0x70,
	0x65, 0x43, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x03, 0x63, 0x6f, 0x6e, 0x12, 0x21, 0x0a,
	0x0b, 0x76, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x00, 0x52, 0x0a, 0x76, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x53, 0x74, 0x72,
	0x12, 0x32, 0x0a, 0x14, 0x76, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x6e, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00,
	0x52, 0x12, 0x76, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x65,
	0x64, 0x53, 0x74, 0x72, 0x12, 0x1f, 0x0a, 0x0a, 0x62, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x5f, 0x73,
	0x74, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x09, 0x62, 0x69, 0x6e, 0x64,
	0x65, 0x72, 0x53, 0x74, 0x72, 0x12, 0x30, 0x0a, 0x13, 0x62, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x5f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x72, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x05, 0x48, 0x01, 0x52, 0x11, 0x62, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x6e, 0x65, 0x64, 0x53, 0x74, 0x72, 0x42, 0x09, 0x0a, 0x07, 0x76, 0x61, 0x72, 0x69, 0x61,
	0x6e, 0x74, 0x42, 0x08, 0x0a, 0x06, 0x62, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x1a, 0xa6, 0x01, 0x0a,
	0x04, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x28, 0x0a, 0x03, 0x63, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x5f, 0x6c, 0x66, 0x5f, 0x31, 0x2e, 0x54,
	0x79, 0x70, 0x65, 0x43, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x03, 0x63, 0x6f, 0x6e, 0x12,
	0x29, 0x0a, 0x0f, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x73,
	0x74, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x53, 0x74, 0x72, 0x12, 0x3a, 0x0a, 0x18, 0x63, 0x6f,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e,
	0x65, 0x64, 0x5f, 0x73, 0x74, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x16,
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x6e, 0x65, 0x64, 0x53, 0x74, 0x72, 0x42, 0x0d, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x6f, 0x72, 0x1a, 0xd0, 0x01, 0x0a, 0x04, 0x43, 0x6f, 0x6e, 0x73, 0x12, 0x22,
	0x0a, 0x0c, 0x76, 0x61, 0x72, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x5f, 0x73, 0x74, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0a, 0x76, 0x61, 0x72, 0x48, 0x65, 0x61, 0x64, 0x53,
	0x74, 0x72, 0x12, 0x33, 0x0a, 0x15, 0x76, 0x61, 0x72, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x5f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x6e, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x48, 0x00, 0x52, 0x12, 0x76, 0x61, 0x72, 0x48, 0x65, 0x61, 0x64, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x6e, 0x65, 0x64, 0x53, 0x74, 0x72, 0x12, 0x22, 0x0a, 0x0c, 0x76, 0x61, 0x72, 0x5f, 0x74,
	0x61, 0x69, 0x6c, 0x5f, 0x73, 0x74, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52,
	0x0a, 0x76, 0x61, 0x72, 0x54, 0x61, 0x69, 0x6c, 0x53, 0x74, 0x72, 0x12, 0x33, 0x0a, 0x15, 0x76,
	0x61, 0x72, 0x5f, 0x74, 0x61, 0x69, 0x6c, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x65, 0x64,
	0x5f, 0x73, 0x74, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x12, 0x76, 0x61,
	0x72, 0x54, 0x61, 0x69, 0x6c, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x65, 0x64, 0x53, 0x74, 0x72,
	0x42, 0x0a, 0x0a, 0x08, 0x76, 0x61, 0x72, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x42, 0x0a, 0x0a, 0x08,
	0x76, 0x61, 0x72, 0x5f, 0x74, 0x61, 0x69, 0x6c, 0x1a, 0x73, 0x0a, 0x0c, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x61, 0x6c, 0x53, 0x6f, 0x6d, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x76, 0x61, 0x72, 0x5f,
	0x62, 0x6f, 0x64, 0x79, 0x5f, 0x73, 0x74, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00,
	0x52, 0x0a, 0x76, 0x61, 0x72, 0x42, 0x6f, 0x64, 0x79, 0x53, 0x74, 0x72, 0x12, 0x33, 0x0a, 0x15,
	0x76, 0x61, 0x72, 0x5f, 0x62, 0x6f, 0x64, 0x79, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x65,
	0x64, 0x5f, 0x73, 0x74, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x12, 0x76,
	0x61, 0x72, 0x42, 0x6f, 0x64, 0x79, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x65, 0x64, 0x53, 0x74,
	0x72, 0x42, 0x0a, 0x0a, 0x08, 0x76, 0x61, 0x72, 0x5f, 0x62, 0x6f, 0x64, 0x79, 0x42, 0x05, 0x0a,
	0x03, 0x53, 0x75, 0x6d, 0x22, 0x55, 0x0a, 0x04, 0x43, 0x61, 0x73, 0x65, 0x12, 0x25, 0x0a, 0x05,
	0x73, 0x63, 0x72, 0x75, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x64, 0x61,
	0x6d, 0x6c, 0x5f, 0x6c, 0x66, 0x5f, 0x31, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x52, 0x05, 0x73, 0x63,
	0x72, 0x75, 0x74, 0x12, 0x26, 0x0a, 0x04, 0x61, 0x6c, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x5f, 0x6c, 0x66, 0x5f, 0x31, 0x2e, 0x43, 0x61,
	0x73, 0x65, 0x41, 0x6c, 0x74, 0x52, 0x04, 0x61, 0x6c, 0x74, 0x73, 0x22, 0x5c, 0x0a, 0x05, 0x42,
	0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x2e, 0x0a, 0x08, 0x62, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x5f, 0x6c, 0x66,
	0x5f, 0x31, 0x2e, 0x42, 0x69, 0x6e, 0x64, 0x69, 0x6e, 0x67, 0x52, 0x08, 0x62, 0x69, 0x6e, 0x64,
	0x69, 0x6e, 0x67, 0x73, 0x12, 0x23, 0x0a, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x5f, 0x6c, 0x66, 0x5f, 0x31, 0x2e, 0x45,
	0x78, 0x70, 0x72, 0x52, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x22, 0x50, 0x0a, 0x04, 0x50, 0x75, 0x72,
	0x65, 0x12, 0x23, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0f, 0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x5f, 0x6c, 0x66, 0x5f, 0x31, 0x2e, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x23, 0x0a, 0x04, 0x65, 0x78, 0x70, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x5f, 0x6c, 0x66, 0x5f, 0x31,
	0x2e, 0x45, 0x78, 0x70, 0x72, 0x52, 0x04, 0x65, 0x78, 0x70, 0x72, 0x22, 0x8a, 0x09, 0x0a, 0x06,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x25, 0x0a, 0x04, 0x70, 0x75, 0x72, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x5f, 0x6c, 0x66, 0x5f, 0x31,
	0x2e, 0x50, 0x75, 0x72, 0x65, 0x48, 0x00, 0x52, 0x04, 0x70, 0x75, 0x72, 0x65, 0x12, 0x28, 0x0a,
	0x05, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x64,
	0x61, 0x6d, 0x6c, 0x5f, 0x6c, 0x66, 0x5f, 0x31, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x00,
	0x52, 0x05, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x32, 0x0a, 0x06, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x5f, 0x6c,
	0x66, 0x5f, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x48, 0x00, 0x52, 0x06, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x38, 0x0a, 0x08, 0x65,
	0x78, 0x65, 0x72, 0x63, 0x69, 0x73, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x64, 0x61, 0x6d, 0x6c, 0x5f, 0x6c, 0x66, 0x5f, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65,
	0x2e, 0x45, 0x78, 0x65, 0x72, 0x63, 0x69, 0x73, 0x65, 0x48, 0x00, 0x52, 0x08, 0x65, 0x78, 0x65,
	0x72, 0x63, 0x69, 0x73, 0x65, 0x12, 0x2f, 0x0a, 0x05, 0x66, 0x65, 0x74, 0x63, 0x68, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x5f, 0x6c, 0x66, 0x5f, 0x31,
	0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x46, 0x65, 0x74, 0x63, 0x68, 0x48, 0x00, 0x52,
	0x05, 0x66, 0x65, 0x74, 0x63, 0x68, 0x12, 0x2c, 0x0a, 0x08, 0x67, 0x65, 0x74, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x5f,
	0x6c, 0x66, 0x5f, 0x31, 0x2e, 0x55, 0x6e, 0x69, 0x74, 0x48, 0x00, 0x52, 0x07, 0x67, 0x65, 0x74,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x45, 0x0a, 0x0d, 0x6c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x5f, 0x62,
	0x79, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x64, 0x61,
	0x6d, 0x6c, 0x5f, 0x6c, 0x66, 0x5f, 0x31, 0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x52,
	0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x42, 0x79, 0x4b, 0x65, 0x79, 0x48, 0x00, 0x52, 0x0b,
	0x6c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x42, 0x79, 0x4b, 0x65, 0x79, 0x12, 0x43, 0x0a, 0x0c, 0x66,
	0x65, 0x74, 0x63, 0x68, 0x5f, 0x62, 0x79, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x5f, 0x6c, 0x66, 0x5f, 0x31, 0x2e, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x2e, 0x52, 0x65, 0x74, 0x72, 0x69, 0x65, 0x76, 0x65, 0x42, 0x79, 0x4b,
	0x65, 0x79, 0x48, 0x00, 0x52, 0x0a, 0x66, 0x65, 0x74, 0x63, 0x68, 0x42, 0x79, 0x4b, 0x65, 0x79,
	0x12, 0x3c, 0x0a, 0x0a, 0x65, 0x6d, 0x62, 0x65, 0x64, 0x5f, 0x65, 0x78, 0x70, 0x72, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x5f, 0x6c, 0x66, 0x5f, 0x31,
	0x2e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x45, 0x78, 0x70,
	0x72, 0x48, 0x00, 0x52, 0x09, 0x65, 0x6d, 0x62, 0x65, 0x64, 0x45, 0x78, 0x70, 0x72, 0x1a, 0x61,
	0x0a, 0x06, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x12, 0x32, 0x0a, 0x08, 0x74, 0x65, 0x6d, 0x70,
	0x6c, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x64, 0x61, 0x6d,
	0x6c, 0x5f, 0x6c, 0x66, 0x5f, 0x31, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x6e, 0x4e, 0x61,
	0x6d, 0x65, 0x52, 0x08, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x23, 0x0a, 0x04,
	0x65, 0x78, 0x70, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x64, 0x61, 0x6d,
	0x6c, 0x5f, 0x6c, 0x66, 0x5f, 0x31, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x52, 0x04, 0x65, 0x78, 0x70,
	0x72, 0x1a, 0x88, 0x02, 0x0a, 0x08, 0x45, 0x78, 0x65, 0x72, 0x63, 0x69, 0x73, 0x65, 0x12, 0x32,
	0x0a, 0x08, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x5f, 0x6c, 0x66, 0x5f, 0x31, 0x2e, 0x54, 0x79, 0x70,
	0x65, 0x43, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x08, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61,
	0x74, 0x65, 0x12, 0x1f, 0x0a, 0x0a, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x5f, 0x73, 0x74, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x09, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65,
	0x53, 0x74, 0x72, 0x12, 0x30, 0x0a, 0x13, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x6e, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05,
	0x48, 0x00, 0x52, 0x11, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e,
	0x65, 0x64, 0x53, 0x74, 0x72, 0x12, 0x21, 0x0a, 0x03, 0x63, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x5f, 0x6c, 0x66, 0x5f, 0x31, 0x2e, 0x45,
	0x78, 0x70, 0x72, 0x52, 0x03, 0x63, 0x69, 0x64, 0x12, 0x25, 0x0a, 0x05, 0x61, 0x63, 0x74, 0x6f,
	0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x5f, 0x6c,
	0x66, 0x5f, 0x31, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x52, 0x05, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x12,
	0x21, 0x0a, 0x03, 0x61, 0x72, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x64,
	0x61, 0x6d, 0x6c, 0x5f, 0x6c, 0x66, 0x5f, 0x31, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x52, 0x03, 0x61,
	0x72, 0x67, 0x42, 0x08, 0x0a, 0x06, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x1a, 0x64, 0x0a, 0x05,
	0x46, 0x65, 0x74, 0x63, 0x68, 0x12, 0x32, 0x0a, 0x08, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x5f, 0x6c,
	0x66, 0x5f, 0x31, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x52,
	0x08, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x21, 0x0a, 0x03, 0x63, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x5f, 0x6c, 0x66,
	0x5f, 0x31, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x52, 0x03, 0x63, 0x69, 0x64, 0x4a, 0x04, 0x08, 0x03,
	0x10, 0x04, 0x1a, 0x55, 0x0a, 0x09, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x45, 0x78, 0x70, 0x72, 0x12,
	0x23, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e,
	0x64, 0x61, 0x6d, 0x6c, 0x5f, 0x6c, 0x66, 0x5f, 0x31, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x23, 0x0a, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x5f, 0x6c, 0x66, 0x5f, 0x31, 0x2e, 0x45,
	0x78, 0x70, 0x72, 0x52, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x1a, 0x66, 0x0a, 0x0d, 0x52, 0x65, 0x74,
	0x72, 0x69, 0x65, 0x76, 0x65, 0x42, 0x79, 0x4b, 0x65, 0x79, 0x12, 0x32, 0x0a, 0x08, 0x74, 0x65,
	0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x64,
	0x61, 0x6d, 0x6c, 0x5f, 0x6c, 0x66, 0x5f, 0x31, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x6e,
	0x4e, 0x61, 0x6d, 0x65, 0x52, 0x08, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x21,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x64, 0x61,
	0x6d, 0x6c, 0x5f, 0x6c, 0x66, 0x5f, 0x31, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x42, 0x05, 0x0a, 0x03, 0x53, 0x75, 0x6d, 0x22, 0xf5, 0x04, 0x0a, 0x08, 0x53, 0x63, 0x65,
	0x6e, 0x61, 0x72, 0x69, 0x6f, 0x12, 0x25, 0x0a, 0x04, 0x70, 0x75, 0x72, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x5f, 0x6c, 0x66, 0x5f, 0x31, 0x2e,
	0x50, 0x75, 0x72, 0x65, 0x48, 0x00, 0x52, 0x04, 0x70, 0x75, 0x72, 0x65, 0x12, 0x28, 0x0a, 0x05,
	0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x64, 0x61,
	0x6d, 0x6c, 0x5f, 0x6c, 0x66, 0x5f, 0x31, 0x2e, 0x42, 0x6c, 0x6f, 0x63, 0x6b, 0x48, 0x00, 0x52,
	0x05, 0x62, 0x6c, 0x6f, 0x63, 0x6b, 0x12, 0x34, 0x0a, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x5f, 0x6c, 0x66,
	0x5f, 0x31, 0x2e, 0x53, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x2e, 0x43, 0x6f, 0x6d, 0x6d,
	0x69, 0x74, 0x48, 0x00, 0x52, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x12, 0x3c, 0x0a, 0x0a,
	0x6d, 0x75, 0x73, 0x74, 0x46, 0x61, 0x69, 0x6c, 0x41, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x5f, 0x6c, 0x66, 0x5f, 0x31, 0x2e, 0x53, 0x63, 0x65,
	0x6e, 0x61, 0x72, 0x69, 0x6f, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x48, 0x00, 0x52, 0x0a,
	0x6d, 0x75, 0x73, 0x74, 0x46, 0x61, 0x69, 0x6c, 0x41, 0x74, 0x12, 0x25, 0x0a, 0x04, 0x70, 0x61,
	0x73, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x5f,
	0x6c, 0x66, 0x5f, 0x31, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x48, 0x00, 0x52, 0x04, 0x70, 0x61, 0x73,
	0x73, 0x12, 0x2c, 0x0a, 0x08, 0x67, 0x65, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x5f, 0x6c, 0x66, 0x5f, 0x31, 0x2e,
	0x55, 0x6e, 0x69, 0x74, 0x48, 0x00, 0x52, 0x07, 0x67, 0x65, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x2e, 0x0a, 0x09, 0x67, 0x65, 0x74, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x79, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x5f, 0x6c, 0x66, 0x5f, 0x31, 0x2e, 0x45,
	0x78, 0x70, 0x72, 0x48, 0x00, 0x52, 0x08, 0x67, 0x65, 0x74, 0x50, 0x61, 0x72, 0x74, 0x79, 0x12,
	0x3e, 0x0a, 0x0a, 0x65, 0x6d, 0x62, 0x65, 0x64, 0x5f, 0x65, 0x78, 0x70, 0x72, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x5f, 0x6c, 0x66, 0x5f, 0x31, 0x2e,
	0x53, 0x63, 0x65, 0x6e, 0x61, 0x72, 0x69, 0x6f, 0x2e, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x45, 0x78,
	0x70, 0x72, 0x48, 0x00, 0x52, 0x09, 0x65, 0x6d, 0x62, 0x65, 0x64, 0x45, 0x78, 0x70, 0x72, 0x1a,
	0x80, 0x01, 0x0a, 0x06, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x12, 0x25, 0x0a, 0x05, 0x70, 0x61,
	0x72, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x64, 0x61, 0x6d, 0x6c,
	0x5f, 0x6c, 0x66, 0x5f, 0x31, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x52, 0x05, 0x70, 0x61, 0x72, 0x74,
	0x79, 0x12, 0x23, 0x0a, 0x04, 0x65, 0x78, 0x70, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0f, 0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x5f, 0x6c, 0x66, 0x5f, 0x31, 0x2e, 0x45, 0x78, 0x70, 0x72,
	0x52, 0x04, 0x65, 0x78, 0x70, 0x72, 0x12, 0x2a, 0x0a, 0x08, 0x72, 0x65, 0x74, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x5f,
	0x6c, 0x66, 0x5f, 0x31, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x07, 0x72, 0x65, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x1a, 0x55, 0x0a, 0x09, 0x45, 0x6d, 0x62, 0x65, 0x64, 0x45, 0x78, 0x70, 0x72, 0x12,
	0x23, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e,
	0x64, 0x61, 0x6d, 0x6c, 0x5f, 0x6c, 0x66, 0x5f, 0x31, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x23, 0x0a, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x5f, 0x6c, 0x66, 0x5f, 0x31, 0x2e, 0x45,
	0x78, 0x70, 0x72, 0x52, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x42, 0x05, 0x0a, 0x03, 0x53, 0x75, 0x6d,
	0x22, 0xe5, 0x03, 0x0a, 0x0e, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x43, 0x68, 0x6f,
	0x69, 0x63, 0x65, 0x12, 0x1b, 0x0a, 0x08, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x73, 0x74, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x07, 0x6e, 0x61, 0x6d, 0x65, 0x53, 0x74, 0x72,
	0x12, 0x2c, 0x0a, 0x11, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x65,
	0x64, 0x5f, 0x73, 0x74, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x0f, 0x6e,
	0x61, 0x6d, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x65, 0x64, 0x53, 0x74, 0x72, 0x12, 0x1c,
	0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x69, 0x6e, 0x67, 0x12, 0x31, 0x0a, 0x0b,
	0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0f, 0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x5f, 0x6c, 0x66, 0x5f, 0x31, 0x2e, 0x45, 0x78,
	0x70, 0x72, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x73, 0x12,
	0x35, 0x0a, 0x0a, 0x61, 0x72, 0x67, 0x5f, 0x62, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x5f, 0x6c, 0x66, 0x5f, 0x31, 0x2e,
	0x56, 0x61, 0x72, 0x57, 0x69, 0x74, 0x68, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x61, 0x72, 0x67,
	0x42, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x2a, 0x0a, 0x08, 0x72, 0x65, 0x74, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x5f,
	0x6c, 0x66, 0x5f, 0x31, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x07, 0x72, 0x65, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x27, 0x0a, 0x06, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x5f, 0x6c, 0x66, 0x5f, 0x31, 0x2e, 0x45,
	0x78, 0x70, 0x72, 0x52, 0x06, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x73,
	0x65, 0x6c, 0x66, 0x5f, 0x62, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x72, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0d, 0x73, 0x65, 0x6c, 0x66, 0x42, 0x69, 0x6e, 0x64,
	0x65, 0x72, 0x53, 0x74, 0x72, 0x12, 0x39, 0x0a, 0x18, 0x73, 0x65, 0x6c, 0x66, 0x5f, 0x62, 0x69,
	0x6e, 0x64, 0x65, 0x72, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x65, 0x64, 0x5f, 0x73, 0x74,
	0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x15, 0x73, 0x65, 0x6c, 0x66, 0x42,
	0x69, 0x6e, 0x64, 0x65, 0x72, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x65, 0x64, 0x53, 0x74, 0x72,
	0x12, 0x2f, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x5f, 0x6c, 0x66, 0x5f, 0x31, 0x2e, 0x4c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x42, 0x06, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0d, 0x0a, 0x0b, 0x73, 0x65, 0x6c,
	0x66, 0x5f, 0x62, 0x69, 0x6e, 0x64, 0x65, 0x72, 0x22, 0xe8, 0x04, 0x0a, 0x07, 0x4b, 0x65, 0x79,
	0x45, 0x78, 0x70, 0x72, 0x12, 0x42, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x64, 0x61, 0x6d, 0x6c,
	0x5f, 0x6c, 0x66, 0x5f, 0x31, 0x2e, 0x4b, 0x65, 0x79, 0x45, 0x78, 0x70, 0x72, 0x2e, 0x50, 0x72,
	0x6f, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x48, 0x00, 0x52, 0x0b, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x33, 0x0a, 0x06, 0x72, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x5f,
	0x6c, 0x66, 0x5f, 0x31, 0x2e, 0x4b, 0x65, 0x79, 0x45, 0x78, 0x70, 0x72, 0x2e, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x48, 0x00, 0x52, 0x06, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x1a, 0x8f, 0x01,
	0x0a, 0x0a, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x29, 0x0a, 0x05,
	0x74, 0x79, 0x63, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x64, 0x61,
	0x6d, 0x6c, 0x5f, 0x6c, 0x66, 0x5f, 0x31, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x43, 0x6f, 0x6e,
	0x52, 0x05, 0x74, 0x79, 0x63, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x09, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x5f, 0x73, 0x74, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x08, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x53, 0x74, 0x72, 0x12, 0x2e, 0x0a, 0x12, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x72, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x05, 0x48, 0x00, 0x52, 0x10, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x6e, 0x65, 0x64, 0x53, 0x74, 0x72, 0x42, 0x07, 0x0a, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x1a,
	0x4e, 0x0a, 0x0b, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x3f,
	0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x5f, 0x6c, 0x66, 0x5f, 0x31, 0x2e,
	0x4b, 0x65, 0x79, 0x45, 0x78, 0x70, 0x72, 0x2e, 0x50, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a,
	0x8d, 0x01, 0x0a, 0x0b, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12,
	0x1d, 0x0a, 0x09, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x73, 0x74, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x48, 0x00, 0x52, 0x08, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x53, 0x74, 0x72, 0x12, 0x2e,
	0x0a, 0x12, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x65, 0x64,
	0x5f, 0x73, 0x74, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x10, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x65, 0x64, 0x53, 0x74, 0x72, 0x12, 0x26,
	0x0a, 0x04, 0x65, 0x78, 0x70, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x64,
	0x61, 0x6d, 0x6c, 0x5f, 0x6c, 0x66, 0x5f, 0x31, 0x2e, 0x4b, 0x65, 0x79, 0x45, 0x78, 0x70, 0x72,
	0x52, 0x04, 0x65, 0x78, 0x70, 0x72, 0x42, 0x07, 0x0a, 0x05, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x1a,
	0x6b, 0x0a, 0x06, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x29, 0x0a, 0x05, 0x74, 0x79, 0x63,
	0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x5f,
	0x6c, 0x66, 0x5f, 0x31, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x52, 0x05, 0x74,
	0x79, 0x63, 0x6f, 0x6e, 0x12, 0x36, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x5f, 0x6c, 0x66, 0x5f, 0x31,
	0x2e, 0x4b, 0x65, 0x79, 0x45, 0x78, 0x70, 0x72, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x42, 0x05, 0x0a, 0x03,
	0x53, 0x75, 0x6d, 0x22, 0x80, 0x06, 0x0a, 0x0b, 0x44, 0x65, 0x66, 0x54, 0x65, 0x6d, 0x70, 0x6c,
	0x61, 0x74, 0x65, 0x12, 0x38, 0x0a, 0x0b, 0x74, 0x79, 0x63, 0x6f, 0x6e, 0x5f, 0x64, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x5f,
	0x6c, 0x66, 0x5f, 0x31, 0x2e, 0x44, 0x6f, 0x74, 0x74, 0x65, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x48,
	0x00, 0x52, 0x0a, 0x74, 0x79, 0x63, 0x6f, 0x6e, 0x44, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x32, 0x0a,
	0x14, 0x74, 0x79, 0x63, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x65, 0x64, 0x5f,
	0x64, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x12, 0x74,
	0x79, 0x63, 0x6f, 0x6e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x65, 0x64, 0x44, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x1d, 0x0a, 0x09, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x5f, 0x73, 0x74, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x08, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x53, 0x74, 0x72,
	0x12, 0x2e, 0x0a, 0x12, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e,
	0x65, 0x64, 0x5f, 0x73, 0x74, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x10,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x65, 0x64, 0x53, 0x74, 0x72,
	0x12, 0x29, 0x0a, 0x07, 0x70, 0x72, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0f, 0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x5f, 0x6c, 0x66, 0x5f, 0x31, 0x2e, 0x45, 0x78,
	0x70, 0x72, 0x52, 0x07, 0x70, 0x72, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x12, 0x31, 0x0a, 0x0b, 0x73,
	0x69, 0x67, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0f, 0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x5f, 0x6c, 0x66, 0x5f, 0x31, 0x2e, 0x45, 0x78, 0x70,
	0x72, 0x52, 0x0b, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x12, 0x2d,
	0x0a, 0x09, 0x61, 0x67, 0x72, 0x65, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0f, 0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x5f, 0x6c, 0x66, 0x5f, 0x31, 0x2e, 0x45, 0x78,
	0x70, 0x72, 0x52, 0x09, 0x61, 0x67, 0x72, 0x65, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x33, 0x0a,
	0x07, 0x63, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x5f, 0x6c, 0x66, 0x5f, 0x31, 0x2e, 0x54, 0x65, 0x6d, 0x70, 0x6c,
	0x61, 0x74, 0x65, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x52, 0x07, 0x63, 0x68, 0x6f, 0x69, 0x63,
	0x65, 0x73, 0x12, 0x2d, 0x0a, 0x09, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x5f, 0x6c, 0x66, 0x5f,
	0x31, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x52, 0x09, 0x6f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x73, 0x12, 0x2f, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x5f, 0x6c, 0x66, 0x5f, 0x31, 0x2e,
	0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x2f, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x5f, 0x6c, 0x66, 0x5f, 0x31, 0x2e, 0x44, 0x65, 0x66, 0x54,
	0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x2e, 0x44, 0x65, 0x66, 0x4b, 0x65, 0x79, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x1a, 0xc8, 0x01, 0x0a, 0x06, 0x44, 0x65, 0x66, 0x4b, 0x65, 0x79, 0x12, 0x23,
	0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x64,
	0x61, 0x6d, 0x6c, 0x5f, 0x6c, 0x66, 0x5f, 0x31, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x26, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x12, 0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x5f, 0x6c, 0x66, 0x5f, 0x31, 0x2e, 0x4b, 0x65, 0x79,
	0x45, 0x78, 0x70, 0x72, 0x48, 0x00, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x32, 0x0a, 0x0b, 0x63,
	0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x78, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0f, 0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x5f, 0x6c, 0x66, 0x5f, 0x31, 0x2e, 0x45, 0x78, 0x70,
	0x72, 0x48, 0x00, 0x52, 0x0a, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x78, 0x4b, 0x65, 0x79, 0x12,
	0x31, 0x0a, 0x0b, 0x6d, 0x61, 0x69, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65, 0x72, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x5f, 0x6c, 0x66, 0x5f, 0x31,
	0x2e, 0x45, 0x78, 0x70, 0x72, 0x52, 0x0b, 0x6d, 0x61, 0x69, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x65,
	0x72, 0x73, 0x42, 0x0a, 0x0a, 0x08, 0x6b, 0x65, 0x79, 0x5f, 0x65, 0x78, 0x70, 0x72, 0x42, 0x07,
	0x0a, 0x05, 0x74, 0x79, 0x63, 0x6f, 0x6e, 0x42, 0x07, 0x0a, 0x05, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x4a, 0x04, 0x08, 0x03, 0x10, 0x04, 0x22, 0xfe, 0x04, 0x0a, 0x0b, 0x44, 0x65, 0x66, 0x44, 0x61,
	0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x12, 0x36, 0x0a, 0x0a, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x64,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x64, 0x61, 0x6d,
	0x6c, 0x5f, 0x6c, 0x66, 0x5f, 0x31, 0x2e, 0x44, 0x6f, 0x74, 0x74, 0x65, 0x64, 0x4e, 0x61, 0x6d,
	0x65, 0x48, 0x00, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x44, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x30,
	0x0a, 0x13, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x65, 0x64, 0x5f,
	0x64, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x11, 0x6e,
	0x61, 0x6d, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x65, 0x64, 0x44, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x32, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x5f, 0x6c, 0x66, 0x5f, 0x31, 0x2e, 0x54, 0x79, 0x70,
	0x65, 0x56, 0x61, 0x72, 0x57, 0x69, 0x74, 0x68, 0x4b, 0x69, 0x6e, 0x64, 0x52, 0x06, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x73, 0x12, 0x37, 0x0a, 0x06, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x5f, 0x6c, 0x66, 0x5f, 0x31,
	0x2e, 0x44, 0x65, 0x66, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x73, 0x48, 0x01, 0x52, 0x06, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x39, 0x0a,
	0x07, 0x76, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x5f, 0x6c, 0x66, 0x5f, 0x31, 0x2e, 0x44, 0x65, 0x66, 0x44, 0x61,
	0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x48, 0x01, 0x52,
	0x07, 0x76, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x12, 0x3d, 0x0a, 0x04, 0x65, 0x6e, 0x75, 0x6d,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x5f, 0x6c, 0x66,
	0x5f, 0x31, 0x2e, 0x44, 0x65, 0x66, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x2e, 0x45,
	0x6e, 0x75, 0x6d, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x48,
	0x01, 0x52, 0x04, 0x65, 0x6e, 0x75, 0x6d, 0x12, 0x22, 0x0a, 0x0c, 0x73, 0x65, 0x72, 0x69, 0x61,
	0x6c, 0x69, 0x7a, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x73,
	0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x2f, 0x0a, 0x08, 0x6c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x64, 0x61, 0x6d, 0x6c, 0x5f, 0x6c, 0x66, 0x5f, 0x31, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x3a, 0x0a, 0x06,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x30, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x5f, 0x6c, 0x66,
	0x5f, 0x31, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x57, 0x69, 0x74, 0x68, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x1a, 0x79, 0x0a, 0x10, 0x45, 0x6e, 0x75, 0x6d,
	0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x12, 0x29, 0x0a, 0x10,
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x5f, 0x73, 0x74, 0x72,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x6f, 0x72, 0x73, 0x53, 0x74, 0x72, 0x12, 0x3a, 0x0a, 0x19, 0x63, 0x6f, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x65, 0x64,
	0x5f, 0x73, 0x74, 0x72, 0x18, 0x02, 0x20, 0x03, 0x28, 0x05, 0x52, 0x17, 0x63, 0x6f, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x73, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x65, 0x64,
	0x53, 0x74, 0x72, 0x42, 0x06, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x44,
	0x61, 0x74, 0x61, 0x43, 0x6f, 0x6e, 0x73, 0x22, 0x88, 0x02, 0x0a, 0x0a, 0x44, 0x65, 0x66, 0x54,
	0x79, 0x70, 0x65, 0x53, 0x79, 0x6e, 0x12, 0x36, 0x0a, 0x0a, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x64,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x64, 0x61, 0x6d,
	0x6c, 0x5f, 0x6c, 0x66, 0x5f, 0x31, 0x2e, 0x44, 0x6f, 0x74, 0x74, 0x65, 0x64, 0x4e, 0x61, 0x6d,
	0x65, 0x48, 0x00, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x44, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x30,
	0x0a, 0x13, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x65, 0x64, 0x5f,
	0x64, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x11, 0x6e,
	0x61, 0x6d, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x65, 0x64, 0x44, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x32, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x5f, 0x6c, 0x66, 0x5f, 0x31, 0x2e, 0x54, 0x79, 0x70,
	0x65, 0x56, 0x61, 0x72, 0x57, 0x69, 0x74, 0x68, 0x4b, 0x69, 0x6e, 0x64, 0x52, 0x06, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x73, 0x12, 0x23, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x5f, 0x6c, 0x66, 0x5f, 0x31, 0x2e, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x2f, 0x0a, 0x08, 0x6c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x64, 0x61,
	0x6d, 0x6c, 0x5f, 0x6c, 0x66, 0x5f, 0x31, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x06, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x22, 0xf2, 0x02, 0x0a, 0x08, 0x44, 0x65, 0x66, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x46, 0x0a, 0x0e, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x77, 0x69, 0x74, 0x68, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x5f, 0x6c,
	0x66, 0x5f, 0x31, 0x2e, 0x44, 0x65, 0x66, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x2e, 0x4e, 0x61, 0x6d,
	0x65, 0x57, 0x69, 0x74, 0x68, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0c, 0x6e, 0x61, 0x6d, 0x65, 0x57,
	0x69, 0x74, 0x68, 0x54, 0x79, 0x70, 0x65, 0x12, 0x23, 0x0a, 0x04, 0x65, 0x78, 0x70, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x5f, 0x6c, 0x66, 0x5f,
	0x31, 0x2e, 0x45, 0x78, 0x70, 0x72, 0x52, 0x04, 0x65, 0x78, 0x70, 0x72, 0x12, 0x2a, 0x0a, 0x11,
	0x6e, 0x6f, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x6c, 0x69, 0x74, 0x65, 0x72, 0x61, 0x6c,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x6e, 0x6f, 0x50, 0x61, 0x72, 0x74, 0x79,
	0x4c, 0x69, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x73, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x73, 0x5f, 0x74,
	0x65, 0x73, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x73, 0x54, 0x65, 0x73,
	0x74, 0x12, 0x2f, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x5f, 0x6c, 0x66, 0x5f, 0x31, 0x2e,
	0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x1a, 0x82, 0x01, 0x0a, 0x0c, 0x4e, 0x61, 0x6d, 0x65, 0x57, 0x69, 0x74, 0x68, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x64, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x44, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x13, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x6e, 0x65, 0x64, 0x5f, 0x64, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x11, 0x6e, 0x61, 0x6d, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x65, 0x64, 0x44, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x23, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0f, 0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x5f, 0x6c, 0x66, 0x5f, 0x31, 0x2e, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0xfa, 0x01, 0x0a, 0x0c, 0x46, 0x65, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x46, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x30, 0x0a, 0x13, 0x66, 0x6f, 0x72, 0x62,
	0x69, 0x64, 0x50, 0x61, 0x72, 0x74, 0x79, 0x4c, 0x69, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x66, 0x6f, 0x72, 0x62, 0x69, 0x64, 0x50, 0x61, 0x72,
	0x74, 0x79, 0x4c, 0x69, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x73, 0x12, 0x58, 0x0a, 0x27, 0x64, 0x6f,
	0x6e, 0x74, 0x44, 0x69, 0x76, 0x75, 0x6c, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x49, 0x64, 0x73, 0x49, 0x6e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x72, 0x67, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x27, 0x64, 0x6f, 0x6e,
	0x74, 0x44, 0x69, 0x76, 0x75, 0x6c, 0x67, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x49, 0x64, 0x73, 0x49, 0x6e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x41, 0x72, 0x67, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x12, 0x5e, 0x0a, 0x2a, 0x64, 0x6f, 0x6e, 0x74, 0x44, 0x69, 0x73, 0x63,
	0x6c, 0x6f, 0x73, 0x65, 0x4e, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x69, 0x6e, 0x67,
	0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x73, 0x54, 0x6f, 0x4f, 0x62, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x2a, 0x64, 0x6f, 0x6e, 0x74, 0x44, 0x69,
	0x73, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x4e, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x73, 0x75, 0x6d, 0x69,
	0x6e, 0x67, 0x43, 0x68, 0x6f, 0x69, 0x63, 0x65, 0x73, 0x54, 0x6f, 0x4f, 0x62, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x73, 0x22, 0x82, 0x03, 0x0a, 0x06, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x12,
	0x36, 0x0a, 0x0a, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x64, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x5f, 0x6c, 0x66, 0x5f, 0x31, 0x2e,
	0x44, 0x6f, 0x74, 0x74, 0x65, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x48, 0x00, 0x52, 0x09, 0x6e, 0x61,
	0x6d, 0x65, 0x44, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x13, 0x6e, 0x61, 0x6d, 0x65, 0x5f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x65, 0x64, 0x5f, 0x64, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x11, 0x6e, 0x61, 0x6d, 0x65, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x6e, 0x65, 0x64, 0x44, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2d, 0x0a, 0x05, 0x66, 0x6c, 0x61,
	0x67, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x5f,
	0x6c, 0x66, 0x5f, 0x31, 0x2e, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x46, 0x6c, 0x61, 0x67,
	0x73, 0x52, 0x05, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x12, 0x31, 0x0a, 0x08, 0x73, 0x79, 0x6e, 0x6f,
	0x6e, 0x79, 0x6d, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x64, 0x61, 0x6d,
	0x6c, 0x5f, 0x6c, 0x66, 0x5f, 0x31, 0x2e, 0x44, 0x65, 0x66, 0x54, 0x79, 0x70, 0x65, 0x53, 0x79,
	0x6e, 0x52, 0x08, 0x73, 0x79, 0x6e, 0x6f, 0x6e, 0x79, 0x6d, 0x73, 0x12, 0x35, 0x0a, 0x0a, 0x64,
	0x61, 0x74, 0x61, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x5f, 0x6c, 0x66, 0x5f, 0x31, 0x2e, 0x44, 0x65, 0x66, 0x44,
	0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x64, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70,
	0x65, 0x73, 0x12, 0x2b, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x13, 0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x5f, 0x6c, 0x66, 0x5f, 0x31, 0x2e, 0x44,
	0x65, 0x66, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12,
	0x34, 0x0a, 0x09, 0x74, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x18, 0x07, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x16, 0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x5f, 0x6c, 0x66, 0x5f, 0x31, 0x2e, 0x44,
	0x65, 0x66, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x52, 0x09, 0x74, 0x65, 0x6d, 0x70,
	0x6c, 0x61, 0x74, 0x65, 0x73, 0x42, 0x06, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x4a, 0x04, 0x08,
	0x02, 0x10, 0x03, 0x4a, 0x04, 0x08, 0x03, 0x10, 0x04, 0x22, 0x48, 0x0a, 0x12, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x6e, 0x65, 0x64, 0x44, 0x6f, 0x74, 0x74, 0x65, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x32, 0x0a, 0x15, 0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x6e, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x72, 0x18, 0x01, 0x20, 0x03, 0x28, 0x05, 0x52, 0x13,
	0x73, 0x65, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x65, 0x64,
	0x53, 0x74, 0x72, 0x22, 0x6f, 0x0a, 0x0f, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x2a, 0x0a, 0x11, 0x6e, 0x61, 0x6d, 0x65, 0x5f, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x6e, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0f, 0x6e, 0x61, 0x6d, 0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x65, 0x64, 0x53,
	0x74, 0x72, 0x12, 0x30, 0x0a, 0x14, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x6e, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x12, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x65,
	0x64, 0x53, 0x74, 0x72, 0x22, 0xec, 0x01, 0x0a, 0x07, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65,
	0x12, 0x2b, 0x0a, 0x07, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x11, 0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x5f, 0x6c, 0x66, 0x5f, 0x31, 0x2e, 0x4d, 0x6f,
	0x64, 0x75, 0x6c, 0x65, 0x52, 0x07, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x73, 0x12, 0x29, 0x0a,
	0x10, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x65, 0x64, 0x5f, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x65,
	0x64, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x51, 0x0a, 0x15, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x6e, 0x65, 0x64, 0x5f, 0x64, 0x6f, 0x74, 0x74, 0x65, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x5f, 0x6c,
	0x66, 0x5f, 0x31, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x65, 0x64, 0x44, 0x6f, 0x74, 0x74,
	0x65, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x52, 0x13, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x65, 0x64,
	0x44, 0x6f, 0x74, 0x74, 0x65, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x36, 0x0a, 0x08, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x64, 0x61, 0x6d, 0x6c, 0x5f, 0x6c, 0x66, 0x5f, 0x31, 0x2e, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67,
	0x65, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x2a, 0xef, 0x01, 0x0a, 0x08, 0x50, 0x72, 0x69, 0x6d, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x08, 0x0a, 0x04, 0x55, 0x4e, 0x49, 0x54, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x42, 0x4f,
	0x4f, 0x4c, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x49, 0x4e, 0x54, 0x36, 0x34, 0x10, 0x02, 0x12,
	0x0b, 0x0a, 0x07, 0x44, 0x45, 0x43, 0x49, 0x4d, 0x41, 0x4c, 0x10, 0x03, 0x12, 0x08, 0x0a, 0x04,
	0x54, 0x45, 0x58, 0x54, 0x10, 0x05, 0x12, 0x0d, 0x0a, 0x09, 0x54, 0x49, 0x4d, 0x45, 0x53, 0x54,
	0x41, 0x4d, 0x50, 0x10, 0x06, 0x12, 0x09, 0x0a, 0x05, 0x50, 0x41, 0x52, 0x54, 0x59, 0x10, 0x08,
	0x12, 0x08, 0x0a, 0x04, 0x4c, 0x49, 0x53, 0x54, 0x10, 0x09, 0x12, 0x0a, 0x0a, 0x06, 0x55, 0x50,
	0x44, 0x41, 0x54, 0x45, 0x10, 0x0a, 0x12, 0x0c, 0x0a, 0x08, 0x53, 0x43, 0x45, 0x4e, 0x41, 0x52,
	0x49, 0x4f, 0x10, 0x0b, 0x12, 0x08, 0x0a, 0x04, 0x44, 0x41, 0x54, 0x45, 0x10, 0x0c, 0x12, 0x0f,
	0x0a, 0x0b, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x41, 0x43, 0x54, 0x5f, 0x49, 0x44, 0x10, 0x0d, 0x12,
	0x0c, 0x0a, 0x08, 0x4f, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x41, 0x4c, 0x10, 0x0e, 0x12, 0x09, 0x0a,
	0x05, 0x41, 0x52, 0x52, 0x4f, 0x57, 0x10, 0x0f, 0x12, 0x0b, 0x0a, 0x07, 0x54, 0x45, 0x58, 0x54,
	0x4d, 0x41, 0x50, 0x10, 0x10, 0x12, 0x0b, 0x0a, 0x07, 0x4e, 0x55, 0x4d, 0x45, 0x52, 0x49, 0x43,
	0x10, 0x11, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x4e, 0x59, 0x10, 0x12, 0x12, 0x0c, 0x0a, 0x08, 0x54,
	0x59, 0x50, 0x45, 0x5f, 0x52, 0x45, 0x50, 0x10, 0x13, 0x12, 0x0a, 0x0a, 0x06, 0x47, 0x45, 0x4e,
	0x4d, 0x41, 0x50, 0x10, 0x14, 0x2a, 0x34, 0x0a, 0x07, 0x50, 0x72, 0x69, 0x6d, 0x43, 0x6f, 0x6e,
	0x12, 0x0c, 0x0a, 0x08, 0x43, 0x4f, 0x4e, 0x5f, 0x55, 0x4e, 0x49, 0x54, 0x10, 0x00, 0x12, 0x0d,
	0x0a, 0x09, 0x43, 0x4f, 0x4e, 0x5f, 0x46, 0x41, 0x4c, 0x53, 0x45, 0x10, 0x01, 0x12, 0x0c, 0x0a,
	0x08, 0x43, 0x4f, 0x4e, 0x5f, 0x54, 0x52, 0x55, 0x45, 0x10, 0x02, 0x2a, 0xd4, 0x10, 0x0a, 0x0f,
	0x42, 0x75, 0x69, 0x6c, 0x74, 0x69, 0x6e, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x0f, 0x0a, 0x0b, 0x41, 0x44, 0x44, 0x5f, 0x44, 0x45, 0x43, 0x49, 0x4d, 0x41, 0x4c, 0x10, 0x00,
	0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x55, 0x42, 0x5f, 0x44, 0x45, 0x43, 0x49, 0x4d, 0x41, 0x4c, 0x10,
	0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x4d, 0x55, 0x4c, 0x5f, 0x44, 0x45, 0x43, 0x49, 0x4d, 0x41, 0x4c,
	0x10, 0x02, 0x12, 0x0f, 0x0a, 0x0b, 0x44, 0x49, 0x56, 0x5f, 0x44, 0x45, 0x43, 0x49, 0x4d, 0x41,
	0x4c, 0x10, 0x03, 0x12, 0x11, 0x0a, 0x0d, 0x52, 0x4f, 0x55, 0x4e, 0x44, 0x5f, 0x44, 0x45, 0x43,
	0x49, 0x4d, 0x41, 0x4c, 0x10, 0x06, 0x12, 0x0f, 0x0a, 0x0b, 0x41, 0x44, 0x44, 0x5f, 0x4e, 0x55,
	0x4d, 0x45, 0x52, 0x49, 0x43, 0x10, 0x6b, 0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x55, 0x42, 0x5f, 0x4e,
	0x55, 0x4d, 0x45, 0x52, 0x49, 0x43, 0x10, 0x6c, 0x12, 0x0f, 0x0a, 0x0b, 0x4d, 0x55, 0x4c, 0x5f,
	0x4e, 0x55, 0x4d, 0x45, 0x52, 0x49, 0x43, 0x10, 0x6d, 0x12, 0x0f, 0x0a, 0x0b, 0x44, 0x49, 0x56,
	0x5f, 0x4e, 0x55, 0x4d, 0x45, 0x52, 0x49, 0x43, 0x10, 0x6e, 0x12, 0x11, 0x0a, 0x0d, 0x52, 0x4f,
	0x55, 0x4e, 0x44, 0x5f, 0x4e, 0x55, 0x4d, 0x45, 0x52, 0x49, 0x43, 0x10, 0x6f, 0x12, 0x10, 0x0a,
	0x0c, 0x43, 0x41, 0x53, 0x54, 0x5f, 0x4e, 0x55, 0x4d, 0x45, 0x52, 0x49, 0x43, 0x10, 0x79, 0x12,
	0x11, 0x0a, 0x0d, 0x53, 0x48, 0x49, 0x46, 0x54, 0x5f, 0x4e, 0x55, 0x4d, 0x45, 0x52, 0x49, 0x43,
	0x10, 0x7a, 0x12, 0x0d, 0x0a, 0x09, 0x41, 0x44, 0x44, 0x5f, 0x49, 0x4e, 0x54, 0x36, 0x34, 0x10,
	0x07, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x55, 0x42, 0x5f, 0x49, 0x4e, 0x54, 0x36, 0x34, 0x10, 0x08,
	0x12, 0x0d, 0x0a, 0x09, 0x4d, 0x55, 0x4c, 0x5f, 0x49, 0x4e, 0x54, 0x36, 0x34, 0x10, 0x09, 0x12,
	0x0d, 0x0a, 0x09, 0x44, 0x49, 0x56, 0x5f, 0x49, 0x4e, 0x54, 0x36, 0x34, 0x10, 0x0a, 0x12, 0x0d,
	0x0a, 0x09, 0x4d, 0x4f, 0x44, 0x5f, 0x49, 0x4e, 0x54, 0x36, 0x34, 0x10, 0x0b, 0x12, 0x0d, 0x0a,
	0x09, 0x45, 0x58, 0x50, 0x5f, 0x49, 0x4e, 0x54, 0x36, 0x34, 0x10, 0x0c, 0x12, 0x09, 0x0a, 0x05,
	0x46, 0x4f, 0x4c, 0x44, 0x4c, 0x10, 0x14, 0x12, 0x09, 0x0a, 0x05, 0x46, 0x4f, 0x4c, 0x44, 0x52,
	0x10, 0x15, 0x12, 0x11, 0x0a, 0x0d, 0x54, 0x45, 0x58, 0x54, 0x4d, 0x41, 0x50, 0x5f, 0x45, 0x4d,
	0x50, 0x54, 0x59, 0x10, 0x60, 0x12, 0x12, 0x0a, 0x0e, 0x54, 0x45, 0x58, 0x54, 0x4d, 0x41, 0x50,
	0x5f, 0x49, 0x4e, 0x53, 0x45, 0x52, 0x54, 0x10, 0x61, 0x12, 0x12, 0x0a, 0x0e, 0x54, 0x45, 0x58,
	0x54, 0x4d, 0x41, 0x50, 0x5f, 0x4c, 0x4f, 0x4f, 0x4b, 0x55, 0x50, 0x10, 0x62, 0x12, 0x12, 0x0a,
	0x0e, 0x54, 0x45, 0x58, 0x54, 0x4d, 0x41, 0x50, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x10,
	0x63, 0x12, 0x13, 0x0a, 0x0f, 0x54, 0x45, 0x58, 0x54, 0x4d, 0x41, 0x50, 0x5f, 0x54, 0x4f, 0x5f,
	0x4c, 0x49, 0x53, 0x54, 0x10, 0x64, 0x12, 0x10, 0x0a, 0x0c, 0x54, 0x45, 0x58, 0x54, 0x4d, 0x41,
	0x50, 0x5f, 0x53, 0x49, 0x5a, 0x45, 0x10, 0x65, 0x12, 0x10, 0x0a, 0x0c, 0x47, 0x45, 0x4e, 0x4d,
	0x41, 0x50, 0x5f, 0x45, 0x4d, 0x50, 0x54, 0x59, 0x10, 0x7c, 0x12, 0x11, 0x0a, 0x0d, 0x47, 0x45,
	0x4e, 0x4d, 0x41, 0x50, 0x5f, 0x49, 0x4e, 0x53, 0x45, 0x52, 0x54, 0x10, 0x7d, 0x12, 0x11, 0x0a,
	0x0d, 0x47, 0x45, 0x4e, 0x4d, 0x41, 0x50, 0x5f, 0x4c, 0x4f, 0x4f, 0x4b, 0x55, 0x50, 0x10, 0x7e,
	0x12, 0x11, 0x0a, 0x0d, 0x47, 0x45, 0x4e, 0x4d, 0x41, 0x50, 0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54,
	0x45, 0x10, 0x7f, 0x12, 0x10, 0x0a, 0x0b, 0x47, 0x45, 0x4e, 0x4d, 0x41, 0x50, 0x5f, 0x4b, 0x45,
	0x59, 0x53, 0x10, 0x80, 0x01, 0x12, 0x12, 0x0a, 0x0d, 0x47, 0x45, 0x4e, 0x4d, 0x41, 0x50, 0x5f,
	0x56, 0x41, 0x4c, 0x55, 0x45, 0x53, 0x10, 0x81, 0x01, 0x12, 0x10, 0x0a, 0x0b, 0x47, 0x45, 0x4e,
	0x4d, 0x41, 0x50, 0x5f, 0x53, 0x49, 0x5a, 0x45, 0x10, 0x82, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x45,
	0x58, 0x50, 0x4c, 0x4f, 0x44, 0x45, 0x5f, 0x54, 0x45, 0x58, 0x54, 0x10, 0x17, 0x12, 0x0f, 0x0a,
	0x0b, 0x41, 0x50, 0x50, 0x45, 0x4e, 0x44, 0x5f, 0x54, 0x45, 0x58, 0x54, 0x10, 0x18, 0x12, 0x09,
	0x0a, 0x05, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x19, 0x12, 0x0d, 0x0a, 0x09, 0x4c, 0x45, 0x51,
	0x5f, 0x49, 0x4e, 0x54, 0x36, 0x34, 0x10, 0x21, 0x12, 0x0f, 0x0a, 0x0b, 0x4c, 0x45, 0x51, 0x5f,
	0x44, 0x45, 0x43, 0x49, 0x4d, 0x41, 0x4c, 0x10, 0x22, 0x12, 0x0f, 0x0a, 0x0b, 0x4c, 0x45, 0x51,
	0x5f, 0x4e, 0x55, 0x4d, 0x45, 0x52, 0x49, 0x43, 0x10, 0x70, 0x12, 0x0c, 0x0a, 0x08, 0x4c, 0x45,
	0x51, 0x5f, 0x54, 0x45, 0x58, 0x54, 0x10, 0x24, 0x12, 0x11, 0x0a, 0x0d, 0x4c, 0x45, 0x51, 0x5f,
	0x54, 0x49, 0x4d, 0x45, 0x53, 0x54, 0x41, 0x4d, 0x50, 0x10, 0x25, 0x12, 0x0c, 0x0a, 0x08, 0x4c,
	0x45, 0x51, 0x5f, 0x44, 0x41, 0x54, 0x45, 0x10, 0x43, 0x12, 0x0d, 0x0a, 0x09, 0x4c, 0x45, 0x51,
	0x5f, 0x50, 0x41, 0x52, 0x54, 0x59, 0x10, 0x59, 0x12, 0x0e, 0x0a, 0x0a, 0x4c, 0x45, 0x53, 0x53,
	0x5f, 0x49, 0x4e, 0x54, 0x36, 0x34, 0x10, 0x27, 0x12, 0x10, 0x0a, 0x0c, 0x4c, 0x45, 0x53, 0x53,
	0x5f, 0x44, 0x45, 0x43, 0x49, 0x4d, 0x41, 0x4c, 0x10, 0x28, 0x12, 0x10, 0x0a, 0x0c, 0x4c, 0x45,
	0x53, 0x53, 0x5f, 0x4e, 0x55, 0x4d, 0x45, 0x52, 0x49, 0x43, 0x10, 0x71, 0x12, 0x0d, 0x0a, 0x09,
	0x4c, 0x45, 0x53, 0x53, 0x5f, 0x54, 0x45, 0x58, 0x54, 0x10, 0x2a, 0x12, 0x12, 0x0a, 0x0e, 0x4c,
	0x45, 0x53, 0x53, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x53, 0x54, 0x41, 0x4d, 0x50, 0x10, 0x2b, 0x12,
	0x0d, 0x0a, 0x09, 0x4c, 0x45, 0x53, 0x53, 0x5f, 0x44, 0x41, 0x54, 0x45, 0x10, 0x44, 0x12, 0x0e,
	0x0a, 0x0a, 0x4c, 0x45, 0x53, 0x53, 0x5f, 0x50, 0x41, 0x52, 0x54, 0x59, 0x10, 0x5a, 0x12, 0x0d,
	0x0a, 0x09, 0x47, 0x45, 0x51, 0x5f, 0x49, 0x4e, 0x54, 0x36, 0x34, 0x10, 0x2d, 0x12, 0x0f, 0x0a,
	0x0b, 0x47, 0x45, 0x51, 0x5f, 0x44, 0x45, 0x43, 0x49, 0x4d, 0x41, 0x4c, 0x10, 0x2e, 0x12, 0x0f,
	0x0a, 0x0b, 0x47, 0x45, 0x51, 0x5f, 0x4e, 0x55, 0x4d, 0x45, 0x52, 0x49, 0x43, 0x10, 0x72, 0x12,
	0x0c, 0x0a, 0x08, 0x47, 0x45, 0x51, 0x5f, 0x54, 0x45, 0x58, 0x54, 0x10, 0x30, 0x12, 0x11, 0x0a,
	0x0d, 0x47, 0x45, 0x51, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x53, 0x54, 0x41, 0x4d, 0x50, 0x10, 0x31,
	0x12, 0x0c, 0x0a, 0x08, 0x47, 0x45, 0x51, 0x5f, 0x44, 0x41, 0x54, 0x45, 0x10, 0x45, 0x12, 0x0d,
	0x0a, 0x09, 0x47, 0x45, 0x51, 0x5f, 0x50, 0x41, 0x52, 0x54, 0x59, 0x10, 0x5b, 0x12, 0x11, 0x0a,
	0x0d, 0x47, 0x52, 0x45, 0x41, 0x54, 0x45, 0x52, 0x5f, 0x49, 0x4e, 0x54, 0x36, 0x34, 0x10, 0x33,
	0x12, 0x13, 0x0a, 0x0f, 0x47, 0x52, 0x45, 0x41, 0x54, 0x45, 0x52, 0x5f, 0x44, 0x45, 0x43, 0x49,
	0x4d, 0x41, 0x4c, 0x10, 0x34, 0x12, 0x13, 0x0a, 0x0f, 0x47, 0x52, 0x45, 0x41, 0x54, 0x45, 0x52,
	0x5f, 0x4e, 0x55, 0x4d, 0x45, 0x52, 0x49, 0x43, 0x10, 0x73, 0x12, 0x10, 0x0a, 0x0c, 0x47, 0x52,
	0x45, 0x41, 0x54, 0x45, 0x52, 0x5f, 0x54, 0x45, 0x58, 0x54, 0x10, 0x36, 0x12, 0x15, 0x0a, 0x11,
	0x47, 0x52, 0x45, 0x41, 0x54, 0x45, 0x52, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x53, 0x54, 0x41, 0x4d,
	0x50, 0x10, 0x37, 0x12, 0x10, 0x0a, 0x0c, 0x47, 0x52, 0x45, 0x41, 0x54, 0x45, 0x52, 0x5f, 0x44,
	0x41, 0x54, 0x45, 0x10, 0x46, 0x12, 0x11, 0x0a, 0x0d, 0x47, 0x52, 0x45, 0x41, 0x54, 0x45, 0x52,
	0x5f, 0x50, 0x41, 0x52, 0x54, 0x59, 0x10, 0x5c, 0x12, 0x11, 0x0a, 0x0d, 0x54, 0x4f, 0x5f, 0x54,
	0x45, 0x58, 0x54, 0x5f, 0x49, 0x4e, 0x54, 0x36, 0x34, 0x10, 0x39, 0x12, 0x13, 0x0a, 0x0f, 0x54,
	0x4f, 0x5f, 0x54, 0x45, 0x58, 0x54, 0x5f, 0x44, 0x45, 0x43, 0x49, 0x4d, 0x41, 0x4c, 0x10, 0x3a,
	0x12, 0x13, 0x0a, 0x0f, 0x54, 0x4f, 0x5f, 0x54, 0x45, 0x58, 0x54, 0x5f, 0x4e, 0x55, 0x4d, 0x45,
	0x52, 0x49, 0x43, 0x10, 0x74, 0x12, 0x10, 0x0a, 0x0c, 0x54, 0x4f, 0x5f, 0x54, 0x45, 0x58, 0x54,
	0x5f, 0x54, 0x45, 0x58, 0x54, 0x10, 0x3c, 0x12, 0x15, 0x0a, 0x11, 0x54, 0x4f, 0x5f, 0x54, 0x45,
	0x58, 0x54, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x53, 0x54, 0x41, 0x4d, 0x50, 0x10, 0x3d, 0x12, 0x10,
	0x0a, 0x0c, 0x54, 0x4f, 0x5f, 0x54, 0x45, 0x58, 0x54, 0x5f, 0x44, 0x41, 0x54, 0x45, 0x10, 0x47,
	0x12, 0x18, 0x0a, 0x14, 0x54, 0x4f, 0x5f, 0x51, 0x55, 0x4f, 0x54, 0x45, 0x44, 0x5f, 0x54, 0x45,
	0x58, 0x54, 0x5f, 0x50, 0x41, 0x52, 0x54, 0x59, 0x10, 0x3f, 0x12, 0x11, 0x0a, 0x0d, 0x54, 0x4f,
	0x5f, 0x54, 0x45, 0x58, 0x54, 0x5f, 0x50, 0x41, 0x52, 0x54, 0x59, 0x10, 0x5e, 0x12, 0x13, 0x0a,
	0x0f, 0x46, 0x52, 0x4f, 0x4d, 0x5f, 0x54, 0x45, 0x58, 0x54, 0x5f, 0x50, 0x41, 0x52, 0x54, 0x59,
	0x10, 0x5f, 0x12, 0x13, 0x0a, 0x0f, 0x46, 0x52, 0x4f, 0x4d, 0x5f, 0x54, 0x45, 0x58, 0x54, 0x5f,
	0x49, 0x4e, 0x54, 0x36, 0x34, 0x10, 0x67, 0x12, 0x15, 0x0a, 0x11, 0x46, 0x52, 0x4f, 0x4d, 0x5f,
	0x54, 0x45, 0x58, 0x54, 0x5f, 0x44, 0x45, 0x43, 0x49, 0x4d, 0x41, 0x4c, 0x10, 0x68, 0x12, 0x15,
	0x0a, 0x11, 0x46, 0x52, 0x4f, 0x4d, 0x5f, 0x54, 0x45, 0x58, 0x54, 0x5f, 0x4e, 0x55, 0x4d, 0x45,
	0x52, 0x49, 0x43, 0x10, 0x75, 0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x48, 0x41, 0x32, 0x35, 0x36, 0x5f,
	0x54, 0x45, 0x58, 0x54, 0x10, 0x5d, 0x12, 0x15, 0x0a, 0x11, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x54,
	0x4f, 0x5f, 0x55, 0x4e, 0x49, 0x58, 0x5f, 0x44, 0x41, 0x59, 0x53, 0x10, 0x48, 0x12, 0x15, 0x0a,
	0x11, 0x55, 0x4e, 0x49, 0x58, 0x5f, 0x44, 0x41, 0x59, 0x53, 0x5f, 0x54, 0x4f, 0x5f, 0x44, 0x41,
	0x54, 0x45, 0x10, 0x49, 0x12, 0x22, 0x0a, 0x1e, 0x54, 0x49, 0x4d, 0x45, 0x53, 0x54, 0x41, 0x4d,
	0x50, 0x5f, 0x54, 0x4f, 0x5f, 0x55, 0x4e, 0x49, 0x58, 0x5f, 0x4d, 0x49, 0x43, 0x52, 0x4f, 0x53,
	0x45, 0x43, 0x4f, 0x4e, 0x44, 0x53, 0x10, 0x4a, 0x12, 0x22, 0x0a, 0x1e, 0x55, 0x4e, 0x49, 0x58,
	0x5f, 0x4d, 0x49, 0x43, 0x52, 0x4f, 0x53, 0x45, 0x43, 0x4f, 0x4e, 0x44, 0x53, 0x5f, 0x54, 0x4f,
	0x5f, 0x54, 0x49, 0x4d, 0x45, 0x53, 0x54, 0x41, 0x4d, 0x50, 0x10, 0x4b, 0x12, 0x14, 0x0a, 0x10,
	0x49, 0x4e, 0x54, 0x36, 0x34, 0x5f, 0x54, 0x4f, 0x5f, 0x44, 0x45, 0x43, 0x49, 0x4d, 0x41, 0x4c,
	0x10, 0x4c, 0x12, 0x14, 0x0a, 0x10, 0x44, 0x45, 0x43, 0x49, 0x4d, 0x41, 0x4c, 0x5f, 0x54, 0x4f,
	0x5f, 0x49, 0x4e, 0x54, 0x36, 0x34, 0x10, 0x4d, 0x12, 0x14, 0x0a, 0x10, 0x49, 0x4e, 0x54, 0x36,
	0x34, 0x5f, 0x54, 0x4f, 0x5f, 0x4e, 0x55, 0x4d, 0x45, 0x52, 0x49, 0x43, 0x10, 0x76, 0x12, 0x14,
	0x0a, 0x10, 0x4e, 0x55, 0x4d, 0x45, 0x52, 0x49, 0x43, 0x5f, 0x54, 0x4f, 0x5f, 0x49, 0x4e, 0x54,
	0x36, 0x34, 0x10, 0x77, 0x12, 0x10, 0x0a, 0x0c, 0x49, 0x4d, 0x50, 0x4c, 0x4f, 0x44, 0x45, 0x5f,
	0x54, 0x45, 0x58, 0x54, 0x10, 0x4e, 0x12, 0x0f, 0x0a, 0x0b, 0x45, 0x51, 0x55, 0x41, 0x4c, 0x5f,
	0x49, 0x4e, 0x54, 0x36, 0x34, 0x10, 0x4f, 0x12, 0x11, 0x0a, 0x0d, 0x45, 0x51, 0x55, 0x41, 0x4c,
	0x5f, 0x44, 0x45, 0x43, 0x49, 0x4d, 0x41, 0x4c, 0x10, 0x50, 0x12, 0x11, 0x0a, 0x0d, 0x45, 0x51,
	0x55, 0x41, 0x4c, 0x5f, 0x4e, 0x55, 0x4d, 0x45, 0x52, 0x49, 0x43, 0x10, 0x78, 0x12, 0x0e, 0x0a,
	0x0a, 0x45, 0x51, 0x55, 0x41, 0x4c, 0x5f, 0x54, 0x45, 0x58, 0x54, 0x10, 0x51, 0x12, 0x13, 0x0a,
	0x0f, 0x45, 0x51, 0x55, 0x41, 0x4c, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x53, 0x54, 0x41, 0x4d, 0x50,
	0x10, 0x52, 0x12, 0x0e, 0x0a, 0x0a, 0x45, 0x51, 0x55, 0x41, 0x4c, 0x5f, 0x44, 0x41, 0x54, 0x45,
	0x10, 0x53, 0x12, 0x0f, 0x0a, 0x0b, 0x45, 0x51, 0x55, 0x41, 0x4c, 0x5f, 0x50, 0x41, 0x52, 0x54,
	0x59, 0x10, 0x54, 0x12, 0x0e, 0x0a, 0x0a, 0x45, 0x51, 0x55, 0x41, 0x4c, 0x5f, 0x42, 0x4f, 0x4f,
	0x4c, 0x10, 0x55, 0x12, 0x15, 0x0a, 0x11, 0x45, 0x51, 0x55, 0x41, 0x4c, 0x5f, 0x43, 0x4f, 0x4e,
	0x54, 0x52, 0x41, 0x43, 0x54, 0x5f, 0x49, 0x44, 0x10, 0x56, 0x12, 0x0e, 0x0a, 0x0a, 0x45, 0x51,
	0x55, 0x41, 0x4c, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x10, 0x57, 0x12, 0x12, 0x0a, 0x0e, 0x45, 0x51,
	0x55, 0x41, 0x4c, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x52, 0x45, 0x50, 0x10, 0x7b, 0x12, 0x0a,
	0x0a, 0x05, 0x45, 0x51, 0x55, 0x41, 0x4c, 0x10, 0x83, 0x01, 0x12, 0x0c, 0x0a, 0x07, 0x4c, 0x45,
	0x53, 0x53, 0x5f, 0x45, 0x51, 0x10, 0x84, 0x01, 0x12, 0x09, 0x0a, 0x04, 0x4c, 0x45, 0x53, 0x53,
	0x10, 0x85, 0x01, 0x12, 0x0f, 0x0a, 0x0a, 0x47, 0x52, 0x45, 0x41, 0x54, 0x45, 0x52, 0x5f, 0x45,
	0x51, 0x10, 0x86, 0x01, 0x12, 0x0c, 0x0a, 0x07, 0x47, 0x52, 0x45, 0x41, 0x54, 0x45, 0x52, 0x10,
	0x87, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x54, 0x52, 0x41, 0x43, 0x45, 0x10, 0x58, 0x12, 0x16, 0x0a,
	0x12, 0x43, 0x4f, 0x45, 0x52, 0x43, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x41, 0x43, 0x54,
	0x5f, 0x49, 0x44, 0x10, 0x66, 0x12, 0x19, 0x0a, 0x15, 0x54, 0x45, 0x58, 0x54, 0x5f, 0x46, 0x52,
	0x4f, 0x4d, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x53, 0x10, 0x69,
	0x12, 0x17, 0x0a, 0x13, 0x54, 0x45, 0x58, 0x54, 0x5f, 0x54, 0x4f, 0x5f, 0x43, 0x4f, 0x44, 0x45,
	0x5f, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x53, 0x10, 0x6a, 0x12, 0x12, 0x0a, 0x0d, 0x54, 0x45, 0x58,
	0x54, 0x5f, 0x54, 0x4f, 0x5f, 0x55, 0x50, 0x50, 0x45, 0x52, 0x10, 0xad, 0x4d, 0x12, 0x12, 0x0a,
	0x0d, 0x54, 0x45, 0x58, 0x54, 0x5f, 0x54, 0x4f, 0x5f, 0x4c, 0x4f, 0x57, 0x45, 0x52, 0x10, 0xae,
	0x4d, 0x12, 0x0f, 0x0a, 0x0a, 0x54, 0x45, 0x58, 0x54, 0x5f, 0x53, 0x4c, 0x49, 0x43, 0x45, 0x10,
	0xaf, 0x4d, 0x12, 0x15, 0x0a, 0x10, 0x54, 0x45, 0x58, 0x54, 0x5f, 0x53, 0x4c, 0x49, 0x43, 0x45,
	0x5f, 0x49, 0x4e, 0x44, 0x45, 0x58, 0x10, 0xb0, 0x4d, 0x12, 0x17, 0x0a, 0x12, 0x54, 0x45, 0x58,
	0x54, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x41, 0x49, 0x4e, 0x53, 0x5f, 0x4f, 0x4e, 0x4c, 0x59, 0x10,
	0xb1, 0x4d, 0x12, 0x13, 0x0a, 0x0e, 0x54, 0x45, 0x58, 0x54, 0x5f, 0x52, 0x45, 0x50, 0x4c, 0x49,
	0x43, 0x41, 0x54, 0x45, 0x10, 0xb2, 0x4d, 0x12, 0x12, 0x0a, 0x0d, 0x54, 0x45, 0x58, 0x54, 0x5f,
	0x53, 0x50, 0x4c, 0x49, 0x54, 0x5f, 0x4f, 0x4e, 0x10, 0xb3, 0x4d, 0x12, 0x15, 0x0a, 0x10, 0x54,
	0x45, 0x58, 0x54, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x43, 0x41, 0x4c, 0x41, 0x54, 0x45, 0x10,
	0xb4, 0x4d, 0x42, 0x4b, 0x0a, 0x14, 0x63, 0x6f, 0x6d, 0x2e, 0x64, 0x61, 0x6d, 0x6c, 0x2e, 0x64,
	0x61, 0x6d, 0x6c, 0x5f, 0x6c, 0x66, 0x5f, 0x64, 0x65, 0x76, 0x5a, 0x14, 0x63, 0x6f, 0x6d, 0x2f,
	0x64, 0x61, 0x6d, 0x6c, 0x2f, 0x64, 0x61, 0x6d, 0x6c, 0x5f, 0x6c, 0x66, 0x5f, 0x64, 0x65, 0x76,
	0xaa, 0x02, 0x1c, 0x43, 0x6f, 0x6d, 0x2e, 0x44, 0x61, 0x6d, 0x6c, 0x2e, 0x44, 0x61, 0x6d, 0x6c,
	0x5f, 0x4c, 0x66, 0x5f, 0x44, 0x65, 0x76, 0x2e, 0x44, 0x61, 0x6d, 0x6c, 0x4c, 0x66, 0x31, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_com_daml_daml_lf_dev_daml_lf_1_proto_rawDescOnce sync.Once
	file_com_daml_daml_lf_dev_daml_lf_1_proto_rawDescData = file_com_daml_daml_lf_dev_daml_lf_1_proto_rawDesc
)

func file_com_daml_daml_lf_dev_daml_lf_1_proto_rawDescGZIP() []byte {
	file_com_daml_daml_lf_dev_daml_lf_1_proto_rawDescOnce.Do(func() {
		file_com_daml_daml_lf_dev_daml_lf_1_proto_rawDescData = protoimpl.X.CompressGZIP(file_com_daml_daml_lf_dev_daml_lf_1_proto_rawDescData)
	})
	return file_com_daml_daml_lf_dev_daml_lf_1_proto_rawDescData
}

var file_com_daml_daml_lf_dev_daml_lf_1_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_com_daml_daml_lf_dev_daml_lf_1_proto_msgTypes = make([]protoimpl.MessageInfo, 80)
var file_com_daml_daml_lf_dev_daml_lf_1_proto_goTypes = []interface{}{
	(PrimType)(0),                        // 0: daml_lf_1.PrimType
	(PrimCon)(0),                         // 1: daml_lf_1.PrimCon
	(BuiltinFunction)(0),                 // 2: daml_lf_1.BuiltinFunction
	(*Unit)(nil),                         // 3: daml_lf_1.Unit
	(*PackageRef)(nil),                   // 4: daml_lf_1.PackageRef
	(*DottedName)(nil),                   // 5: daml_lf_1.DottedName
	(*ModuleRef)(nil),                    // 6: daml_lf_1.ModuleRef
	(*TypeConName)(nil),                  // 7: daml_lf_1.TypeConName
	(*TypeSynName)(nil),                  // 8: daml_lf_1.TypeSynName
	(*ValName)(nil),                      // 9: daml_lf_1.ValName
	(*FieldWithType)(nil),                // 10: daml_lf_1.FieldWithType
	(*VarWithType)(nil),                  // 11: daml_lf_1.VarWithType
	(*TypeVarWithKind)(nil),              // 12: daml_lf_1.TypeVarWithKind
	(*FieldWithExpr)(nil),                // 13: daml_lf_1.FieldWithExpr
	(*Binding)(nil),                      // 14: daml_lf_1.Binding
	(*Kind)(nil),                         // 15: daml_lf_1.Kind
	(*Type)(nil),                         // 16: daml_lf_1.Type
	(*PrimLit)(nil),                      // 17: daml_lf_1.PrimLit
	(*Location)(nil),                     // 18: daml_lf_1.Location
	(*Expr)(nil),                         // 19: daml_lf_1.Expr
	(*CaseAlt)(nil),                      // 20: daml_lf_1.CaseAlt
	(*Case)(nil),                         // 21: daml_lf_1.Case
	(*Block)(nil),                        // 22: daml_lf_1.Block
	(*Pure)(nil),                         // 23: daml_lf_1.Pure
	(*Update)(nil),                       // 24: daml_lf_1.Update
	(*Scenario)(nil),                     // 25: daml_lf_1.Scenario
	(*TemplateChoice)(nil),               // 26: daml_lf_1.TemplateChoice
	(*KeyExpr)(nil),                      // 27: daml_lf_1.KeyExpr
	(*DefTemplate)(nil),                  // 28: daml_lf_1.DefTemplate
	(*DefDataType)(nil),                  // 29: daml_lf_1.DefDataType
	(*DefTypeSyn)(nil),                   // 30: daml_lf_1.DefTypeSyn
	(*DefValue)(nil),                     // 31: daml_lf_1.DefValue
	(*FeatureFlags)(nil),                 // 32: daml_lf_1.FeatureFlags
	(*Module)(nil),                       // 33: daml_lf_1.Module
	(*InternedDottedName)(nil),           // 34: daml_lf_1.InternedDottedName
	(*PackageMetadata)(nil),              // 35: daml_lf_1.PackageMetadata
	(*Package)(nil),                      // 36: daml_lf_1.Package
	(*Kind_Arrow)(nil),                   // 37: daml_lf_1.Kind.Arrow
	(*Type_Var)(nil),                     // 38: daml_lf_1.Type.Var
	(*Type_Con)(nil),                     // 39: daml_lf_1.Type.Con
	(*Type_Syn)(nil),                     // 40: daml_lf_1.Type.Syn
	(*Type_Prim)(nil),                    // 41: daml_lf_1.Type.Prim
	(*Type_Fun)(nil),                     // 42: daml_lf_1.Type.Fun
	(*Type_Forall)(nil),                  // 43: daml_lf_1.Type.Forall
	(*Type_Struct)(nil),                  // 44: daml_lf_1.Type.Struct
	(*Location_Range)(nil),               // 45: daml_lf_1.Location.Range
	(*Expr_RecCon)(nil),                  // 46: daml_lf_1.Expr.RecCon
	(*Expr_RecProj)(nil),                 // 47: daml_lf_1.Expr.RecProj
	(*Expr_RecUpd)(nil),                  // 48: daml_lf_1.Expr.RecUpd
	(*Expr_VariantCon)(nil),              // 49: daml_lf_1.Expr.VariantCon
	(*Expr_EnumCon)(nil),                 // 50: daml_lf_1.Expr.EnumCon
	(*Expr_StructCon)(nil),               // 51: daml_lf_1.Expr.StructCon
	(*Expr_StructProj)(nil),              // 52: daml_lf_1.Expr.StructProj
	(*Expr_StructUpd)(nil),               // 53: daml_lf_1.Expr.StructUpd
	(*Expr_App)(nil),                     // 54: daml_lf_1.Expr.App
	(*Expr_TyApp)(nil),                   // 55: daml_lf_1.Expr.TyApp
	(*Expr_Abs)(nil),                     // 56: daml_lf_1.Expr.Abs
	(*Expr_TyAbs)(nil),                   // 57: daml_lf_1.Expr.TyAbs
	(*Expr_Nil)(nil),                     // 58: daml_lf_1.Expr.Nil
	(*Expr_Cons)(nil),                    // 59: daml_lf_1.Expr.Cons
	(*Expr_OptionalNone)(nil),            // 60: daml_lf_1.Expr.OptionalNone
	(*Expr_OptionalSome)(nil),            // 61: daml_lf_1.Expr.OptionalSome
	(*Expr_ToAny)(nil),                   // 62: daml_lf_1.Expr.ToAny
	(*Expr_FromAny)(nil),                 // 63: daml_lf_1.Expr.FromAny
	(*CaseAlt_Variant)(nil),              // 64: daml_lf_1.CaseAlt.Variant
	(*CaseAlt_Enum)(nil),                 // 65: daml_lf_1.CaseAlt.Enum
	(*CaseAlt_Cons)(nil),                 // 66: daml_lf_1.CaseAlt.Cons
	(*CaseAlt_OptionalSome)(nil),         // 67: daml_lf_1.CaseAlt.OptionalSome
	(*Update_Create)(nil),                // 68: daml_lf_1.Update.Create
	(*Update_Exercise)(nil),              // 69: daml_lf_1.Update.Exercise
	(*Update_Fetch)(nil),                 // 70: daml_lf_1.Update.Fetch
	(*Update_EmbedExpr)(nil),             // 71: daml_lf_1.Update.EmbedExpr
	(*Update_RetrieveByKey)(nil),         // 72: daml_lf_1.Update.RetrieveByKey
	(*Scenario_Commit)(nil),              // 73: daml_lf_1.Scenario.Commit
	(*Scenario_EmbedExpr)(nil),           // 74: daml_lf_1.Scenario.EmbedExpr
	(*KeyExpr_Projection)(nil),           // 75: daml_lf_1.KeyExpr.Projection
	(*KeyExpr_Projections)(nil),          // 76: daml_lf_1.KeyExpr.Projections
	(*KeyExpr_RecordField)(nil),          // 77: daml_lf_1.KeyExpr.RecordField
	(*KeyExpr_Record)(nil),               // 78: daml_lf_1.KeyExpr.Record
	(*DefTemplate_DefKey)(nil),           // 79: daml_lf_1.DefTemplate.DefKey
	(*DefDataType_Fields)(nil),           // 80: daml_lf_1.DefDataType.Fields
	(*DefDataType_EnumConstructors)(nil), // 81: daml_lf_1.DefDataType.EnumConstructors
	(*DefValue_NameWithType)(nil),        // 82: daml_lf_1.DefValue.NameWithType
}
var file_com_daml_daml_lf_dev_daml_lf_1_proto_depIdxs = []int32{
	3,   // 0: daml_lf_1.PackageRef.self:type_name -> daml_lf_1.Unit
	4,   // 1: daml_lf_1.ModuleRef.package_ref:type_name -> daml_lf_1.PackageRef
	5,   // 2: daml_lf_1.ModuleRef.module_name_dname:type_name -> daml_lf_1.DottedName
	6,   // 3: daml_lf_1.TypeConName.module:type_name -> daml_lf_1.ModuleRef
	5,   // 4: daml_lf_1.TypeConName.name_dname:type_name -> daml_lf_1.DottedName
	6,   // 5: daml_lf_1.TypeSynName.module:type_name -> daml_lf_1.ModuleRef
	5,   // 6: daml_lf_1.TypeSynName.name_dname:type_name -> daml_lf_1.DottedName
	6,   // 7: daml_lf_1.ValName.module:type_name -> daml_lf_1.ModuleRef
	16,  // 8: daml_lf_1.FieldWithType.type:type_name -> daml_lf_1.Type
	16,  // 9: daml_lf_1.VarWithType.type:type_name -> daml_lf_1.Type
	15,  // 10: daml_lf_1.TypeVarWithKind.kind:type_name -> daml_lf_1.Kind
	19,  // 11: daml_lf_1.FieldWithExpr.expr:type_name -> daml_lf_1.Expr
	11,  // 12: daml_lf_1.Binding.binder:type_name -> daml_lf_1.VarWithType
	19,  // 13: daml_lf_1.Binding.bound:type_name -> daml_lf_1.Expr
	3,   // 14: daml_lf_1.Kind.star:type_name -> daml_lf_1.Unit
	37,  // 15: daml_lf_1.Kind.arrow:type_name -> daml_lf_1.Kind.Arrow
	3,   // 16: daml_lf_1.Kind.nat:type_name -> daml_lf_1.Unit
	38,  // 17: daml_lf_1.Type.var:type_name -> daml_lf_1.Type.Var
	39,  // 18: daml_lf_1.Type.con:type_name -> daml_lf_1.Type.Con
	41,  // 19: daml_lf_1.Type.prim:type_name -> daml_lf_1.Type.Prim
	42,  // 20: daml_lf_1.Type.fun:type_name -> daml_lf_1.Type.Fun
	43,  // 21: daml_lf_1.Type.forall:type_name -> daml_lf_1.Type.Forall
	44,  // 22: daml_lf_1.Type.struct:type_name -> daml_lf_1.Type.Struct
	40,  // 23: daml_lf_1.Type.syn:type_name -> daml_lf_1.Type.Syn
	6,   // 24: daml_lf_1.Location.module:type_name -> daml_lf_1.ModuleRef
	45,  // 25: daml_lf_1.Location.range:type_name -> daml_lf_1.Location.Range
	18,  // 26: daml_lf_1.Expr.location:type_name -> daml_lf_1.Location
	9,   // 27: daml_lf_1.Expr.val:type_name -> daml_lf_1.ValName
	2,   // 28: daml_lf_1.Expr.builtin:type_name -> daml_lf_1.BuiltinFunction
	1,   // 29: daml_lf_1.Expr.prim_con:type_name -> daml_lf_1.PrimCon
	17,  // 30: daml_lf_1.Expr.prim_lit:type_name -> daml_lf_1.PrimLit
	46,  // 31: daml_lf_1.Expr.rec_con:type_name -> daml_lf_1.Expr.RecCon
	47,  // 32: daml_lf_1.Expr.rec_proj:type_name -> daml_lf_1.Expr.RecProj
	48,  // 33: daml_lf_1.Expr.rec_upd:type_name -> daml_lf_1.Expr.RecUpd
	49,  // 34: daml_lf_1.Expr.variant_con:type_name -> daml_lf_1.Expr.VariantCon
	50,  // 35: daml_lf_1.Expr.enum_con:type_name -> daml_lf_1.Expr.EnumCon
	51,  // 36: daml_lf_1.Expr.struct_con:type_name -> daml_lf_1.Expr.StructCon
	52,  // 37: daml_lf_1.Expr.struct_proj:type_name -> daml_lf_1.Expr.StructProj
	53,  // 38: daml_lf_1.Expr.struct_upd:type_name -> daml_lf_1.Expr.StructUpd
	54,  // 39: daml_lf_1.Expr.app:type_name -> daml_lf_1.Expr.App
	55,  // 40: daml_lf_1.Expr.ty_app:type_name -> daml_lf_1.Expr.TyApp
	56,  // 41: daml_lf_1.Expr.abs:type_name -> daml_lf_1.Expr.Abs
	57,  // 42: daml_lf_1.Expr.ty_abs:type_name -> daml_lf_1.Expr.TyAbs
	21,  // 43: daml_lf_1.Expr.case:type_name -> daml_lf_1.Case
	22,  // 44: daml_lf_1.Expr.let:type_name -> daml_lf_1.Block
	58,  // 45: daml_lf_1.Expr.nil:type_name -> daml_lf_1.Expr.Nil
	59,  // 46: daml_lf_1.Expr.cons:type_name -> daml_lf_1.Expr.Cons
	24,  // 47: daml_lf_1.Expr.update:type_name -> daml_lf_1.Update
	25,  // 48: daml_lf_1.Expr.scenario:type_name -> daml_lf_1.Scenario
	60,  // 49: daml_lf_1.Expr.optional_none:type_name -> daml_lf_1.Expr.OptionalNone
	61,  // 50: daml_lf_1.Expr.optional_some:type_name -> daml_lf_1.Expr.OptionalSome
	62,  // 51: daml_lf_1.Expr.to_any:type_name -> daml_lf_1.Expr.ToAny
	63,  // 52: daml_lf_1.Expr.from_any:type_name -> daml_lf_1.Expr.FromAny
	16,  // 53: daml_lf_1.Expr.type_rep:type_name -> daml_lf_1.Type
	3,   // 54: daml_lf_1.CaseAlt.default:type_name -> daml_lf_1.Unit
	64,  // 55: daml_lf_1.CaseAlt.variant:type_name -> daml_lf_1.CaseAlt.Variant
	1,   // 56: daml_lf_1.CaseAlt.prim_con:type_name -> daml_lf_1.PrimCon
	3,   // 57: daml_lf_1.CaseAlt.nil:type_name -> daml_lf_1.Unit
	66,  // 58: daml_lf_1.CaseAlt.cons:type_name -> daml_lf_1.CaseAlt.Cons
	3,   // 59: daml_lf_1.CaseAlt.optional_none:type_name -> daml_lf_1.Unit
	67,  // 60: daml_lf_1.CaseAlt.optional_some:type_name -> daml_lf_1.CaseAlt.OptionalSome
	65,  // 61: daml_lf_1.CaseAlt.enum:type_name -> daml_lf_1.CaseAlt.Enum
	19,  // 62: daml_lf_1.CaseAlt.body:type_name -> daml_lf_1.Expr
	19,  // 63: daml_lf_1.Case.scrut:type_name -> daml_lf_1.Expr
	20,  // 64: daml_lf_1.Case.alts:type_name -> daml_lf_1.CaseAlt
	14,  // 65: daml_lf_1.Block.bindings:type_name -> daml_lf_1.Binding
	19,  // 66: daml_lf_1.Block.body:type_name -> daml_lf_1.Expr
	16,  // 67: daml_lf_1.Pure.type:type_name -> daml_lf_1.Type
	19,  // 68: daml_lf_1.Pure.expr:type_name -> daml_lf_1.Expr
	23,  // 69: daml_lf_1.Update.pure:type_name -> daml_lf_1.Pure
	22,  // 70: daml_lf_1.Update.block:type_name -> daml_lf_1.Block
	68,  // 71: daml_lf_1.Update.create:type_name -> daml_lf_1.Update.Create
	69,  // 72: daml_lf_1.Update.exercise:type_name -> daml_lf_1.Update.Exercise
	70,  // 73: daml_lf_1.Update.fetch:type_name -> daml_lf_1.Update.Fetch
	3,   // 74: daml_lf_1.Update.get_time:type_name -> daml_lf_1.Unit
	72,  // 75: daml_lf_1.Update.lookup_by_key:type_name -> daml_lf_1.Update.RetrieveByKey
	72,  // 76: daml_lf_1.Update.fetch_by_key:type_name -> daml_lf_1.Update.RetrieveByKey
	71,  // 77: daml_lf_1.Update.embed_expr:type_name -> daml_lf_1.Update.EmbedExpr
	23,  // 78: daml_lf_1.Scenario.pure:type_name -> daml_lf_1.Pure
	22,  // 79: daml_lf_1.Scenario.block:type_name -> daml_lf_1.Block
	73,  // 80: daml_lf_1.Scenario.commit:type_name -> daml_lf_1.Scenario.Commit
	73,  // 81: daml_lf_1.Scenario.mustFailAt:type_name -> daml_lf_1.Scenario.Commit
	19,  // 82: daml_lf_1.Scenario.pass:type_name -> daml_lf_1.Expr
	3,   // 83: daml_lf_1.Scenario.get_time:type_name -> daml_lf_1.Unit
	19,  // 84: daml_lf_1.Scenario.get_party:type_name -> daml_lf_1.Expr
	74,  // 85: daml_lf_1.Scenario.embed_expr:type_name -> daml_lf_1.Scenario.EmbedExpr
	19,  // 86: daml_lf_1.TemplateChoice.controllers:type_name -> daml_lf_1.Expr
	11,  // 87: daml_lf_1.TemplateChoice.arg_binder:type_name -> daml_lf_1.VarWithType
	16,  // 88: daml_lf_1.TemplateChoice.ret_type:type_name -> daml_lf_1.Type
	19,  // 89: daml_lf_1.TemplateChoice.update:type_name -> daml_lf_1.Expr
	18,  // 90: daml_lf_1.TemplateChoice.location:type_name -> daml_lf_1.Location
	76,  // 91: daml_lf_1.KeyExpr.projections:type_name -> daml_lf_1.KeyExpr.Projections
	78,  // 92: daml_lf_1.KeyExpr.record:type_name -> daml_lf_1.KeyExpr.Record
	5,   // 93: daml_lf_1.DefTemplate.tycon_dname:type_name -> daml_lf_1.DottedName
	19,  // 94: daml_lf_1.DefTemplate.precond:type_name -> daml_lf_1.Expr
	19,  // 95: daml_lf_1.DefTemplate.signatories:type_name -> daml_lf_1.Expr
	19,  // 96: daml_lf_1.DefTemplate.agreement:type_name -> daml_lf_1.Expr
	26,  // 97: daml_lf_1.DefTemplate.choices:type_name -> daml_lf_1.TemplateChoice
	19,  // 98: daml_lf_1.DefTemplate.observers:type_name -> daml_lf_1.Expr
	18,  // 99: daml_lf_1.DefTemplate.location:type_name -> daml_lf_1.Location
	79,  // 100: daml_lf_1.DefTemplate.key:type_name -> daml_lf_1.DefTemplate.DefKey
	5,   // 101: daml_lf_1.DefDataType.name_dname:type_name -> daml_lf_1.DottedName
	12,  // 102: daml_lf_1.DefDataType.params:type_name -> daml_lf_1.TypeVarWithKind
	80,  // 103: daml_lf_1.DefDataType.record:type_name -> daml_lf_1.DefDataType.Fields
	80,  // 104: daml_lf_1.DefDataType.variant:type_name -> daml_lf_1.DefDataType.Fields
	81,  // 105: daml_lf_1.DefDataType.enum:type_name -> daml_lf_1.DefDataType.EnumConstructors
	18,  // 106: daml_lf_1.DefDataType.location:type_name -> daml_lf_1.Location
	5,   // 107: daml_lf_1.DefTypeSyn.name_dname:type_name -> daml_lf_1.DottedName
	12,  // 108: daml_lf_1.DefTypeSyn.params:type_name -> daml_lf_1.TypeVarWithKind
	16,  // 109: daml_lf_1.DefTypeSyn.type:type_name -> daml_lf_1.Type
	18,  // 110: daml_lf_1.DefTypeSyn.location:type_name -> daml_lf_1.Location
	82,  // 111: daml_lf_1.DefValue.name_with_type:type_name -> daml_lf_1.DefValue.NameWithType
	19,  // 112: daml_lf_1.DefValue.expr:type_name -> daml_lf_1.Expr
	18,  // 113: daml_lf_1.DefValue.location:type_name -> daml_lf_1.Location
	5,   // 114: daml_lf_1.Module.name_dname:type_name -> daml_lf_1.DottedName
	32,  // 115: daml_lf_1.Module.flags:type_name -> daml_lf_1.FeatureFlags
	30,  // 116: daml_lf_1.Module.synonyms:type_name -> daml_lf_1.DefTypeSyn
	29,  // 117: daml_lf_1.Module.data_types:type_name -> daml_lf_1.DefDataType
	31,  // 118: daml_lf_1.Module.values:type_name -> daml_lf_1.DefValue
	28,  // 119: daml_lf_1.Module.templates:type_name -> daml_lf_1.DefTemplate
	33,  // 120: daml_lf_1.Package.modules:type_name -> daml_lf_1.Module
	34,  // 121: daml_lf_1.Package.interned_dotted_names:type_name -> daml_lf_1.InternedDottedName
	35,  // 122: daml_lf_1.Package.metadata:type_name -> daml_lf_1.PackageMetadata
	15,  // 123: daml_lf_1.Kind.Arrow.params:type_name -> daml_lf_1.Kind
	15,  // 124: daml_lf_1.Kind.Arrow.result:type_name -> daml_lf_1.Kind
	16,  // 125: daml_lf_1.Type.Var.args:type_name -> daml_lf_1.Type
	7,   // 126: daml_lf_1.Type.Con.tycon:type_name -> daml_lf_1.TypeConName
	16,  // 127: daml_lf_1.Type.Con.args:type_name -> daml_lf_1.Type
	8,   // 128: daml_lf_1.Type.Syn.tysyn:type_name -> daml_lf_1.TypeSynName
	16,  // 129: daml_lf_1.Type.Syn.args:type_name -> daml_lf_1.Type
	0,   // 130: daml_lf_1.Type.Prim.prim:type_name -> daml_lf_1.PrimType
	16,  // 131: daml_lf_1.Type.Prim.args:type_name -> daml_lf_1.Type
	16,  // 132: daml_lf_1.Type.Fun.params:type_name -> daml_lf_1.Type
	16,  // 133: daml_lf_1.Type.Fun.result:type_name -> daml_lf_1.Type
	12,  // 134: daml_lf_1.Type.Forall.vars:type_name -> daml_lf_1.TypeVarWithKind
	16,  // 135: daml_lf_1.Type.Forall.body:type_name -> daml_lf_1.Type
	10,  // 136: daml_lf_1.Type.Struct.fields:type_name -> daml_lf_1.FieldWithType
	39,  // 137: daml_lf_1.Expr.RecCon.tycon:type_name -> daml_lf_1.Type.Con
	13,  // 138: daml_lf_1.Expr.RecCon.fields:type_name -> daml_lf_1.FieldWithExpr
	39,  // 139: daml_lf_1.Expr.RecProj.tycon:type_name -> daml_lf_1.Type.Con
	19,  // 140: daml_lf_1.Expr.RecProj.record:type_name -> daml_lf_1.Expr
	39,  // 141: daml_lf_1.Expr.RecUpd.tycon:type_name -> daml_lf_1.Type.Con
	19,  // 142: daml_lf_1.Expr.RecUpd.record:type_name -> daml_lf_1.Expr
	19,  // 143: daml_lf_1.Expr.RecUpd.update:type_name -> daml_lf_1.Expr
	39,  // 144: daml_lf_1.Expr.VariantCon.tycon:type_name -> daml_lf_1.Type.Con
	19,  // 145: daml_lf_1.Expr.VariantCon.variant_arg:type_name -> daml_lf_1.Expr
	7,   // 146: daml_lf_1.Expr.EnumCon.tycon:type_name -> daml_lf_1.TypeConName
	13,  // 147: daml_lf_1.Expr.StructCon.fields:type_name -> daml_lf_1.FieldWithExpr
	19,  // 148: daml_lf_1.Expr.StructProj.struct:type_name -> daml_lf_1.Expr
	19,  // 149: daml_lf_1.Expr.StructUpd.struct:type_name -> daml_lf_1.Expr
	19,  // 150: daml_lf_1.Expr.StructUpd.update:type_name -> daml_lf_1.Expr
	19,  // 151: daml_lf_1.Expr.App.fun:type_name -> daml_lf_1.Expr
	19,  // 152: daml_lf_1.Expr.App.args:type_name -> daml_lf_1.Expr
	19,  // 153: daml_lf_1.Expr.TyApp.expr:type_name -> daml_lf_1.Expr
	16,  // 154: daml_lf_1.Expr.TyApp.types:type_name -> daml_lf_1.Type
	11,  // 155: daml_lf_1.Expr.Abs.param:type_name -> daml_lf_1.VarWithType
	19,  // 156: daml_lf_1.Expr.Abs.body:type_name -> daml_lf_1.Expr
	12,  // 157: daml_lf_1.Expr.TyAbs.param:type_name -> daml_lf_1.TypeVarWithKind
	19,  // 158: daml_lf_1.Expr.TyAbs.body:type_name -> daml_lf_1.Expr
	16,  // 159: daml_lf_1.Expr.Nil.type:type_name -> daml_lf_1.Type
	16,  // 160: daml_lf_1.Expr.Cons.type:type_name -> daml_lf_1.Type
	19,  // 161: daml_lf_1.Expr.Cons.front:type_name -> daml_lf_1.Expr
	19,  // 162: daml_lf_1.Expr.Cons.tail:type_name -> daml_lf_1.Expr
	16,  // 163: daml_lf_1.Expr.OptionalNone.type:type_name -> daml_lf_1.Type
	16,  // 164: daml_lf_1.Expr.OptionalSome.type:type_name -> daml_lf_1.Type
	19,  // 165: daml_lf_1.Expr.OptionalSome.body:type_name -> daml_lf_1.Expr
	16,  // 166: daml_lf_1.Expr.ToAny.type:type_name -> daml_lf_1.Type
	19,  // 167: daml_lf_1.Expr.ToAny.expr:type_name -> daml_lf_1.Expr
	16,  // 168: daml_lf_1.Expr.FromAny.type:type_name -> daml_lf_1.Type
	19,  // 169: daml_lf_1.Expr.FromAny.expr:type_name -> daml_lf_1.Expr
	7,   // 170: daml_lf_1.CaseAlt.Variant.con:type_name -> daml_lf_1.TypeConName
	7,   // 171: daml_lf_1.CaseAlt.Enum.con:type_name -> daml_lf_1.TypeConName
	7,   // 172: daml_lf_1.Update.Create.template:type_name -> daml_lf_1.TypeConName
	19,  // 173: daml_lf_1.Update.Create.expr:type_name -> daml_lf_1.Expr
	7,   // 174: daml_lf_1.Update.Exercise.template:type_name -> daml_lf_1.TypeConName
	19,  // 175: daml_lf_1.Update.Exercise.cid:type_name -> daml_lf_1.Expr
	19,  // 176: daml_lf_1.Update.Exercise.actor:type_name -> daml_lf_1.Expr
	19,  // 177: daml_lf_1.Update.Exercise.arg:type_name -> daml_lf_1.Expr
	7,   // 178: daml_lf_1.Update.Fetch.template:type_name -> daml_lf_1.TypeConName
	19,  // 179: daml_lf_1.Update.Fetch.cid:type_name -> daml_lf_1.Expr
	16,  // 180: daml_lf_1.Update.EmbedExpr.type:type_name -> daml_lf_1.Type
	19,  // 181: daml_lf_1.Update.EmbedExpr.body:type_name -> daml_lf_1.Expr
	7,   // 182: daml_lf_1.Update.RetrieveByKey.template:type_name -> daml_lf_1.TypeConName
	19,  // 183: daml_lf_1.Update.RetrieveByKey.key:type_name -> daml_lf_1.Expr
	19,  // 184: daml_lf_1.Scenario.Commit.party:type_name -> daml_lf_1.Expr
	19,  // 185: daml_lf_1.Scenario.Commit.expr:type_name -> daml_lf_1.Expr
	16,  // 186: daml_lf_1.Scenario.Commit.ret_type:type_name -> daml_lf_1.Type
	16,  // 187: daml_lf_1.Scenario.EmbedExpr.type:type_name -> daml_lf_1.Type
	19,  // 188: daml_lf_1.Scenario.EmbedExpr.body:type_name -> daml_lf_1.Expr
	39,  // 189: daml_lf_1.KeyExpr.Projection.tycon:type_name -> daml_lf_1.Type.Con
	75,  // 190: daml_lf_1.KeyExpr.Projections.projections:type_name -> daml_lf_1.KeyExpr.Projection
	27,  // 191: daml_lf_1.KeyExpr.RecordField.expr:type_name -> daml_lf_1.KeyExpr
	39,  // 192: daml_lf_1.KeyExpr.Record.tycon:type_name -> daml_lf_1.Type.Con
	77,  // 193: daml_lf_1.KeyExpr.Record.fields:type_name -> daml_lf_1.KeyExpr.RecordField
	16,  // 194: daml_lf_1.DefTemplate.DefKey.type:type_name -> daml_lf_1.Type
	27,  // 195: daml_lf_1.DefTemplate.DefKey.key:type_name -> daml_lf_1.KeyExpr
	19,  // 196: daml_lf_1.DefTemplate.DefKey.complex_key:type_name -> daml_lf_1.Expr
	19,  // 197: daml_lf_1.DefTemplate.DefKey.maintainers:type_name -> daml_lf_1.Expr
	10,  // 198: daml_lf_1.DefDataType.Fields.fields:type_name -> daml_lf_1.FieldWithType
	16,  // 199: daml_lf_1.DefValue.NameWithType.type:type_name -> daml_lf_1.Type
	200, // [200:200] is the sub-list for method output_type
	200, // [200:200] is the sub-list for method input_type
	200, // [200:200] is the sub-list for extension type_name
	200, // [200:200] is the sub-list for extension extendee
	0,   // [0:200] is the sub-list for field type_name
}

func init() { file_com_daml_daml_lf_dev_daml_lf_1_proto_init() }
func file_com_daml_daml_lf_dev_daml_lf_1_proto_init() {
	if File_com_daml_daml_lf_dev_daml_lf_1_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_com_daml_daml_lf_dev_daml_lf_1_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Unit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_daml_daml_lf_dev_daml_lf_1_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PackageRef); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_daml_daml_lf_dev_daml_lf_1_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DottedName); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_daml_daml_lf_dev_daml_lf_1_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ModuleRef); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_daml_daml_lf_dev_daml_lf_1_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TypeConName); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_daml_daml_lf_dev_daml_lf_1_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TypeSynName); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_daml_daml_lf_dev_daml_lf_1_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ValName); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_daml_daml_lf_dev_daml_lf_1_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FieldWithType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_daml_daml_lf_dev_daml_lf_1_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VarWithType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_daml_daml_lf_dev_daml_lf_1_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TypeVarWithKind); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_daml_daml_lf_dev_daml_lf_1_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FieldWithExpr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_daml_daml_lf_dev_daml_lf_1_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Binding); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_daml_daml_lf_dev_daml_lf_1_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Kind); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_daml_daml_lf_dev_daml_lf_1_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Type); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_daml_daml_lf_dev_daml_lf_1_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PrimLit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_daml_daml_lf_dev_daml_lf_1_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Location); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_daml_daml_lf_dev_daml_lf_1_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Expr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_daml_daml_lf_dev_daml_lf_1_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CaseAlt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_daml_daml_lf_dev_daml_lf_1_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Case); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_daml_daml_lf_dev_daml_lf_1_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Block); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_daml_daml_lf_dev_daml_lf_1_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Pure); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_daml_daml_lf_dev_daml_lf_1_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Update); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_daml_daml_lf_dev_daml_lf_1_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Scenario); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_daml_daml_lf_dev_daml_lf_1_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TemplateChoice); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_daml_daml_lf_dev_daml_lf_1_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KeyExpr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_daml_daml_lf_dev_daml_lf_1_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DefTemplate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_daml_daml_lf_dev_daml_lf_1_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DefDataType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_daml_daml_lf_dev_daml_lf_1_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DefTypeSyn); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_daml_daml_lf_dev_daml_lf_1_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DefValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_daml_daml_lf_dev_daml_lf_1_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FeatureFlags); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_daml_daml_lf_dev_daml_lf_1_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Module); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_daml_daml_lf_dev_daml_lf_1_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InternedDottedName); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_daml_daml_lf_dev_daml_lf_1_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PackageMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_daml_daml_lf_dev_daml_lf_1_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Package); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_daml_daml_lf_dev_daml_lf_1_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Kind_Arrow); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_daml_daml_lf_dev_daml_lf_1_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Type_Var); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_daml_daml_lf_dev_daml_lf_1_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Type_Con); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_daml_daml_lf_dev_daml_lf_1_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Type_Syn); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_daml_daml_lf_dev_daml_lf_1_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Type_Prim); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_daml_daml_lf_dev_daml_lf_1_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Type_Fun); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_daml_daml_lf_dev_daml_lf_1_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Type_Forall); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_daml_daml_lf_dev_daml_lf_1_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Type_Struct); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_daml_daml_lf_dev_daml_lf_1_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Location_Range); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_daml_daml_lf_dev_daml_lf_1_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Expr_RecCon); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_daml_daml_lf_dev_daml_lf_1_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Expr_RecProj); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_daml_daml_lf_dev_daml_lf_1_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Expr_RecUpd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_daml_daml_lf_dev_daml_lf_1_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Expr_VariantCon); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_daml_daml_lf_dev_daml_lf_1_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Expr_EnumCon); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_daml_daml_lf_dev_daml_lf_1_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Expr_StructCon); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_daml_daml_lf_dev_daml_lf_1_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Expr_StructProj); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_daml_daml_lf_dev_daml_lf_1_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Expr_StructUpd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_daml_daml_lf_dev_daml_lf_1_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Expr_App); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_daml_daml_lf_dev_daml_lf_1_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Expr_TyApp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_daml_daml_lf_dev_daml_lf_1_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Expr_Abs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_daml_daml_lf_dev_daml_lf_1_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Expr_TyAbs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_daml_daml_lf_dev_daml_lf_1_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Expr_Nil); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_daml_daml_lf_dev_daml_lf_1_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Expr_Cons); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_daml_daml_lf_dev_daml_lf_1_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Expr_OptionalNone); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_daml_daml_lf_dev_daml_lf_1_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Expr_OptionalSome); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_daml_daml_lf_dev_daml_lf_1_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Expr_ToAny); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_daml_daml_lf_dev_daml_lf_1_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Expr_FromAny); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_daml_daml_lf_dev_daml_lf_1_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CaseAlt_Variant); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_daml_daml_lf_dev_daml_lf_1_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CaseAlt_Enum); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_daml_daml_lf_dev_daml_lf_1_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CaseAlt_Cons); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_daml_daml_lf_dev_daml_lf_1_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CaseAlt_OptionalSome); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_daml_daml_lf_dev_daml_lf_1_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Update_Create); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_daml_daml_lf_dev_daml_lf_1_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Update_Exercise); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_daml_daml_lf_dev_daml_lf_1_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Update_Fetch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_daml_daml_lf_dev_daml_lf_1_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Update_EmbedExpr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_daml_daml_lf_dev_daml_lf_1_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Update_RetrieveByKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_daml_daml_lf_dev_daml_lf_1_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Scenario_Commit); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_daml_daml_lf_dev_daml_lf_1_proto_msgTypes[71].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Scenario_EmbedExpr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_daml_daml_lf_dev_daml_lf_1_proto_msgTypes[72].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KeyExpr_Projection); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_daml_daml_lf_dev_daml_lf_1_proto_msgTypes[73].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KeyExpr_Projections); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_daml_daml_lf_dev_daml_lf_1_proto_msgTypes[74].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KeyExpr_RecordField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_daml_daml_lf_dev_daml_lf_1_proto_msgTypes[75].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KeyExpr_Record); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_daml_daml_lf_dev_daml_lf_1_proto_msgTypes[76].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DefTemplate_DefKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_daml_daml_lf_dev_daml_lf_1_proto_msgTypes[77].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DefDataType_Fields); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_daml_daml_lf_dev_daml_lf_1_proto_msgTypes[78].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DefDataType_EnumConstructors); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_com_daml_daml_lf_dev_daml_lf_1_proto_msgTypes[79].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DefValue_NameWithType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_com_daml_daml_lf_dev_daml_lf_1_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*PackageRef_Self)(nil),
		(*PackageRef_PackageIdStr)(nil),
		(*PackageRef_PackageIdInternedStr)(nil),
	}
	file_com_daml_daml_lf_dev_daml_lf_1_proto_msgTypes[3].OneofWrappers = []interface{}{
		(*ModuleRef_ModuleNameDname)(nil),
		(*ModuleRef_ModuleNameInternedDname)(nil),
	}
	file_com_daml_daml_lf_dev_daml_lf_1_proto_msgTypes[4].OneofWrappers = []interface{}{
		(*TypeConName_NameDname)(nil),
		(*TypeConName_NameInternedDname)(nil),
	}
	file_com_daml_daml_lf_dev_daml_lf_1_proto_msgTypes[5].OneofWrappers = []interface{}{
		(*TypeSynName_NameDname)(nil),
		(*TypeSynName_NameInternedDname)(nil),
	}
	file_com_daml_daml_lf_dev_daml_lf_1_proto_msgTypes[7].OneofWrappers = []interface{}{
		(*FieldWithType_FieldStr)(nil),
		(*FieldWithType_FieldInternedStr)(nil),
	}
	file_com_daml_daml_lf_dev_daml_lf_1_proto_msgTypes[8].OneofWrappers = []interface{}{
		(*VarWithType_VarStr)(nil),
		(*VarWithType_VarInternedStr)(nil),
	}
	file_com_daml_daml_lf_dev_daml_lf_1_proto_msgTypes[9].OneofWrappers = []interface{}{
		(*TypeVarWithKind_VarStr)(nil),
		(*TypeVarWithKind_VarInternedStr)(nil),
	}
	file_com_daml_daml_lf_dev_daml_lf_1_proto_msgTypes[10].OneofWrappers = []interface{}{
		(*FieldWithExpr_FieldStr)(nil),
		(*FieldWithExpr_FieldInternedStr)(nil),
	}
	file_com_daml_daml_lf_dev_daml_lf_1_proto_msgTypes[12].OneofWrappers = []interface{}{
		(*Kind_Star)(nil),
		(*Kind_Arrow_)(nil),
		(*Kind_Nat)(nil),
	}
	file_com_daml_daml_lf_dev_daml_lf_1_proto_msgTypes[13].OneofWrappers = []interface{}{
		(*Type_Var_)(nil),
		(*Type_Con_)(nil),
		(*Type_Prim_)(nil),
		(*Type_Fun_)(nil),
		(*Type_Forall_)(nil),
		(*Type_Struct_)(nil),
		(*Type_Nat)(nil),
		(*Type_Syn_)(nil),
	}
	file_com_daml_daml_lf_dev_daml_lf_1_proto_msgTypes[14].OneofWrappers = []interface{}{
		(*PrimLit_Int64)(nil),
		(*PrimLit_DecimalStr)(nil),
		(*PrimLit_NumericInternedStr)(nil),
		(*PrimLit_TextStr)(nil),
		(*PrimLit_TextInternedStr)(nil),
		(*PrimLit_Timestamp)(nil),
		(*PrimLit_PartyStr)(nil),
		(*PrimLit_PartyInternedStr)(nil),
		(*PrimLit_Date)(nil),
	}
	file_com_daml_daml_lf_dev_daml_lf_1_proto_msgTypes[16].OneofWrappers = []interface{}{
		(*Expr_VarStr)(nil),
		(*Expr_VarInternedStr)(nil),
		(*Expr_Val)(nil),
		(*Expr_Builtin)(nil),
		(*Expr_PrimCon)(nil),
		(*Expr_PrimLit)(nil),
		(*Expr_RecCon_)(nil),
		(*Expr_RecProj_)(nil),
		(*Expr_RecUpd_)(nil),
		(*Expr_VariantCon_)(nil),
		(*Expr_EnumCon_)(nil),
		(*Expr_StructCon_)(nil),
		(*Expr_StructProj_)(nil),
		(*Expr_StructUpd_)(nil),
		(*Expr_App_)(nil),
		(*Expr_TyApp_)(nil),
		(*Expr_Abs_)(nil),
		(*Expr_TyAbs_)(nil),
		(*Expr_Case)(nil),
		(*Expr_Let)(nil),
		(*Expr_Nil_)(nil),
		(*Expr_Cons_)(nil),
		(*Expr_Update)(nil),
		(*Expr_Scenario)(nil),
		(*Expr_OptionalNone_)(nil),
		(*Expr_OptionalSome_)(nil),
		(*Expr_ToAny_)(nil),
		(*Expr_FromAny_)(nil),
		(*Expr_TypeRep)(nil),
	}
	file_com_daml_daml_lf_dev_daml_lf_1_proto_msgTypes[17].OneofWrappers = []interface{}{
		(*CaseAlt_Default)(nil),
		(*CaseAlt_Variant_)(nil),
		(*CaseAlt_PrimCon)(nil),
		(*CaseAlt_Nil)(nil),
		(*CaseAlt_Cons_)(nil),
		(*CaseAlt_OptionalNone)(nil),
		(*CaseAlt_OptionalSome_)(nil),
		(*CaseAlt_Enum_)(nil),
	}
	file_com_daml_daml_lf_dev_daml_lf_1_proto_msgTypes[21].OneofWrappers = []interface{}{
		(*Update_Pure)(nil),
		(*Update_Block)(nil),
		(*Update_Create_)(nil),
		(*Update_Exercise_)(nil),
		(*Update_Fetch_)(nil),
		(*Update_GetTime)(nil),
		(*Update_LookupByKey)(nil),
		(*Update_FetchByKey)(nil),
		(*Update_EmbedExpr_)(nil),
	}
	file_com_daml_daml_lf_dev_daml_lf_1_proto_msgTypes[22].OneofWrappers = []interface{}{
		(*Scenario_Pure)(nil),
		(*Scenario_Block)(nil),
		(*Scenario_Commit_)(nil),
		(*Scenario_MustFailAt)(nil),
		(*Scenario_Pass)(nil),
		(*Scenario_GetTime)(nil),
		(*Scenario_GetParty)(nil),
		(*Scenario_EmbedExpr_)(nil),
	}
	file_com_daml_daml_lf_dev_daml_lf_1_proto_msgTypes[23].OneofWrappers = []interface{}{
		(*TemplateChoice_NameStr)(nil),
		(*TemplateChoice_NameInternedStr)(nil),
		(*TemplateChoice_SelfBinderStr)(nil),
		(*TemplateChoice_SelfBinderInternedStr)(nil),
	}
	file_com_daml_daml_lf_dev_daml_lf_1_proto_msgTypes[24].OneofWrappers = []interface{}{
		(*KeyExpr_Projections_)(nil),
		(*KeyExpr_Record_)(nil),
	}
	file_com_daml_daml_lf_dev_daml_lf_1_proto_msgTypes[25].OneofWrappers = []interface{}{
		(*DefTemplate_TyconDname)(nil),
		(*DefTemplate_TyconInternedDname)(nil),
		(*DefTemplate_ParamStr)(nil),
		(*DefTemplate_ParamInternedStr)(nil),
	}
	file_com_daml_daml_lf_dev_daml_lf_1_proto_msgTypes[26].OneofWrappers = []interface{}{
		(*DefDataType_NameDname)(nil),
		(*DefDataType_NameInternedDname)(nil),
		(*DefDataType_Record)(nil),
		(*DefDataType_Variant)(nil),
		(*DefDataType_Enum)(nil),
	}
	file_com_daml_daml_lf_dev_daml_lf_1_proto_msgTypes[27].OneofWrappers = []interface{}{
		(*DefTypeSyn_NameDname)(nil),
		(*DefTypeSyn_NameInternedDname)(nil),
	}
	file_com_daml_daml_lf_dev_daml_lf_1_proto_msgTypes[30].OneofWrappers = []interface{}{
		(*Module_NameDname)(nil),
		(*Module_NameInternedDname)(nil),
	}
	file_com_daml_daml_lf_dev_daml_lf_1_proto_msgTypes[35].OneofWrappers = []interface{}{
		(*Type_Var_VarStr)(nil),
		(*Type_Var_VarInternedStr)(nil),
	}
	file_com_daml_daml_lf_dev_daml_lf_1_proto_msgTypes[44].OneofWrappers = []interface{}{
		(*Expr_RecProj_FieldStr)(nil),
		(*Expr_RecProj_FieldInternedStr)(nil),
	}
	file_com_daml_daml_lf_dev_daml_lf_1_proto_msgTypes[45].OneofWrappers = []interface{}{
		(*Expr_RecUpd_FieldStr)(nil),
		(*Expr_RecUpd_FieldInternedStr)(nil),
	}
	file_com_daml_daml_lf_dev_daml_lf_1_proto_msgTypes[46].OneofWrappers = []interface{}{
		(*Expr_VariantCon_VariantConStr)(nil),
		(*Expr_VariantCon_VariantConInternedStr)(nil),
	}
	file_com_daml_daml_lf_dev_daml_lf_1_proto_msgTypes[47].OneofWrappers = []interface{}{
		(*Expr_EnumCon_EnumConStr)(nil),
		(*Expr_EnumCon_EnumConInternedStr)(nil),
	}
	file_com_daml_daml_lf_dev_daml_lf_1_proto_msgTypes[49].OneofWrappers = []interface{}{
		(*Expr_StructProj_FieldStr)(nil),
		(*Expr_StructProj_FieldInternedStr)(nil),
	}
	file_com_daml_daml_lf_dev_daml_lf_1_proto_msgTypes[50].OneofWrappers = []interface{}{
		(*Expr_StructUpd_FieldStr)(nil),
		(*Expr_StructUpd_FieldInternedStr)(nil),
	}
	file_com_daml_daml_lf_dev_daml_lf_1_proto_msgTypes[61].OneofWrappers = []interface{}{
		(*CaseAlt_Variant_VariantStr)(nil),
		(*CaseAlt_Variant_VariantInternedStr)(nil),
		(*CaseAlt_Variant_BinderStr)(nil),
		(*CaseAlt_Variant_BinderInternedStr)(nil),
	}
	file_com_daml_daml_lf_dev_daml_lf_1_proto_msgTypes[62].OneofWrappers = []interface{}{
		(*CaseAlt_Enum_ConstructorStr)(nil),
		(*CaseAlt_Enum_ConstructorInternedStr)(nil),
	}
	file_com_daml_daml_lf_dev_daml_lf_1_proto_msgTypes[63].OneofWrappers = []interface{}{
		(*CaseAlt_Cons_VarHeadStr)(nil),
		(*CaseAlt_Cons_VarHeadInternedStr)(nil),
		(*CaseAlt_Cons_VarTailStr)(nil),
		(*CaseAlt_Cons_VarTailInternedStr)(nil),
	}
	file_com_daml_daml_lf_dev_daml_lf_1_proto_msgTypes[64].OneofWrappers = []interface{}{
		(*CaseAlt_OptionalSome_VarBodyStr)(nil),
		(*CaseAlt_OptionalSome_VarBodyInternedStr)(nil),
	}
	file_com_daml_daml_lf_dev_daml_lf_1_proto_msgTypes[66].OneofWrappers = []interface{}{
		(*Update_Exercise_ChoiceStr)(nil),
		(*Update_Exercise_ChoiceInternedStr)(nil),
	}
	file_com_daml_daml_lf_dev_daml_lf_1_proto_msgTypes[72].OneofWrappers = []interface{}{
		(*KeyExpr_Projection_FieldStr)(nil),
		(*KeyExpr_Projection_FieldInternedStr)(nil),
	}
	file_com_daml_daml_lf_dev_daml_lf_1_proto_msgTypes[74].OneofWrappers = []interface{}{
		(*KeyExpr_RecordField_FieldStr)(nil),
		(*KeyExpr_RecordField_FieldInternedStr)(nil),
	}
	file_com_daml_daml_lf_dev_daml_lf_1_proto_msgTypes[76].OneofWrappers = []interface{}{
		(*DefTemplate_DefKey_Key)(nil),
		(*DefTemplate_DefKey_ComplexKey)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_com_daml_daml_lf_dev_daml_lf_1_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   80,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_com_daml_daml_lf_dev_daml_lf_1_proto_goTypes,
		DependencyIndexes: file_com_daml_daml_lf_dev_daml_lf_1_proto_depIdxs,
		EnumInfos:         file_com_daml_daml_lf_dev_daml_lf_1_proto_enumTypes,
		MessageInfos:      file_com_daml_daml_lf_dev_daml_lf_1_proto_msgTypes,
	}.Build()
	File_com_daml_daml_lf_dev_daml_lf_1_proto = out.File
	file_com_daml_daml_lf_dev_daml_lf_1_proto_rawDesc = nil
	file_com_daml_daml_lf_dev_daml_lf_1_proto_goTypes = nil
	file_com_daml_daml_lf_dev_daml_lf_1_proto_depIdxs = nil
}
