# Copyright (c) 2017-2022 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved.
# SPDX-License-Identifier: Apache-2.0
commands:
  restore_dazl_cache:
    parameters:
      python_version:
        type: string
      
    steps:
      - restore_cache:
          key: jq-{{ checksum ".circleci/install-jq" }}
      - run:
          command: .circleci/install-jq
      - save_cache:
          key: jq-{{ checksum ".circleci/install-jq" }}
          paths:
           - /home/circleci/.jq

      - restore_cache:
          key: daml-{{ checksum ".circleci/install-daml" }}
      - run:
          command: .circleci/install-daml
      - save_cache:
          key: daml-{{ checksum ".circleci/install-daml" }}
          paths:
           - /home/circleci/.daml

      - restore_cache:
          key: python-deps-{{ checksum "poetry.lock" }}-<<parameters.python_version>>
      - run:
          command: poetry config virtualenvs.in-project true && make python-deps
      - save_cache:
          key: python-deps-{{ checksum "poetry.lock" }}-<<parameters.python_version>>
          paths:
           - .venv    

jobs:
  check-py:
    parameters:
      python_version:
        type: string
    docker:
      - image: cimg/python:<<parameters.python_version>>-browsers
    resource_class: medium+
    steps:
      - checkout
      - restore_dazl_cache:
          python_version: <<parameters.python_version>>
      - run:
          name: Python format checks
          command: make python-format-test
      - run:
          name: Python typechecks
          command: make python-typecheck
      - store_test_results:
          path: target/test-results

  test-py:
    parameters:
      python_version:
        type: string
    docker:
      - image: cimg/python:<<parameters.python_version>>-browsers
    resource_class: medium+
    steps:
      - checkout
      - restore_dazl_cache:
          python_version: <<parameters.python_version>>
      - run:
          name: Python unit tests
          command: make python-unit-test
      - run:
          name: Python integration tests
          command: make python-integration-test
      - run:
          name: Python packaging
          command: make build
      - store_test_results:
          path: target/test-results

  blackduck:
    docker:
      - image: cimg/python:3.7.12-browsers
    steps:
      - checkout
      - restore_dazl_cache:
          python_version: "3.7.12"
      - run:
          name: Python packaging
          command: make build
      - run:
          name: Run Blackduck Detect
          command: |
            bash <(curl -s https://raw.githubusercontent.com/DACH-NY/security-blackduck/master/synopsys-detect) \
            ci-build ${CIRCLE_PROJECT_USERNAME}_${CIRCLE_PROJECT_REPONAME} ${CIRCLE_BRANCH} \
            --detect.excluded.detector.types=GO_MOD \
            --logging.level.com.synopsys.integration=DEBUG \
            --detect.policy.check.fail.on.severities=MAJOR,CRITICAL,BLOCKER \
            --detect.timeout=600

  # build doesn't do anything, except run after all of our other jobs.
  build:
    docker:
      - image: cimg/base:stable
    steps:
      - run:
          name: Success
          command: |
            echo "success!"
            
version: 2.1               
workflows:
  workflow:
    jobs:
      - blackduck:
          context: blackduck
      - check-py:
          matrix:
            parameters:
              python_version: ["3.7.12", "3.8.12", "3.9.10", "3.10.2"]
      - test-py:
          matrix:
            parameters:
              python_version: ["3.7.12", "3.8.12", "3.9.10", "3.10.2"]
      - build:
          requires:
           - blackduck
           - check-py
           - test-py
